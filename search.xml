<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>2020年我都经历了什么？</title>
      <link href="2021/02/67.html"/>
      <url>2021/02/67.html</url>
      
        <content type="html"><![CDATA[<p>元旦的时候就想写这篇文章了，可是因为各种原因吧（主要是懒）就准备拖到大年初一来写，可是从在除夕晚上就开始和亲戚朋友玩啊，喝酒啊，一连就好几天，迷迷糊糊的，自然又把这个东西搁置了。</p><hr><p>我总觉得2020年的开始是一个失败的开始，从19年12月份出现新冠到2020年正月这段时间迅速爆发，是真的让人害怕，我很幸运我从学校安全的回到了家中。</p><p>因为这次的疫情，我的大学生活吧，有1/8时间是在家里对着电脑上网课，说实在的，效果真的不怎样，今年看起来还是会继续网课，就这样1/4的大学生活就过去了，干脆在家直接毕业算了。。</p><p>作为一名学生，那我们就说说网课吧，有的人可能知道，2020年4月18日晚间各大网课平台自动化完成学习任务、自动答题的众多脚本插件，如“网课助手开发组”开发的“超星网课助手”、“超星网课助手(考试专版)”、“智慧树网课助手”，“cxmooc-tools开发团队”开发的cxmooc-tools系列工具（超星慕课小、智慧树、中国大学慕课小工具）均已无法使用。作者称因为个人、服务器等资源的成本与多方面压力因素影响均宣布即日起停止维护，题库不再提供任何查询服务。发布了公告“停止维护意味着所有功能不再可靠或无法使用，建议各位自行移除插件或关闭插件，避免脚本停止维护后所带来的损失。向各位用户致以最诚挚的歉意。”“职教云刷课助手”、“U校园网课助手”、“中国大学慕课mooc答题/自动播放脚本”的开发者也于不久后宣布停止维护或下架脚本。目前在脚本论坛“Greasy Fork”上已无法搜索到上述脚本。网友猜测开发者同时下架脚本并宣布停止维护原因可能是由于pandownload作者被抓，担心自己可能面临法律风险。</p><ul><li>相关文章<ul><li><a href="https://docs.qq.com/doc/DZGJSVG1mRUpvdlJI">https://docs.qq.com/doc/DZGJSVG1mRUpvdlJI</a></li><li><a href="https://docs.qq.com/doc/DR09vYm10amFndk92">https://docs.qq.com/doc/DR09vYm10amFndk92</a></li></ul></li></ul><p>怎么说呢，由于各方面原因吧，正如其告知书所说的:</p><blockquote><p>我们一直坚持免费，只为分享自己的代码。送君千里，终须一别，今日的分别是为了明天更好的相聚，我们江湖再见！</p></blockquote><p>我们应该向所有开原作者致敬！</p><p>        <span class="lazyload-img-span">        <img              data-src="http://pic.521daigua.cn/2021/02/20/36ee698b50534.jpg" >        </sapn>      </p><p>当时正是网课才开始的时候，我也再用这些脚本吧，这一下给我整傻了，那怎么办呢，还好作者大大放出了一些题库，勉强能用。我就决定自己假设题库服务，这个做起来并不复杂，因为脚本有大佬写好的，只是换一个题库接口罢了，对于接口这东西，用PHP就可以完成，只要功能就是数据库的增删改查，没什么技术含量。</p><p>说不如做哈，两天就把demo写完了，跑起来把自己的网课全部搞完，没过多久，就看到好多人都在求题库什么的，我就想着不如把接口公开的，独乐乐不如众乐乐，当我回过头一看代码，没有写注释的习惯（这要改，好长时间了。。）感觉看完有点蒙，不过也能实现想要的功能，所以就在油猴上发布了更改后的脚本，好景不长好，当下载量达到8000+的时候，被管理员强制下架了，说是存在token，下架也好，正好用ThinkPHP重新写一下接口，写完之后考虑了一下，换了一台服务器，12月12日又在油猴重新发布了脚本，但是不打算再油猴更新，而是在自己的官网进行更新。</p><p>为了方便小白使用，我又进行了浏览器封装，打开即用，这就是现在大家所看到的结果吧</p><hr><p>这一年里，经历的最多的网暴了，知道我的信息有什么用，谈合作谈不来就不谈呗，威胁人就没意思了，我从一开始就没想过要和谁谁合作啥的，我不缺钱，做这些东西纯属是为了娱乐，能用就用，不能用就不用呗，没有人强迫你。或许我也知道为什么那些作者会关闭服务了，有些人就喜欢恶心人呗，跟王者农药的小学生一样，B话多技术差。</p><p>        <span class="lazyload-img-span">        <img              data-src="http://pic.521daigua.cn/2021/02/20/b4d6f824e8d79.jpg" >        </sapn>      </p><hr><p>别的事情或多或少的也记不清楚了，你就说一下2021年的计划吧</p><ul><li>拿到驾照（还差科三科四）</li><li>陪好她（满眼尽是喜欢）</li><li>题库坚持运营下去（纯属出于个人爱好，毕竟服务器月月要续费）</li><li>好好学习（之前就玩了）</li><li>尝试参加一些比赛吧（对所学专业没兴趣，可能跨专业）</li><li>开始Java从入门到入土之路（最近感觉挺有意思）</li></ul><hr><p>大概就这些吧，大家一起加油努力吧！</p>]]></content>
      
      
      
        <tags>
            
            <tag> daily </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux环境下安装Docker以及其常用命令</title>
      <link href="2021/02/66.html"/>
      <url>2021/02/66.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>Docker 是一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的镜像中，然后发布到任何流行的 Linux或Windows 机器上，也可以实现虚拟化。容器是完全使用沙箱机制，相互之间不会有任何接口。</p></blockquote><p>        <span class="lazyload-img-span">        <img              data-src="https://p.pstatp.com/origin/138ea000055afa9a4fa5a" >        </sapn>      </p><a id="more"></a><h1 id="安装要求"><a href="#安装要求" class="headerlink" title="安装要求"></a>安装要求</h1><ul><li>Linux内核  &gt; <code>3.1</code></li></ul><pre><code class="shell">#查看Linux内核版本uanme -r</code></pre><ul><li>不是<code>OpenVZ</code>虚拟化架构</li></ul><pre><code class="shell">#CentOS安装virt-whatyum -y install virt-what#Debian or Ubuntu安装virt-whatapt-get install -y virt-what#查看虚拟化架构virt-what</code></pre><h1 id="CentOS-7-安装-Docker"><a href="#CentOS-7-安装-Docker" class="headerlink" title="CentOS 7 安装 Docker"></a>CentOS 7 安装 Docker</h1><ul><li>卸载旧版Docker</li></ul><pre><code class="shell">sudo yum remove docker \                  docker-client \                  docker-client-latest \                  docker-common \                  docker-latest \                  docker-latest-logrotate \                  docker-logrotate \                  docker-engine</code></pre><p>        <span class="lazyload-img-span">        <img              data-src="https://p.pstatp.com/origin/ff0100033c402b50bf48" >        </sapn>      </p><ul><li>设置Docker存储库</li></ul><pre><code class="shell">sudo yum -y install -y yum-utilssudo yum-config-manager \    --add-repo \    https://download.docker.com/linux/centos/docker-ce.repo</code></pre><p>        <span class="lazyload-img-span">        <img              data-src="https://p.pstatp.com/origin/137ec00025ea1b6ed4d3b" >        </sapn>      </p><ul><li>安装最新版Docker 引擎和容器</li></ul><pre><code class="shell">sudo yum -y install docker-ce docker-ce-cli containerd.io</code></pre><ul><li>启动Docker</li></ul><pre><code class="shell">#启动Dockersudo systemctl start docker#开机启动sudo systemctl enable docker</code></pre><blockquote><p>更多说明可参考：<a href="https://docs.docker.com/engine/install/centos/">https://docs.docker.com/engine/install/centos/</a></p></blockquote><h1 id="验证与测试"><a href="#验证与测试" class="headerlink" title="验证与测试"></a>验证与测试</h1><p>安装顺利可以使用<code>docker -v</code>可查看到当前版本：</p><pre><code class="shell">[root@iZe0754mxynaalZ ~]# docker -vDocker version 20.10.3, build 48d30b5</code></pre><h1 id="Docker镜像加速"><a href="#Docker镜像加速" class="headerlink" title="Docker镜像加速"></a>Docker镜像加速</h1><p>Docker镜像在海外，国内拉取速度非常缓慢，可以使用网易Docker镜像源来加速,新建一个文件<code>/etc/docker/daemon.json</code>添加以下内容：</p><pre><code class="shell">&#123; &quot;registry-mirrors&quot;: [&quot;http://hub-mirror.c.163.com&quot;]&#125;</code></pre><h1 id="Docker常用命令"><a href="#Docker常用命令" class="headerlink" title="Docker常用命令"></a>Docker常用命令</h1><ul><li>查看运行中的Docker进程：<code>docker ps</code></li><li>启动容器：<code>docker start id</code></li><li>停止指定docker进程：<code>docker stop id</code></li><li>查找镜像：<code>docker search name</code></li><li>查看已安装的镜像：<code>docker images</code></li><li>删除某个镜像：<code>docker rm &lt;image id&gt;</code></li></ul><blockquote><p>实际过程中可能遇到其它问题，仅供各位参考，更多说明建议参考Docker官方文档。</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Scrapy中选择器用法</title>
      <link href="2021/01/65.html"/>
      <url>2021/01/65.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>Scrapy提取数据有自己的一套机制，被称作选择器（selectors）,通过特定的Xpath或者CSS表达式来选择HTML文件的某个部分<br>Xpath是专门在XML文件中选择节点的语言，也可以用在HTML上。<br>CSS是一门将HTML文档样式化语言，选择器由它定义，并与特定的HTML元素的样式相关联。</p></blockquote><a id="more"></a><blockquote><p>官方测试页面网址：<a href="https://docs.scrapy.org/en/latest/_static/selectors-sample1.html">https://docs.scrapy.org/en/latest/_static/selectors-sample1.html</a></p></blockquote><ul><li><p>三种选择器</p><ul><li>css</li><li>xpath</li><li>re</li></ul></li><li><p>进入shell环境</p><p><code>scrapy shell https://docs.scrapy.org/en/latest/_static/selectors-sample1.html</code></p></li></ul><ul><li><p>使用selector进行查询</p><pre><code class="shell"># 直接执行selector&gt;&gt;&gt; response.selector&lt;Selector xpath=None data=&#39;&lt;html&gt;\n &lt;head&gt;\n  &lt;base href=&quot;http://e...&#39;&gt;# 调用selector的xpath选择器&gt;&gt;&gt; response.selector.xpath(&#39;//title/text()&#39;)[&lt;Selector xpath=&#39;//title/text()&#39; data=&#39;Example website&#39;&gt;]&gt;&gt;&gt; response.selector.xpath(&#39;//title/text()&#39;).extract_first()&#39;Example website&#39;# 调用selector的css选择器&gt;&gt;&gt; response.selector.css(&#39;title::text&#39;).extract_first()&#39;Example website&#39;# 其他调用方法（不写selector）&gt;&gt;&gt; response.xpath(&#39;//title/text()&#39;).extract_first()&#39;Example website&#39;&gt;&gt;&gt; response.css(&#39;title::text&#39;).extract_first()&#39;Example website&#39;</code></pre><p>可以看出，无论是<code>xpath</code>还是<code>css</code>选择器，返回的数据都是一个<code>selector</code>的列表，这就说明，我们可以接着调用这两种方法进行层层的迭代的查询。</p><pre><code class="shell">&gt;&gt;&gt; response.xpath(&#39;//div[@id=&quot;images&quot;]&#39;)[&lt;Selector xpath=&#39;//div[@id=&quot;images&quot;]&#39; data=&#39;&lt;div id=&quot;images&quot;&gt;\n   &lt;a href=&quot;image1....&#39;&gt;]# 迭代查询&gt;&gt;&gt; response.xpath(&#39;//div[@id=&quot;images&quot;]&#39;).css(&#39;img&#39;)[&lt;Selector xpath=&#39;descendant-or-self::img&#39; data=&#39;&lt;imgsrc=&quot;image1_thumb.jpg&quot;&gt;&#39;&gt;, &lt;Selector xpath=&#39;descendant-or-self::img&#39; data=&#39;&lt;img src=&quot;image2_thumb.jpg&quot;&gt;&#39;&gt;,&lt;Selector xpath=&#39;descendant-or-self::img&#39; data=&#39;&lt;img src=&quot;image3_thumb.jpg&quot;&gt;&#39;&gt;, &lt;Selector xpath=&#39;descendant-or-self::img&#39; data=&#39;&lt;img src=&quot;image4_thumb.jpg&quot;&gt;&#39;&gt;, &lt;Selector xpath=&#39;descendant-or-self::img&#39; data=&#39;&lt;img src=&quot;image5_thumb.jpg&quot;&gt;&#39;&gt;]# 获取返回的所有图片链接&gt;&gt;&gt; response.xpath(&#39;//div[@id=&quot;images&quot;]&#39;).css(&#39;img::attr(src)&#39;)[&lt;Selector xpath=&#39;descendant-or-self::img/@src&#39; data=&#39;image1_thumb.jpg&#39;&gt;,  &lt;Selector xpath=&#39;descendant-or-self::img/@src&#39; data=&#39;image2_thumb.jpg&#39;&gt;, &lt;Selector xpath=&#39;descendant-or-self::img/@src&#39; data=&#39;image3_thumb.jpg&#39;&gt;, &lt;Selector xpath=&#39;descendant-or-self::img/@src&#39; data=&#39;image4_thumb.jpg&#39;&gt;, &lt;Selector xpath=&#39;descendant-or-self::img/@src&#39; data=&#39;image5_thumb.jpg&#39;&gt;]# 再用extract()方法获取其所有内容&gt;&gt;&gt; response.xpath(&#39;//div[@id=&quot;images&quot;]&#39;).css(&#39;img::attr(src)&#39;).extract()[&#39;image1_thumb.jpg&#39;, &#39;image2_thumb.jpg&#39;, &#39;image3_thumb.jpg&#39;, &#39;image4_thumb.jpg&#39;, &#39;image5_thumb.jpg&#39;]# 再用extract_first()方法获取其第一条内容&gt;&gt;&gt; response.xpath(&#39;//div[@id=&quot;images&quot;]&#39;).css(&#39;img::attr(src)&#39;).extract_first()&#39;image1_thumb.jpg&#39;# extract_first(default=&#39;&#39;) 当查不到对应数据时返回defanlt的内容&gt;&gt;&gt;response.xpath(&#39;//div[@id=&quot;images&quot;]&#39;).css(&#39;img::attr(aaa)&#39;).extract_first(default=&#39;&#39;)&#39;&#39;# 获取所有a标签的链接&gt;&gt;&gt; response.xpath(&#39;//a/@href&#39;)[&lt;Selector xpath=&#39;//a/@href&#39; data=&#39;image1.html&#39;&gt;, &lt;Selector xpath=&#39;//a/@href&#39; data=&#39;image2.html&#39;&gt;, &lt;Selector xpath=&#39;//a/@href&#39; data=&#39;image3.html&#39;&gt;, &lt;Selector xpath=&#39;//a/@href&#39;data=&#39;image4.html&#39;&gt;, &lt;Selector xpath=&#39;//a/@href&#39; data=&#39;image5.html&#39;&gt;]&gt;&gt;&gt; response.css(&#39;a::attr(href)&#39;).extract()[&#39;image1.html&#39;, &#39;image2.html&#39;, &#39;image3.html&#39;, &#39;image4.html&#39;, &#39;image5.html&#39;]</code></pre><p>xpath和css选择器返回的结果都差不多，所以说这个看自己的爱好，用哪一个选择器都可以，下面来说说怎么获取文本内容</p><pre><code class="shell"># xpath获取本文内容（用/text()进行获取）&gt;&gt;&gt; response.xpath(&#39;//a/text()&#39;).extract()[&#39;Name: My image 1 &#39;,&#39;Name: My image 2 &#39;, &#39;Name: My image 3 &#39;, &#39;Name: My image 4 &#39;, &#39;Name: My image 5 &#39;]# css获取文本内容（用::text进行获取)&gt;&gt;&gt; response.css(&#39;a::text&#39;).extract()[&#39;Name: My image 1 &#39;, &#39;Name: My image 2 &#39;, &#39;Name: My image 3 &#39;, &#39;Name: My image 4 &#39;, &#39;Name: My image 5 &#39;]</code></pre></li><li><p>其他的selector用法</p><pre><code class="shell"># 查找属性名称包含某值的所有标签（contains）# xpath写法  //标签名[contains(@属性名,&quot;包含值&quot;)]#   例如：查找href中包含image的所有a标签&gt;&gt;&gt; response.xpath(&#39;//a[contains(@href,&quot;image&quot;)]&#39;).extract()[&#39;&lt;a href=&quot;image1.html&quot;&gt;Name: My image 1 &lt;br&gt;&lt;img src=&quot;image1_thumb.jpg&quot;&gt;&lt;/a&gt;&#39;, &#39;&lt;a href=&quot;image2.html&quot;&gt;Name: My image 2 &lt;br&gt;&lt;img src=&quot;image2_thumb.jpg&quot;&gt;&lt;/a&gt;&#39;, &#39;&lt;a href=&quot;image3.html&quot;&gt;Name: My image 3 &lt;br&gt;&lt;img src=&quot;image3_thumb.jpg&quot;&gt;&lt;/a&gt;&#39;, &#39;&lt;a href=&quot;image4.html&quot;&gt;Name: My image 4 &lt;br&gt;&lt;img src=&quot;image4_thumb.jpg&quot;&gt;&lt;/a&gt;&#39;, &#39;&lt;a href=&quot;image5.html&quot;&gt;Name: My image 5 &lt;br&gt;&lt;img src=&quot;image5_thumb.jpg&quot;&gt;&lt;/a&gt;&#39;]&gt;&gt;&gt; response.xpath(&#39;//a[contains(@href,&quot;image&quot;)]/@href&#39;).extract()[&#39;image1.html&#39;, &#39;image2.html&#39;, &#39;image3.html&#39;, &#39;image4.html&#39;, &#39;image5.html&#39;]# css写法  标签名[href*=image]&gt;&gt;&gt; response.css(&#39;a[href*=image]&#39;).extract()[&#39;&lt;a href=&quot;image1.html&quot;&gt;Name: My image 1 &lt;br&gt;&lt;img src=&quot;image1_thumb.jpg&quot;&gt;&lt;/a&gt;&#39;, &#39;&lt;a href=&quot;image2.html&quot;&gt;Name: My image 2 &lt;br&gt;&lt;img src=&quot;image2_thumb.jpg&quot;&gt;&lt;/a&gt;&#39;, &#39;&lt;a href=&quot;image3.html&quot;&gt;Name: My image 3 &lt;br&gt;&lt;img src=&quot;image3_thumb.jpg&quot;&gt;&lt;/a&gt;&#39;, &#39;&lt;a href=&quot;image4.html&quot;&gt;Name: My image 4 &lt;br&gt;&lt;img src=&quot;image4_thumb.jpg&quot;&gt;&lt;/a&gt;&#39;, &#39;&lt;a href=&quot;image5.html&quot;&gt;Name: My image 5 &lt;br&gt;&lt;img src=&quot;image5_thumb.jpg&quot;&gt;&lt;/a&gt;&#39;]&gt;&gt;&gt; response.css(&#39;a[href*=image]::attr(href)&#39;).extract()[&#39;image1.html&#39;, &#39;image2.html&#39;, &#39;image3.html&#39;, &#39;image4.html&#39;, &#39;image5.html&#39;]# 其他&gt;&gt;&gt; response.xpath(&#39;//a[contains(@href,&quot;image&quot;)]/img/@src&#39;).extract()[&#39;image1_thumb.jpg&#39;,&#39;image2_thumb.jpg&#39;,&#39;image3_thumb.jpg&#39;,&#39;image4_thumb.jpg&#39;,&#39;image5_thumb.jpg&#39;]&gt;&gt;&gt; response.css(&#39;a[href*=image] img::attr(src)&#39;).extract()[&#39;image1_thumb.jpg&#39;,&#39;image2_thumb.jpg&#39;,&#39;image3_thumb.jpg&#39;,&#39;image4_thumb.jpg&#39;,&#39;image5_thumb.jpg&#39;]</code></pre></li><li><p>selector正则表达式匹配</p><pre><code class="shell"># .re(&quot;&quot;)  .re_first(&quot;&quot;)&gt;&gt;&gt; response.css(&#39;a::text&#39;).extract()[&#39;Name: My image 1 &#39;, &#39;Name: My image 2 &#39;, &#39;Name: My image 3 &#39;, &#39;Name: Myimage4 &#39;, &#39;Name: My image 5 &#39;]&gt;&gt;&gt; response.css(&#39;a::text&#39;).re(&#39;Name\:(.*)&#39;)[&#39; My image 1 &#39;, &#39; My image 2 &#39;, &#39; My image 3 &#39;, &#39; My image 4 &#39;, &#39; My image 5&#39;]&gt;&gt;&gt; response.css(&#39;a::text&#39;).re_first(&#39;Name\:(.*)&#39;)&#39; My image 1 &#39;&gt;&gt;&gt; response.css(&#39;a::text&#39;).re_first(&#39;Name\:(.*)&#39;).strip()&#39;My image 1&#39;</code></pre></li></ul><ul><li>需要了解的语法<ul><li><a href="https://www.w3school.com.cn/cssref/css_selectors.ASP">css选择语法</a></li><li>xpath语法<ul><li><a href="https://blog.csdn.net/manongpengzai/article/details/77109600">https://blog.csdn.net/manongpengzai/article/details/77109600</a></li><li><a href="https://blog.csdn.net/qq_27283619/article/details/88704479">https://blog.csdn.net/qq_27283619/article/details/88704479</a></li><li><a href="https://www.w3school.com.cn/xpath/xpath_syntax.asp">https://www.w3school.com.cn/xpath/xpath_syntax.asp</a></li></ul></li><li><a href="https://www.runoob.com/regexp/regexp-syntax.html">re语法</a></li></ul></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>scrapy框架的命令行解释</title>
      <link href="2021/01/64.html"/>
      <url>2021/01/64.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>Scrapy 是通过 scrapy 命令行工具进行控制的。 这里我们称之为 “Scrapy tool” 以用来和子命令进行区分。对于子命令，我们称为 “command” 或者 “Scrapy commands”。Scrapy tool 针对不同的目的提供了多个命令，每个命令支持不同的参数和选项。</p></blockquote><a id="more"></a><h1 id="创建爬虫项目"><a href="#创建爬虫项目" class="headerlink" title="创建爬虫项目"></a>创建爬虫项目</h1><ul><li><p><code>scrapy startproject 项目名</code></p><blockquote><pre><code class="shell">(venv) D:\python\爬虫学习\scrapy_spider&gt;scrapy startproject testprojectNew Scrapy project &#39;testproject&#39;, using template directory &#39;d:\python\venv\lib\site-packages\scrapy\templates\project&#39;, created in:    D:\python\爬虫学习\scrapy_spider\testprojectYou can start your first spider with:    cd testproject    scrapy genspider example example.com</code></pre></blockquote><p>这个时候爬虫的目录结构就已经创建完成了,目录结构如下：</p><blockquote><pre><code class="shell">(venv) D:\python\爬虫学习\scrapy_spider\testproject&gt;tree /f卷 DATADRIVE1 的文件夹 PATH 列表卷序列号为 4A47-5EA3D:.│  scrapy.cfg│└─testproject    │  items.py    │  middlewares.py    │  pipelines.py    │  settings.py    │  __init__.py    │    └─spiders            __init__.py</code></pre></blockquote></li></ul><p>接着我们按照提示可以生成一个spider,这里以百度作为例子,生成spider的命令格式为;</p><ul><li><p><code>scrapy genspider 爬虫名字 爬虫的网址</code></p><blockquote><pre><code class="shell">(venv) D:\python\爬虫学习\scrapy_spider\testproject&gt;scrapy genspider baidu.com www.baidu.comCreated spider &#39;baidu.com&#39; using template &#39;basic&#39; in module:  testproject.spiders.baidu_com</code></pre></blockquote></li><li><p><code>scrapy crawl 爬虫名字</code>      开始运行爬虫</p></li></ul><h1 id="关于命令详细使用"><a href="#关于命令详细使用" class="headerlink" title="关于命令详细使用"></a>关于命令详细使用</h1><p>这里的命令分为全局的命令和项目的命令，全局的命令表示可以在任何地方使用，而项目的命令只能在项目目录下使用</p><ul><li><p>全局命令</p><ul><li><p>startproject</p><pre><code class="shell"># 创建项目scrapy startprojects 项目名</code></pre></li><li><p>genspider</p><pre><code class="shell"># 列出所有的模版scrapy genspider -l# 运行结果(venv) D:\python\爬虫学习\scrapy_spider\testproject&gt;scrapy genspider -lAvailable templates:  basic  crawl  csvfeed  xmlfeed# 当我们创建的时候可以指定模板，不指定默认用的basic,如果想要指定模板则通过scrapy genspider -t 模板名# 生成一个项目crawl模版scrapy genspider -t crawl zhihu wwww.zhihu.com</code></pre></li><li><p>settings</p><pre><code class="shell"># 获取帮助信息scrapy settings -h # 获取settings.py中的配置scrapy settings --get 配置名# 例子获取settings.py中的MONGO_URL(venv) D:\python\爬虫学习\scrapy_spider\quotetutorial&gt;scrapy settings --get MONGO_URLlocalhost</code></pre></li><li><p>runspider</p><pre><code class="shell"># 运行爬虫scrapy runspider 爬虫名</code></pre></li><li><p>shell</p><pre><code class="shell"># 进入交互模式scrapy shell 爬虫网址# 例子(venv) D:\python\爬虫学习\scrapy_spider\testproject&gt;scrapy shell http://baidu.com&gt; (referer: None)[s] Available Scrapy objects:[s]   scrapy     scrapy module (contains scrapy.Request, scrapy.Selector, etc)[s]   crawler    &lt;scrapy.crawler.Crawler object at 0x000001D3C1D5E1F0&gt;[s]   item       &#123;&#125;[s]   request    &lt;GET http://baidu.com&gt;[s]   response   &lt;200 http://www.baidu.com/&gt;[s]   settings   &lt;scrapy.settings.Settings object at 0x000001D3C1D5E100&gt;[s]   spider     &lt;DefaultSpider &#39;default&#39; at 0x1d3c2218e80&gt;[s] Useful shortcuts:[s]   fetch(url[, redirect=True]) Fetch URL and update local objects (by default, redirects are followed)[s]   fetch(req)                  Fetch a scrapy.Request and update local objects[s]   shelp()           Shell help (print this help)[s]   view(response)    View response in a browser&gt;&gt;&gt; scrapy&lt;module &#39;scrapy&#39; from &#39;d:\\python\\venv\\lib\\site-packages\\scrapy\\__init__.py&#39;&gt;&gt;&gt;&gt; exit()</code></pre></li><li><p>fetch</p><blockquote><p>使用 Scrapy 下载器(downloader)下载给定的 URL，并将获取到的内容送到标准输出。<br>该命令以 spider 下载页面的方式获取页面。例如，如果 spider 有 USER_AGENT 属性修改了 User Agent，该命令将会使用该属性。<br>因此，您可以使用该命令来查看 spider 如何获取某个特定页面。<br>该命令如果非项目中运行则会使用默认 Scrapy downloader 设定。</p></blockquote><pre><code class="shell"># 输出日志及网页源代码scrapy fetch 爬虫网址# 不显示运行日志scrapy fetch --nolog 爬虫网址# 打印响应头信息scrapy fetch --headers 爬虫网址# 不做跳转scrapy fetch --no-redirect 爬虫网址</code></pre></li><li><p>view</p><blockquote><p>在浏览器中打开给定的 URL，并以 Scrapy spider 获取到的形式展现。 有些时候 spider 获取到的页面和普通用户看到的并不相同。 因此该命令可以用来检查 spider 所获取到的页面，并确认这是您所期望的。</p></blockquote><pre><code class="shell"># view 从浏览器中打开网页scrapy view http://www.taobao.com</code></pre><p>因为现在很多网站的数据都是通过ajax请求来加载的，这个时候直接通过requests请求是无法获取我们想要的数据，所以这个view命令可以帮助我们很好的判断</p></li><li><p>version</p><pre><code># 查看版本信息，并查看依赖库的信息scrapy versionscrapy version -v# 运行结果(venv) D:\python\爬虫学习\scrapy_spider\quotetutorial\quotetutorial&gt;scrapy versionScrapy 2.4.1(venv) D:\python\爬虫学习\scrapy_spider\quotetutorial\quotetutorial&gt;scrapy version -vScrapy       : 2.4.1lxml         : 4.5.0.0libxml2      : 2.9.5cssselect    : 1.1.0parsel       : 1.6.0w3lib        : 1.22.0Twisted      : 20.3.0Python       : 3.8.6 (tags/v3.8.6:db45529, Sep 23 2020, 15:52:53) [MSC v.1927 64 bit (AMD64)]pyOpenSSL    : 20.0.1 (OpenSSL 1.1.1i  8 Dec 2020)cryptography : 3.3.1Platform     : Windows-10-10.0.17763-SP0</code></pre></li></ul></li><li><p>项目命令</p><ul><li><p>crawl</p><blockquote><p>这个是用去启动spider爬虫格式为：<br><code>scrapy crawl 爬虫名字</code><br>这里需要注意这里的爬虫名字和通过scrapy genspider 生成爬虫的名字是一致的</p></blockquote></li><li><p>check</p><blockquote><p>用于检查代码是否有错误</p><p><code>scrapy check</code></p><pre><code class="shell">(venv) D:\python\爬虫学习\scrapy_spider\testproject&gt;scrapy check----------------------------------------------------------------------Ran 0 contracts in 0.001sOK</code></pre></blockquote></li><li><p>list</p><blockquote><p>列出所有可用的爬虫</p><p><code>scrapy list</code></p><pre><code class="shell">(venv) D:\python\爬虫学习\scrapy_spider\testproject&gt;scrapy listbaidu.comzhihu</code></pre></blockquote></li><li><p>edit</p><blockquote><p>edit 在命令行下编辑spider ### 不建议运行<br><code>scrapy edit 爬虫名</code></p></blockquote></li><li><p>parse</p><blockquote><p>获取给定的 URL 并使用相应的 spider 分析处理。如果您提供<code>--callback</code> 选项，则使用 spider 的该方法处理，否则使用 <code>parse</code>。</p><p><code>scrapy parse 爬虫网址 [options]</code></p><p>支持的选项：</p><ul><li><code>--spider=SPIDER</code>：跳过自动检测 spider 并强制使用特定的 spider</li><li><code>--a NAME=VALUE</code>：设置 spider 的参数(可能被重复)</li><li><code>--callback or -c</code>：spider 中用于解析返回(response)的回调函数</li><li><code>--pipelines</code>：在 pipeline 中处理 item</li><li><code>--rules or -r</code>：使用 CrawlSpider 规则来发现用来解析返回(response)的回调函数</li><li><code>--noitems</code>：不显示爬取到的 item</li><li><code>--nolinks</code>：不显示提取到的链接</li><li><code>--nocolour</code>：避免使用 pygments 对输出着色</li><li><code>--depth or -d</code>：指定跟进链接请求的层次数(默认：1)</li><li><code>--verbose or -v</code>：显示每个请求的详细信息</li></ul></blockquote></li><li><p>bench</p><blockquote><p>运行 benchmark 测试。Benchmarking。</p><p><code>scrapy bench</code></p></blockquote></li></ul></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows环境下安装Scrapy的正确方式</title>
      <link href="2021/01/63.html"/>
      <url>2021/01/63.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>Scrapy是一个为了爬取网站数据提取结构性数据而编写的应用框架，可以应用于数据挖掘，信息处理或存储历史数据等一些列的程序中。<br>Scrapy最初就是为了网络爬取而设计的。现在，Scrapy已经推出了曾承诺过的Python3.x版本。<br>为什么学习Scrapy呢？它能我们更好的完成爬虫任务，自己写Python爬虫程序好比孤军奋战，而使用了Scrapy就好比手底下有了千军万马。<br>Scrapy可以起到事半功倍的效果。所以，学习Scrapy也就显得很有必要了。</p></blockquote><a id="more"></a><p>友情提醒：一定要按照Python的版本下载，要不然安装的时候会提醒找不到Python。建议大家安装32位是因为有些版本的必备软件64位不好找。</p><ul><li><p>安装Python（建议32位）</p><blockquote><p>安装完了记得配置环境，将python目录和python目录下的Scripts目录添加到系统环境变量的Path里。</p></blockquote></li><li><p>lxml（这个最重要），使用pip命令安装</p><blockquote><p><code>pip3 install lxml</code><br>若没有报错，则安装成功，如果报错提示缺少libxml2 库，可以使用wheel文件进行安装 libxml2</p></blockquote></li><li><p>pyOpenSSL</p><blockquote><p>需要在官网下载wheel文件 <a href="https://pypi.org/project/pyOpenSSL/#files">pyOpenssL</a><br>下载后使用<code>pip3 install 文件路径/下载文件名.whl</code>（例：‪pip3 install D:\QQDownload\pyOpenSSL-17.2.0-py2.py3-none-any.whl）<br>也可以尝试用<code>pip3 install pyopenssl</code>进行安装</p></blockquote></li><li><p>Twisted</p><blockquote><p>同理，需要在官网下载wheel文件 <a href="https://www.lfd.uci.edu/~gohlke/pythonlibs/#twisted">Twisted</a><br>不过一定要记得在控制台下输入<code>python</code>查看你的电脑版本和python版本，然后在上面的地址中下载对应的wheel文件<br>下载完后使用<code>pip3 install 文件路径/下载文件名.whl</code><br>也可以尝试<code>pip3 install twisted</code></p></blockquote></li><li><p>PyWin32</p><blockquote><p>在官网下载对应版本的安装包双击安装即可 <a href="https://sourceforge.net/projects/pywin32/files/">pywin32</a><br>或者<code>pip3 install pywin32</code></p></blockquote></li><li><p>Scrapy</p><blockquote><p>在依赖包全部安装成功前提下安装Scrapy框架，使用pip命令<br><code>pip3 install scrapy</code></p></blockquote></li></ul><hr><p><strong>如果提示缺少C++库，可以使用<a href="https://gocos.lanzoui.com/iM8Mel0yiad">Microsoft Visual C++ Build Tools.exe</a>来解决。</strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PySpider安装遇到的坑及解决办法</title>
      <link href="2021/01/62.html"/>
      <url>2021/01/62.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>这段时间在学爬虫，安装pyspider框架，遇到了很多坑，像关键字问题等等，本机已经安装好pycharm(python3.9)，现做测试，需要在开发机上安装pyspider，基于windows下的安装遇到一些坑，记录一下。</p></blockquote><h1 id="安装命令"><a href="#安装命令" class="headerlink" title="安装命令"></a>安装命令</h1><ul><li><p><code>pip3 install pyspider</code></p></li><li><p>这个过程应该能没什么问题，pyspider是对pip有版本要求的，所以最好自动升级一下</p><h1 id="填坑"><a href="#填坑" class="headerlink" title="填坑"></a>填坑</h1></li></ul><p>ok ,安装完成我们开始填坑。</p><ul><li>执行 pyspider all，立马报错：<br>        <span class="lazyload-img-span">        <img              data-src="https://p.pstatp.com/origin/138640001b5887ab45483" >        </sapn>      </li></ul><p><strong>报错信息：</strong></p><pre><code>  File &quot;d:\python\venv\lib\site-packages\pyspider\run.py&quot;, line 231    async=True, get_object=False, no_input=False):    ^SyntaxError: invalid syntax</code></pre><p>这是因为python3.5开始把<code>async</code>和<code>await</code>设为关键字了，这里作为参数名与关键字冲突了，因此找到对应的py文件，将<code>async</code>修改为其他名称，我修改为<code>pyspiderasync</code>。在以下几个文件中存在：<code>pyspider-&gt;run.py</code>、<code>pyspider-&gt;fetcher-&gt;tornado_fetcher.py</code>、<code>webui&gt;app.py</code>。</p><ul><li>再次执行 pyspider all, 报错：<br>        <span class="lazyload-img-span">        <img              data-src="https://p.pstatp.com/origin/1384900026e094d9a65ea" >        </sapn>      </li></ul><p><strong>报错信息：</strong></p><pre><code>ValueError: Invalid configuration:  - Deprecated option &#39;domaincontroller&#39;: use &#39;http_authenticator.domain_controller&#39; instead.</code></pre><p>这个是因为wsgidav版本太高了，重新安装一下：<br><code>pip install wsgidav==2.4.1</code></p><ul><li>在运行，还报错：<br>        <span class="lazyload-img-span">        <img              data-src="https://p.pstatp.com/origin/fef200036a88bb09b5da" >        </sapn>      </li></ul><p><strong>报错信息：</strong></p><pre><code>ImportError: cannot import name &#39;DispatcherMiddleware&#39; from &#39;werkzeug.wsgi&#39; (d:\python\venv\lib\site-packages\werkzeug\wsgi.py)</code></pre><p>这是因为werkzeug版本高了，DispatcherMiddleware这个类已经不存在了，因此重新安装小版本：</p><p><code>pip install werkzeug=0.16</code><br>为什么是0.16版本？我是再卸载后，暂不安装，直接执行pyspider时，错误提示信息中显示了最低版本为0.16：）</p><ul><li>再次运行 pyspider all 填坑完毕，纪念一下<br>        <span class="lazyload-img-span">        <img              data-src="https://p.pstatp.com/origin/13858000236106042f24a" >        </sapn>      </li></ul><h1 id="其他错误"><a href="#其他错误" class="headerlink" title="其他错误"></a>其他错误</h1><pre><code> D:\python&gt;pyspider alld:\python\venv\lib\site-packages\pyspider\libs\utils.py:196: FutureWarning: timeout is not supported on your platform.  warnings.warn(&quot;timeout is not supported on your platform.&quot;, FutureWarning)</code></pre><p>忽视即可。</p>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用代理池处理反爬抓取微信文章</title>
      <link href="2021/01/61.html"/>
      <url>2021/01/61.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>搜狗（<a href="http://weixin.sogou.com/%EF%BC%89%E5%B7%B2%E7%BB%8F%E4%B8%BA%E6%88%91%E4%BB%AC%E5%81%9A%E4%BA%86%E4%B8%80%E5%B1%82%E5%BE%AE%E4%BF%A1%E6%96%87%E7%AB%A0%E7%9A%84%E7%88%AC%E5%8F%96%EF%BC%8C%E9%80%9A%E8%BF%87%E5%AE%83%E6%88%91%E4%BB%AC%E5%8F%AF%E4%BB%A5%E8%8E%B7%E5%8F%96%E4%B8%80%E4%BA%9B%E5%BE%AE%E4%BF%A1%E6%96%87%E7%AB%A0%E7%9A%84%E5%88%97%E8%A1%A8%E4%BB%A5%E5%8F%8A%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E7%9A%84%E4%B8%80%E4%BA%9B%E4%BF%A1%E6%81%AF%EF%BC%8C">http://weixin.sogou.com/）已经为我们做了一层微信文章的爬取，通过它我们可以获取一些微信文章的列表以及微信公众号的一些信息，</a><br>但是它有很多反爬虫的措施，可以检测到你的IP异常，然后把你封掉。<br>本文采用代理的方法处理反爬来抓取微信文章。</p></blockquote><a id="more"></a><h1 id="用到的"><a href="#用到的" class="headerlink" title="用到的"></a>用到的</h1><ul><li>urllib</li><li>lxml</li><li>pyquery</li><li>requests</li><li>re</li><li>pymongo</li><li>sys</li></ul><h1 id="代理池"><a href="#代理池" class="headerlink" title="代理池"></a>代理池</h1><ul><li><a href="https://github.com/Python3WebSpider/ProxyPool">https://github.com/Python3WebSpider/ProxyPool</a></li></ul><h1 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h1><p>        <span class="lazyload-img-span">        <img              data-src="https://p.pstatp.com/origin/137fe00030644a02199da" >        </sapn>      </p><h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><pre><code># -*- coding: utf-8 -*-&quot;&quot;&quot;@Time ： 2021/1/27 12:29@Auth ： Ne-21@File ：weixin_spider.py@IDE ：PyCharm@Motto：Another me.&quot;&quot;&quot;from urllib.parse import urlencodefrom lxml.etree import XMLSyntaxErrorfrom pyquery import PyQuery as pqimport requestsimport reimport pymongoimport syssys.setrecursionlimit(3000)  # 将默认的递归深度修改为3000base_url = &#39;https://weixin.sogou.com/weixin?&#39;headers = &#123;    &#39;Referer&#39;: &#39;https://weixin.sogou.com/weixin?query=%E9%A3%8E%E6%99%AF&amp;type=2&amp;page=1&amp;ie=utf8&#39;,    &#39;Sec-Fetch-Dest&#39;: &#39;document&#39;,    &#39;Sec-Fetch-Mode&#39;: &#39;navigate&#39;,    &#39;Sec-Fetch-Site&#39;: &#39;same-origin&#39;,    &#39;Sec-Fetch-User&#39;: &#39;?1&#39;,    &#39;Upgrade-Insecure-Requests&#39;: &#39;1&#39;,    &#39;User-Agent&#39;: &#39;Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.88 &#39;                  &#39;Safari/537.36&#39;,    &#39;Host&#39;: &#39;weixin.sogou.com&#39;,    &#39;Cookie&#39;: &#39;&#39;    &#125;keyword = &#39;云计算&#39;# 获取、设置全局代理proxy_pool_url = &#39;http://127.0.0.1:5555/random&#39;proxy = None# 最大请求次数max_count = 5# MongoDBMONGO_URL = &#39;localhost&#39;MONGO_DB = &#39;weixin&#39;MONGO_TABLE = &#39;articles&#39;client = pymongo.MongoClient(MONGO_URL)db = client[MONGO_DB]# 获取代理信息def get_proxy():    try:        response = requests.get(proxy_pool_url)        if response.status_code == 200:            return response.text        return None    except ConnectionError:        return None# 搜索def get_index(keyword, page):    data = &#123;        &#39;query&#39;: keyword,        &#39;page&#39;: page,        &#39;type&#39;: &#39;2&#39;    &#125;    queries = urlencode(data)    url = base_url + queries    html = get_html(url)    return html# 获取搜索页面信息def get_html(url, count=1):    print(&#39;请求目标网址&#39;, url)    print(&#39;当前请求次数&#39;, count)    global proxy    # 判断请求次数    if count == max_count:        print(&#39;请求次数过多&#39;)        return None    try:        # 是否有代理        if proxy:            proxies = &#123;                &#39;http&#39;: &#39;http://&#39; + proxy            &#125;            response = requests.get(url, headers=headers, allow_redirects=False, proxies=proxies)        else:            # allow_redirects=False 不处理自动跳转            response = requests.get(url, headers=headers, allow_redirects=False)        if response.status_code == 200:            return response.text        if response.status_code == 302:            # need proxy            print(&#39;302&#39;)            proxy = get_proxy()            if proxy:                print(&#39;Using Proxy&#39;, proxy)                # count += 1                return get_html(url)            else:                print(&#39;Get Proxy Failed&#39;)                return None    except ConnectionError as e:        print(&#39;Error&#39;, e.args)        proxy = get_proxy()        count += 1        return get_html(url, count)# 解析搜索页面def parse_index(html):    doc = pq(html)    items = doc(&#39;.news-box .news-list li .txt-box h3 a&#39;).items()    for item in items:        yield str(&#39;https://weixin.sogou.com&#39;) + item.attr(&#39;href&#39;)# 获取真实的文章地址def get_detail_true_url(url):    global proxy    try:        if proxy:            proxies = &#123;                &#39;http&#39;: &#39;http://&#39; + str(proxy)            &#125;            response = requests.get(url, headers=headers, allow_redirects=False, proxies=proxies)        else:            # allow_redirects=False 不处理自动跳转            response = requests.get(url, headers=headers, allow_redirects=False)        if response.status_code == 200:            response = response.text            url_param = re.compile(&quot;url \+= &#39;(.*?)&#39;;&quot;, re.S).findall(response)            true_url = &#39;&#39;            for i in url_param:                true_url += i            true_url.replace(&#39;@&#39;, &#39;&#39;)            return true_url    except:        return get_detail_true_url(url)# 获取文章详情def get_detail(true_url):    try:        response = requests.get(true_url)        if response.status_code == 200:            response = response.text            return response        return None    except ConnectionError:        return None# 解析文章def parse_detail(html):    try:        doc = pq(html)        title = doc(&#39;.rich_media_title&#39;).text()        content = doc(&#39;.rich_media_content&#39;).text()        date = doc(&#39;#publish_time&#39;).text()        nickname = doc(&#39;#js_name&#39;).text()        wechat = doc(&#39;#js_profile_qrcode &gt; div &gt; p:nth-child(3) &gt; span&#39;).text()        return &#123;            &#39;title&#39;: title,            &#39;content&#39;: content,            &#39;date&#39;: date,            &#39;nickname&#39;: nickname,            &#39;wechat&#39;: wechat        &#125;    except XMLSyntaxError:        return Nonedef save_to_mongo(data):    # 如果有一样的，更新，没有，插入    if db[MONGO_TABLE].update(&#123;&#39;title&#39;: data[&#39;title&#39;]&#125;, &#123;&#39;$set&#39;: data&#125;, True):        print(&#39;存储到数据库成功&#39;, data[&#39;title&#39;])    else:        print(&#39;存储失败&#39;, data[&#39;title&#39;])def main():    for page in range(1, 100):        html = get_index(keyword, page)        if html:            article_urls = parse_index(html)            for article_url in article_urls:                article_html = get_detail_true_url(article_url)                article_true_html = get_detail(article_html)                if article_true_html:                    article_data = parse_detail(article_true_html)                    print(article_data)                    if article_data:                        save_to_mongo(article_data)if __name__ == &#39;__main__&#39;:    main()</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Selenium模拟浏览器抓取淘宝商品美食信息（含模拟登陆）</title>
      <link href="2021/01/60.html"/>
      <url>2021/01/60.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>淘宝页面比较复杂，含有各种请求参数和加密参数，如果直接请求或者分析Ajax将会非常繁琐。<br>Selenium是一个自动化测试工具，可以驱动浏览器去完成各种工作，比如模拟点击、输入和下拉等多种功能，这样我们只需关心操作，<br>不需要关心后台发生了怎么样的请求下面对具体操作步骤进行详述。</p></blockquote><a id="more"></a><h1 id="所用到的"><a href="#所用到的" class="headerlink" title="所用到的"></a>所用到的</h1><ul><li>selenium</li><li>pyqurey</li><li>re</li><li>pymongo</li></ul><h1 id="数据库截图"><a href="#数据库截图" class="headerlink" title="数据库截图"></a>数据库截图</h1><p>        <span class="lazyload-img-span">        <img              data-src="https://p.pstatp.com/origin/138b50000ce987945cfe4" >        </sapn>      </p><h1 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h1><pre><code># -*- coding: utf-8 -*-&quot;&quot;&quot;@Time ： 2021/1/25 17:02@Auth ： Ne-21@File ：taobaospider.py@IDE ：PyCharm@Motto：Another me.&quot;&quot;&quot;import refrom selenium.common.exceptions import TimeoutExceptionfrom selenium import webdriverfrom selenium.webdriver.common.by import Byfrom selenium.webdriver.support.ui import WebDriverWaitfrom selenium.webdriver.support import expected_conditions as ECfrom selenium.webdriver import ActionChainsimport timefrom pyquery import PyQuery as pqimport pymongo# Mongo数据库MONGO_URL = &#39;localhost&#39;MONGO_DB = &#39;taobao&#39;MONGO_TABLE = &#39;product&#39;client = pymongo.MongoClient(MONGO_URL)db = client[MONGO_DB]options = webdriver.ChromeOptions()# options.add_argument(&#39;--blink-settings=imagesEnabled=false&#39;) # 不加载图片, 提升速度# options.add_argument(&#39;--headless&#39;) # 浏览器不提供可视化页面browser = webdriver.Chrome(options=options)# 防止被监测browser.execute_cdp_cmd(&quot;Page.addScriptToEvaluateOnNewDocument&quot;, &#123;    &quot;source&quot;: &#39;&#39;&#39;            Object.defineProperty(navigator, &#39;webdriver&#39;, &#123;              get: () =&gt; undefined            &#125;)          &#39;&#39;&#39;&#125;)wait = WebDriverWait(browser, 5)def do_slider():    &quot;&quot;&quot;    处理滑动验证码，没有测试    :return:    &quot;&quot;&quot;    slider_go = wait.until(        EC.presence_of_element_located((By.CSS_SELECTOR, &#39;#nc_1_n1z&#39;))    )    # 实例化一个动作链关联游览器    action = ActionChains(browser)    action.reset_actions()    # 使用鼠标动作链进行点击并悬浮    action.click_and_hold(slider_go)    # 滑动验证码    action.move_by_offset(xoffset=258, yoffset=0).perform()    time.sleep(5)def login(username, password):    print(&#39;正在登陆......&#39;)    browser.get(&#39;https://login.taobao.com/member/login.jhtml&#39;)    input_username = wait.until(        EC.presence_of_element_located((By.CSS_SELECTOR, &#39;#fm-login-id&#39;))    )    input_password = wait.until(        EC.presence_of_element_located((By.CSS_SELECTOR, &#39;#fm-login-password&#39;))    )    submit = wait.until(        EC.element_to_be_clickable((By.CSS_SELECTOR, &#39;#login-form &gt; div.fm-btn &gt; button&#39;))    )    input_username.send_keys(username)    time.sleep(2)    input_password.send_keys(password)    time.sleep(2)    submit.click()    time.sleep(3)  # 等待检验滑块    # 判断有无滑块验证    try:        slider = wait.until(            EC.presence_of_element_located((By.CSS_SELECTOR, &#39;#nc_1__scale_text &gt; span&#39;))        )        if bool(slider):            print(&#39;发现滑块验证码&#39;)            do_slider()            submit.click()        else:            print(&#39;未发现滑块&#39;)            pass    except:        print(&#39;未发现滑块&#39;)    time.sleep(5)  # 等待短信验证    # 判断有无短信验证    try:        # 定位iframe标签，由于iframe没有id，name这种唯一的属性，因此只能通过先定位，在切换实现        frame = wait.until(            EC.presence_of_element_located((By.XPATH, &#39;//*[@id=&quot;content&quot;]/div/div[1]/iframe&#39;))        )        # 由于手机验证页面出现了页面的嵌套，因此需要进行页面跳转到iframe下        browser.switch_to.frame(frame)        sms_button = wait.until(            EC.presence_of_element_located((By.XPATH, &#39;//*[@id=&quot;J_GetCode&quot;]&#39;))        )        if bool(sms_button):            print(&#39;发现短信验证码&#39;)            time.sleep(1)            sms_button.click()            print(&#39;验证码已发送，请输入验证码（20s）&#39;)            time.sleep(20)            sms_submit = wait.until(                EC.element_to_be_clickable((By.CSS_SELECTOR, &#39;#submitBtn&#39;))            )            sms_submit.click()        else:            print(&#39;无短信验证&#39;)            pass    except:        print(&#39;无短信验证...&#39;)        pass    finally:        print(&#39;登陆成功&#39;)def search():    print(&#39;正在搜索.....&#39;)    try:        browser.get(&#39;https://www.taobao.com&#39;)        # 等待目标元素加载完成        # input = WebDriverWait(browser, 10).until(        #     EC.presence_of_all_elements_located(By.CSS_SELECTOR, &#39;#q&#39;)        # )        # submit = WebDriverWait(browser, 10).until(        #     EC.element_to_be_clickable(By.CSS_SELECTOR, &#39;#J_TSearchForm &gt; div.search-button &gt; button&#39;)        # )        # 改写WebDriverWait        input = wait.until(            EC.presence_of_element_located((By.CSS_SELECTOR, &#39;#q&#39;))        )        submit = wait.until(            EC.element_to_be_clickable((By.CSS_SELECTOR, &#39;#J_TSearchForm &gt; div.search-button &gt; button&#39;))        )        # 输入内容        input.send_keys(&#39;美食&#39;)        submit.click()        # 获取总页数        total = wait.until(            EC.presence_of_element_located((By.CSS_SELECTOR, &#39;#mainsrp-pager &gt; div &gt; div &gt; div &gt; div.total&#39;)))        # 第一页解析网页        get_products()        return total.text    except TimeoutException:        return search()# 翻页操作def next_page(page_number):    print(&#39;正在翻页......&#39;)    try:        # 到第几页        input = wait.until(            EC.presence_of_element_located((By.CSS_SELECTOR, &#39;#mainsrp-pager &gt; div &gt; div &gt; div &gt; div.form &gt; input&#39;))        )        # 确定按钮        submit = wait.until(            EC.element_to_be_clickable(                (By.CSS_SELECTOR, &#39;#mainsrp-pager &gt; div &gt; div &gt; div &gt; div.form &gt; span.btn.J_Submit&#39;))        )        input.clear()        input.send_keys(page_number)        submit.click()        # 判断是否已翻到指定页面(*)        wait.until(EC.text_to_be_present_in_element(            (By.CSS_SELECTOR, &#39;#mainsrp-pager &gt; div &gt; div &gt; div &gt; ul &gt; li.item.active &gt; span&#39;), str(page_number)))        # 翻页后解析网页        get_products()    except TimeoutException:        return next_page(page_number)# 解析网页def get_products():    # 商品信息是否存在    wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, &#39;#mainsrp-itemlist .items .item&#39;)))    # 拿到网页源代码    html = browser.page_source    # pyquery解析    doc = pq(html)    items = doc(&#39;#mainsrp-itemlist .items .item&#39;).items()    for item in items:        product = &#123;            &#39;image&#39;: item.find(&#39;.pic .img&#39;).attr(&#39;src&#39;),            &#39;price&#39;: item.find(&#39;.price&#39;).text(),            &#39;deal&#39;: item.find(&#39;.deal-cnt&#39;).text()[:-3],            &#39;title&#39;: item.find(&#39;.title&#39;).text(),            &#39;shop&#39;: item.find(&#39;.shop&#39;).text(),            &#39;location&#39;: item.find(&#39;.location&#39;).text()        &#125;        print(product)        save_to_mongo(product)def save_to_mongo(result):    print(&#39;正在加入数据库......&#39;)    try:        if db[MONGO_TABLE].insert(result):            print(&#39;存储到MONGODB成功&#39;, result)    except Exception:        print(&#39;存储异常&#39;, result)def main():    print(&#39;开始运行.......&#39;)    login(&#39;&#39;, &#39;&#39;)    total = search()    total = int(re.compile(&#39;(\d+)&#39;).search(total).group(1))    for i in range(2, total + 1):        next_page(i)    browser.close()if __name__ == &#39;__main__&#39;:    main()</code></pre><h1 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h1><pre><code>chrome_options.add_argument(&#39;--user-agent=&quot;&quot;&#39;)  # 设置请求头的User-Agentchrome_options.add_argument(&#39;--window-size=1280x1024&#39;)  # 设置浏览器分辨率（窗口大小）chrome_options.add_argument(&#39;--start-maximized&#39;)  # 最大化运行（全屏窗口）,不设置，取元素会报错chrome_options.add_argument(&#39;--disable-infobars&#39;)  # 禁用浏览器正在被自动化程序控制的提示chrome_options.add_argument(&#39;--incognito&#39;)  # 隐身模式（无痕模式）chrome_options.add_argument(&#39;--hide-scrollbars&#39;)  # 隐藏滚动条, 应对一些特殊页面chrome_options.add_argument(&#39;--disable-javascript&#39;)  # 禁用javascriptchrome_options.add_argument(&#39;--blink-settings=imagesEnabled=false&#39;)  # 不加载图片, 提升速度chrome_options.add_argument(&#39;--headless&#39;)  # 浏览器不提供可视化页面chrome_options.add_argument(&#39;--ignore-certificate-errors&#39;)  # 禁用扩展插件并实现窗口最大化chrome_options.add_argument(&#39;--disable-gpu&#39;)  # 禁用GPU加速chrome_options.add_argument(&#39;–disable-software-rasterizer&#39;)chrome_options.add_argument(&#39;--disable-extensions&#39;)chrome_options.add_argument(&#39;--start-maximized&#39;)</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Selenium模拟淘宝登陆的一次尝试</title>
      <link href="2021/01/59.html"/>
      <url>2021/01/59.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>最近在研究python爬虫，因为教程是前几年的，所以随着网站的迭代，实战部分出现了很多新的问题。出现问题解决问题go~</p></blockquote><a id="more"></a><p>今天先说说selenium被识别如何解决？</p><h1 id="解决Selenium被识别"><a href="#解决Selenium被识别" class="headerlink" title="解决Selenium被识别"></a>解决Selenium被识别</h1><ul><li>Selenium被监测出来一般是在JS代码里判断，加上execute_cdp_cmd后面的这句话就好了<pre><code>from selenium import webdriver</code></pre></li></ul><h1 id="实例化driver"><a href="#实例化driver" class="headerlink" title="实例化driver"></a>实例化driver</h1><p>driver = webdriver.Chrome()</p><h1 id="防止被监测"><a href="#防止被监测" class="headerlink" title="防止被监测"></a>防止被监测</h1><p>driver.execute_cdp_cmd(“Page.addScriptToEvaluateOnNewDocument”, {<br>  “source”: “””<br>    Object.defineProperty(navigator, ‘webdriver’, {<br>      get: () =&gt; undefined<br>    })<br>  “””<br>})</p><pre><code># Selenium的options配置</code></pre><p>from selenium import webdriver<br>chrome_options = webdriver.ChromeOptions()<br>chrome_options.add_argument(‘–no-sandbox’)  # 解决DevToolsActivePort文件不存在的报错<br>chrome_options.add_argument(‘window-size=1920x1080’)  # 指定浏览器分辨率<br>chrome_options.add_argument(‘–disable-gpu’)  # 谷歌文档提到需要加上这个属性来规避bug<br>chrome_options.add_argument(‘–hide-scrollbars’)  # 隐藏滚动条, 应对一些特殊页面<br>chrome_options.add_argument(‘blink-settings=imagesEnabled=false’)  # 不加载图片, 提升速度<br>chrome_options.add_argument(‘–headless’)  # 浏览器不提供可视化页面. linux下如果系统不支持可视化不加这条会启动失败</p><pre><code># 爬虫上线的Selenium配置</code></pre><p>from selenium import webdriver</p><p>chrome_options = webdriver.ChromeOptions()<br>chrome_options.add_argument(‘–no-sandbox’)<br>chrome_options.add_argument(‘–disable-gpu’)<br>chrome_options.add_argument(‘blink-settings=imagesEnabled=false’)<br>chrome_options.add_argument(‘–headless’) </p><p>driver = webdriver.Chrome(<br>    executable_path=’C:\Program Files (x86)\Google\Chrome\Application\chromedriver.exe’, # 不是Window不需要加<br>    options = chrome_options,<br>)</p><p>driver.execute_cdp_cmd(“Page.addScriptToEvaluateOnNewDocument”, {<br>  “source”: “””<br>    Object.defineProperty(navigator, ‘webdriver’, {<br>      get: () =&gt; undefined<br>    })<br>  “””<br>})</p><pre><code>- 上述内容来自https://blog.csdn.net/kzl_knight/article/details/106613495---# 模拟登陆实现- 知道了上面的内容（其实不是很懂，复制粘贴就完了），实现模拟登陆就比较容易了</code></pre><h1 id="coding-utf-8"><a href="#coding-utf-8" class="headerlink" title="-- coding: utf-8 --"></a>-<em>- coding: utf-8 -</em>-</h1><p>“””<br>@Time ： 2021/1/25 19:28<br>@Auth ： Ne-21<br>@File ：taobao_login.py<br>@IDE ：PyCharm<br>@Motto：Another me.</p><p>“””<br>from selenium import webdriver<br>from selenium.webdriver.common.by import By<br>from selenium.webdriver.support.ui import WebDriverWait<br>from selenium.webdriver.support import expected_conditions as EC<br>from selenium.webdriver import ActionChains<br>import time</p><p>options = webdriver.ChromeOptions()<br>browser = webdriver.Chrome(options=options)</p><h1 id="防止被监测-1"><a href="#防止被监测-1" class="headerlink" title="防止被监测"></a>防止被监测</h1><p>browser.execute_cdp_cmd(“Page.addScriptToEvaluateOnNewDocument”, {<br>    “source”: ‘’’<br>            Object.defineProperty(navigator, ‘webdriver’, {<br>              get: () =&gt; undefined<br>            })<br>          ‘’’<br>})<br>wait = WebDriverWait(browser, 5)</p><p>def do_slider():<br>    “””<br>    处理滑动验证码，没有测试<br>    :return:<br>    “””<br>    slider_go = wait.until(<br>        EC.presence_of_element_located((By.CSS_SELECTOR, ‘#nc_1_n1z’))<br>    )<br>    # 实例化一个动作链关联游览器<br>    action = ActionChains(browser)<br>    action.reset_actions()<br>    # 使用鼠标动作链进行点击并悬浮<br>    action.click_and_hold(slider_go)<br>    # 滑动验证码<br>    action.move_by_offset(xoffset=258, yoffset=0).perform()<br>    time.sleep(1)</p><p>def login(username, password):<br>    browser.get(‘<a href="https://login.taobao.com/member/login.jhtml&#39;">https://login.taobao.com/member/login.jhtml&#39;</a>)<br>    input_username = wait.until(<br>        EC.presence_of_element_located((By.CSS_SELECTOR, ‘#fm-login-id’))<br>    )<br>    input_password = wait.until(<br>        EC.presence_of_element_located((By.CSS_SELECTOR, ‘#fm-login-password’))<br>    )<br>    submit = wait.until(<br>        EC.element_to_be_clickable((By.CSS_SELECTOR, ‘#login-form &gt; div.fm-btn &gt; button’))<br>    )<br>    input_username.send_keys(username)<br>    time.sleep(2)<br>    input_password.send_keys(password)<br>    time.sleep(2)<br>    submit.click()<br>    time.sleep(3)  # 等待检验滑块</p><pre><code># 判断有无滑块验证try:    slider = wait.until(        EC.presence_of_element_located((By.CSS_SELECTOR, &#39;#nc_1__scale_text &gt; span&#39;))    )    if bool(slider):        print(&#39;发现滑块验证码&#39;)        time.sleep(2)        do_slider()        submit.click()    else:        print(&#39;未发现滑块&#39;)        passexcept:    print(&#39;未发现滑块&#39;)finally:    print(&#39;登录成功&#39;)</code></pre><p>def main():<br>    login(username=’’, password=’’)</p><p>if <strong>name</strong> == ‘<strong>main</strong>‘:<br>    main()</p><p>```</p>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Requests+正则表达式爬取猫眼电影TOP100</title>
      <link href="2021/01/58.html"/>
      <url>2021/01/58.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>般爬猫眼电影有两种方法，一种就像我前段时间写的豆瓣电影爬取方法一样，可以只获取全部电影所在的详情页内容，<br>然后利用 正则表达式 一个一个提取，另一种就是先获取全部电影所在的详情页内容，在分别获取每个电影对应的详情页内容，再利用 正则表达式 或 pyquery 获取。</p></blockquote><a id="more"></a><pre><code># -*- coding: utf-8 -*-&quot;&quot;&quot;@Time ： 2021/1/24 15:52@Auth ： Ne-21@File ：maoyan_spider.py@IDE ：PyCharm@Motto：Another me.&quot;&quot;&quot;import requestsfrom requests.exceptions import RequestExceptionimport reimport jsonfrom multiprocessing import Pooldef get_one_page(url):    try:        # 没有UA网页会乱码        headers = &#123;            &#39;user-agent&#39;: &#39;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3239.132 Safari/537.36&#39;        &#125;        response = requests.get(url, headers=headers)        if response.status_code == 200:            return response.text        return None    except RequestException as e:        print(e)        return Nonedef parse_one_page(html):    pattern = re.compile(&#39;&lt;dd&gt;.*?board-index.*?&gt;(\d+)&lt;/i&gt;.*?data-src=&quot;(.*?)&quot;.*?name&quot;&gt;&lt;a.*?&quot;&gt;(.*?)&lt;/a&gt;.*?star&quot;&gt;(.*?)&lt;/p&gt;.*?releasetime&quot;&gt;(.*?)&lt;/p&gt;.*?integer&quot;&gt;(.*?)&lt;/i&gt;.*?fraction&quot;&gt;(.*?)&lt;/i&gt;.*?&lt;/dd&gt;&#39;, re.S)    items = re.findall(pattern, html)    for i in items:    # yield 是一个生成器        yield &#123;            &#39;index&#39;: i[0],            &#39;image&#39;: i[1],            &#39;title&#39;: i[2],            # str.strip()就是把这个字符串头和尾的空格，以及位于头尾的\n \t之类给删掉            &#39;actor&#39;: i[3].strip()[3:],            &#39;time&#39;: i[4].strip()[5:],            &#39;score&#39;: i[5]+i[6]        &#125;def write_to_file(content):    # # 编码输出    # with open(&#39;result.txt&#39;, &#39;a&#39;) as f:    #     f.write(json.dumps(content) + &quot;\n&quot;)    #     f.close()    # 中文输出    with open(&#39;result.txt&#39;, &#39;a&#39;, encoding=&#39;utf-8&#39;) as f:        f.write(json.dumps(content, ensure_ascii=False) + &#39;\n&#39;)        f.close()def main(offset):    url = &#39;https://maoyan.com/board/4?offset=&#39; + str(offset)    html = get_one_page(url)    for item in parse_one_page(html):        print(item)        write_to_file(item)if __name__ == &#39;__main__&#39;:    # for i in range(10):    #     main(i*10)    # 多进程    pool = Pool()    pool.map(main, [i*10 for i in range(10)])</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux系统下无法卸载挂载的解决办法</title>
      <link href="2021/01/57.html"/>
      <url>2021/01/57.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>在日常运维中经常性会遇到需要进行磁盘的扩容、卸载、挂载等操作，但是有时候这个系统上跑的应用并没有停止或者有其他的运维同事在操作这个目录，这个时候我们是无法直接umount卸载掉的，所以今天就给大家分享一下如果遇到这种问题了，我们如何去合理的处理?</p></blockquote><p>现象描述：这里我们需要将/www目录卸载掉，如下图所示：<br>        <span class="lazyload-img-span">        <img              data-src="https://p.pstatp.com/origin/1374b00025551ee96e710" >        </sapn>      </p><p>执行卸载命令：<code>umount /www</code>后，发现卸载不了，提示资源被占用，如下图所示：<br>        <span class="lazyload-img-span">        <img              data-src="https://p.pstatp.com/origin/fffe0001d1f8cfadace4" >        </sapn>      </p><p>上面我们已经看到了，提示被占用，无法卸载，如何处理呢?方法很简单，可以使用<code>umount -f /www</code>强制卸载<br>        <span class="lazyload-img-span">        <img              data-src="https://p.pstatp.com/origin/ff8300037e48197ecdba" >        </sapn>      </p><p><code>-f</code> 参数为强制进行卸载，上面使用的强制卸载并未生效，还是报错了，现在使用fuser命令查看有哪些进程在占用目录<br>        <span class="lazyload-img-span">        <img              data-src="https://p.pstatp.com/origin/1382e00024a057add1370" >        </sapn>      </p><p>查看到有很多进程目前在占用此目录，所以无法卸载，现在有两种方法结束这些进程。</p><ul><li>第一种：平时常用到的<code>kill -9 进程号</code></li><li>第二种：结束目录中的所有进程<code>fuser -m -v -i -k /www</code><br>        <span class="lazyload-img-span">        <img              data-src="https://p.pstatp.com/origin/137d10003575939ab06cc" >        </sapn>      </li></ul><p><code>umount /www</code>   再次卸载，已经没有报错了</p><p><code>df -h</code>  查看这个设备已经卸载掉<br>        <span class="lazyload-img-span">        <img              data-src="https://p.pstatp.com/origin/138b50000c908da17f452" >        </sapn>      </p><p><strong>原文来自尊云<a href="https://www.zun.com/news/content/98.html">https://www.zun.com/news/content/98.html</a></strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>宝塔mysql总是自动停止解决方法总汇</title>
      <link href="2021/01/56.html"/>
      <url>2021/01/56.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>宝塔的数据库经常性自动停止，是因为网站频繁的请求数据库，而服务器内存又不足，为了保证服务器不彻底卡死，保护性的自动停止数据库，特别是有些程序比如ZBlog的数据库查询次数尤为突出，加上ZBlog插件之多，就算你不进行任何操作，你的后台也是在频繁的请求数据库！</p></blockquote><blockquote><p>就更不要提通过一些插件备份网站，做大量的文章更新，以及采集等，如果服务器配置很低，甚至采集一篇文章十几张图片就能瞬间让你的内存跑满导致服务器彻底卡死！当然导致这种问题除了服务器配置不够还跟你设置不当所导致有关，比如MySQL、php等性能设置！当然今天讨论的主题并不是这。</p></blockquote><blockquote><p>虽然ZBlog可以通过缓存减轻数据库负担，但是当你管理后台更新文章或其他操作还是会不可避免的请求数据库，特别是ZBlog这种越来越臃肿的程序，且避免不了一些人恶意的请求以及垃圾蜘蛛的恶意爬取，导致数据库保护性暂停。</p></blockquote><p>当然这里是推荐你更换更高配置的服务器，如果你不打算更换可以考虑一下方法解决宝塔面板数据库自动停止的问题！</p><p>出现数据库经常停止可以参照下面解决方案：</p><h1 id="方法一："><a href="#方法一：" class="headerlink" title="方法一："></a>方法一：</h1><ul><li>安装宝塔面板【linux工具箱】<br>        <span class="lazyload-img-span">        <img              data-src="https://ae01.alicdn.com/kf/U482efb232e4b4a9fa0cecd78abc6d46ej.jpg" >        </sapn>      </li><li>添加设置SWAP大小，根据你的实际内存进行调整，swap是Linux下的虚拟内存，设置适当的swap可增加服务器稳定性，<br>建议swap容量在真实内存容量的1.5倍左右，若您的服务器内存大于4GB，可设1-2GB的固定值，swap文件默认保存在/www/swap，设置前请确保磁盘空间够用。<br>        <span class="lazyload-img-span">        <img              data-src="https://ae01.alicdn.com/kf/Ue2f6f44cd8c9478b862832d0056daf98T.jpg" >        </sapn>      </li></ul><h1 id="方法二："><a href="#方法二：" class="headerlink" title="方法二："></a>方法二：</h1><ul><li>根据你的实际内存进行mysql优化<br>        <span class="lazyload-img-span">        <img              data-src="https://ae01.alicdn.com/kf/Uc4456d93ef6f449992e8f1e09294c555s.jpg" >        </sapn>      </li></ul><p>#方法三：<br>这个方法简单粗暴，适合土豪站长，直接增加服务器内存或使用云数据库，把数据库分离出去。</p><p>导致数据库自动暂停是多方面的，这篇文的方法并没有从根本上解决这个问题，而是尽量减少数据库导致网站长时间无法正常，如果你的数据库一个星期只是3-4次自定停止，通过这个可以有效解决，对seo优化和用户体验也不会有太大影响！</p><p>如果经常性的一天数据库就停止好几次，那么就是宝塔设置有问题了，请检查你的宝塔设置是否有安全问题，以及数据库配置和php版本设置是否得当，经常看看日志是否有恶意请求！</p><pre><code>本文原地址：https://www.wenytao.com/blog/333.html#comments</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【PYTHON】乐心健康刷微信支付宝步数</title>
      <link href="2020/10/55.html"/>
      <url>2020/10/55.html</url>
      
        <content type="html"><![CDATA[<h1 id="lx-step"><a href="#lx-step" class="headerlink" title="lx-step"></a>lx-step</h1><p>【Python】腾讯云云函数配合乐心健康刷QQ、微信、支付宝步数(支持随机步数、微信QQ推送)</p><h1 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h1><ol><li>下载乐心健康APP：官方下载地址：<a href="http://www.lifesense.com/app/">http://www.lifesense.com/app/</a></li><li>从应用商店下载乐心健康App，打开软件并选择手机号登录</li><li>登录之后，点击我的-&gt;设置-&gt;账号与安全-&gt;设置密码(修改密码)，设置你自己记得住的密码</li><li>回到App首页，点击我的-&gt;数据共享，绑定你想同步数据的项目注：同步微信运动请按照要求关注【乐心运动】公众号。</li><li>回到云函数代码，配置好下图参数，运行即可提交步数即可同步至你绑定的所有平台<br>        <span class="lazyload-img-span">        <img              data-src="https://attach.52pojie.cn/forum/202009/26/220610s1ehd59u55uh5uce.png" >        </sapn>      </li><li>设置好云函数触发规则</li></ol><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><p><a href="https://www.52pojie.cn/thread-1274977-1-1.html">https://www.52pojie.cn/thread-1274977-1-1.html</a></p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><pre><code># -*- coding: utf8 -*-import requestsimport hashlibimport jsonimport timeimport randomdef md5(code):    res=hashlib.md5()    res.update(code.encode(&quot;utf8&quot;))    return res.hexdigest()def get_information(mobile,password):    header = &#123;        &#39;Content-Type&#39;: &#39;application/json; charset=utf-8&#39;,        &quot;User-Agent&quot;: &quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/85.0.4183.121 Safari/537.36&quot;    &#125;    url=&quot;http://sports.lifesense.com/sessions_service/login?systemType=2&amp;version=4.6.7&quot;    datas = &#123;        &quot;appType&quot;:6,        &quot;clientId&quot;:md5(&quot;5454&quot;),        &quot;loginName&quot;:str(mobile),        &quot;password&quot;:md5(str(password)),        &quot;roleType&quot;:0        &#125;    response =requests.post(url,headers=header,data=json.dumps(datas))    return response.textdef update_step(step,information):    step =int(step)    url=&quot;http://sports.lifesense.com/sport_service/sport/sport/uploadMobileStepV2?version=4.5&amp;systemType=2&quot;    accessToken=json.loads(information)[&quot;data&quot;][&quot;accessToken&quot;]    userId=json.loads(information)[&quot;data&quot;][&quot;userId&quot;]    #print(accessToken)    #print(userId)    #获取当前时间和日期    timeStamp=time.time()    localTime = time.localtime(timeStamp)    strTime = time.strftime(&quot;%Y-%m-%d %H:%M:%S&quot;, localTime)    print(strTime)    measureTime=strTime+&quot;,&quot;+str(int(timeStamp))    header = &#123;    &#39;Cookie&#39;: &#39;accessToken=&#39;+accessToken,    &#39;Content-Type&#39;: &#39;application/json; charset=utf-8&#39;,    &quot;User-Agent&quot;: &quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/85.0.4183.121 Safari/537.36&quot;    &#125;    sport_datas = &#123;        &quot;list&quot;: [            &#123;                &quot;DataSource&quot;:2,                &quot;active&quot;:1,                &quot;calories&quot;:str(int(step/4)),                &quot;dataSource&quot;:2,                &quot;deviceId&quot;:&quot;M_NULL&quot;,                &quot;distance&quot;:str(int(step/3)),                &quot;exerciseTime&quot;:0,                &quot;isUpload&quot;:0,                &quot;measurementTime&quot;:measureTime,                &quot;priority&quot;:0,                &quot;step&quot;: str(step),                &quot;type&quot;:2,                &quot;updated&quot;:str(int(time.time()*1000)),                &quot;userId&quot;:str(userId)                &#125;]                &#125;    result=requests.post(url,headers=header,data=json.dumps(sport_datas))    return result.textdef server_send(msg):    if sckey == &#39;&#39;:        return    server_url = &quot;https://sc.ftqq.com/&quot; + str(sckey) + &quot;.send&quot;    data = &#123;            &#39;text&#39;: msg,            &#39;desp&#39;: msg        &#125;    requests.post(server_url, data=data)def kt_send(msg):    if ktkey == &#39;&#39;:        return    kt_url = &#39;https://push.xuthus.cc/send/&#39;+str(ktkey)    data = (&#39;步数刷取完成，请查看详细信息~\n&#39;+str(msg)).encode(&quot;utf-8&quot;)    requests.post(kt_url, data=data)def execute_walk(phone,password,step):    information=get_information(phone,password)    update_result=update_step(step,information)    result=json.loads(update_result)[&quot;msg&quot;]    if result == &#39;成功&#39;:        msg = &quot;刷新步数成功！此次刷取&quot; + str(step) + &quot;步。&quot;        print(msg)        server_send(msg)        kt_send(msg)    else:        msg = &quot;刷新步数失败！请查看云函数日志。&quot;        print(msg)        server_send(msg)        kt_send(msg)    def main():    if phone and password and step != &#39;&#39;:        execute_walk(phone, password, step)    else:        print(&quot;参数不全,请指定参数。或者在调用中直接指定参数&quot;)# -- 配置 --# ------------------------------phone = &#39;&#39;  # 登陆账号password = &#39;&#39;  # 密码step = random.randint(30000,40000)  # 随机30000-40000步数sckey = &#39;&#39;  # server酱key(可空)ktkey = &#39;&#39;  # 酷推key(可空)# ------------------------------def main_handler(event, context):    return main()if __name__ == &#39;__main__&#39;:    main()</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用腾讯云函数实现机场每日自动签到领流量</title>
      <link href="2020/09/54.html"/>
      <url>2020/09/54.html</url>
      
        <content type="html"><![CDATA[<h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><ul><li>云函数部署地址<a href="https://cloud.tencent.com/product/scf">https://cloud.tencent.com/product/scf</a> ,部署方法自行百度</li><li>适用SSPanel面板</li><li>项目地址<a href="https://github.com/ne-21/sspanel-automaticcheckin">https://github.com/ne-21/sspanel-automaticcheckin</a> ,最新脚本请到此获取</li></ul><h1 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h1><ul><li>自动签到</li><li>Server酱微信推送</li></ul><h1 id="感谢"><a href="#感谢" class="headerlink" title="感谢"></a>感谢</h1><ul><li>基于项目<a href="https://github.com/zhjc1124/ssr_autocheckin">https://github.com/zhjc1124/ssr_autocheckin</a> 修改</li></ul><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><pre><code># -*- coding: utf-8 -*-&quot;&quot;&quot;@Time ： 2020/9/15 9:52@Auth ： Ne-21@Des : sspanel自动每日签到脚本@File ：sspanel_qd.py@IDE ：PyCharm@Motto：Another me.sspanel自动每日签到脚本，基于项目https://github.com/zhjc1124/ssr_autocheckin修改&quot;&quot;&quot;import requestsimport rerequests.packages.urllib3.disable_warnings()class SspanelQd(object):    def __init__(self):        # 机场地址        self.base_url = &#39;https://****.net&#39;        # 登录信息        self.email = &#39;****@qq.com&#39;        self.password = &#39;****&#39;        # Server酱推送        self.sckey = &#39;SCU109245Tf34928bcea84db0a*************&#39;    def checkin(self):        email = self.email.split(&#39;@&#39;)        email = email[0] + &#39;%40&#39; + email[1]        password = self.password        session = requests.session()        session.get(self.base_url, verify=False)        login_url = self.base_url + &#39;/auth/login&#39;        headers = &#123;            &#39;User-Agent&#39;: &#39;Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36&#39;,            &#39;Content-Type&#39;: &#39;application/x-www-form-urlencoded; charset=UTF-8&#39;,        &#125;        post_data = &#39;email=&#39; + email + &#39;&amp;passwd=&#39; + password + &#39;&amp;code=&#39;        post_data = post_data.encode()        response = session.post(login_url, post_data, headers=headers, verify=False)        headers = &#123;            &#39;User-Agent&#39;: &#39;Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36&#39;,            &#39;Referer&#39;: self.base_url + &#39;/user&#39;        &#125;        response = session.post(self.base_url + &#39;/user/checkin&#39;, headers=headers, verify=False)        msg1 = (response.json()).get(&#39;msg&#39;)        info_url = self.base_url + &#39;/user&#39;        response = session.get(info_url, verify=False)        level = re.findall(r&#39;\[&quot;Class&quot;, &quot;(.*?)&quot;],&#39;, response.text)[0]        day = re.findall(r&#39;\[&quot;Class_Expire&quot;, &quot;(.*)&quot;],&#39;, response.text)[0]        rest = re.findall(r&#39;\[&quot;Unused_Traffic&quot;, &quot;(.*?)&quot;]&#39;, response.text)[0]        msg = &quot;- 今日签到信息：&quot;+str(msg1)+&quot;\n- 用户等级：&quot;+str(level)+&quot;\n- 到期时间：&quot;+str(day)+&quot;\n- 剩余流量：&quot;+str(rest)        print(msg)        return msg    # Server酱推送    def server_send(self, msg):        if self.sckey == &#39;&#39;:            return        server_url = &quot;https://sc.ftqq.com/&quot; + str(self.sckey) + &quot;.send&quot;        data = &#123;                &#39;text&#39;: &quot;签到完成，点击查看详细信息~&quot;,                &#39;desp&#39;: msg            &#125;        requests.post(server_url, data=data)    def main(self):        msg = self.checkin()        self.server_send(msg)# 云函数入口def main_handler(event, context):    run = SspanelQd()    run.main()if __name__ == &#39;__main__&#39;:    run = SspanelQd()    run.main()</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ThinkPHP学习笔记 - 01入门</title>
      <link href="2020/09/53.html"/>
      <url>2020/09/53.html</url>
      
        <content type="html"><![CDATA[<p>学习要点：<br>1.框架简介<br>2.安装步骤<br>3.其它杂项</p><p>本节课我们来开始进入 ThinkPHP5.1 的学习过程，主动了解下框架的需求、安装步骤 以及一些零碎知识点。</p><h1 id="一．框架简介"><a href="#一．框架简介" class="headerlink" title="一．框架简介"></a>一．框架简介</h1><ol><li>ThinkPHP5.1 是目前框架正式版的最新版本； </li><li>ThinkPHP6.0 目前是预览版（尚未稳定的测试版），正式版后考虑制作； </li><li>TP 框架是免费开源的、轻量级的、简单快速且敏捷的 PHP 框架； </li><li>你可以免费使用 TP 框架，甚至可以将你的项目商用； </li><li>ThinkPHP5.1 要求 PHP 版本是 5.6+以上（目前最新版本是 7.x）； </li><li>我们采用最新 7.x 来运行 TP5.1，而预览版 TP6 需要 7.1+； </li><li>集成环境这里采用 windows 结合 wamp，其它系统或环境满足版本要求即可; </li><li>除了 PHP5.6+，还需要开启 PDO 数据库引擎和 MBstring 字符串扩展；</li></ol><h1 id="二．安装步骤"><a href="#二．安装步骤" class="headerlink" title="二．安装步骤"></a>二．安装步骤</h1><ol><li>官网不提供软件包下载，采用 <code>Composer</code> 和 <code>git</code> 方式下载和更新； </li><li>这里只演示 windows 安装，Mac 和 Linux 方法参考一下手册； </li><li>打开 windows 下的运行：cmd，然后运行如下代码（Mac 和 Linux 控制台）：<br><code>composer config -g repo.packagist composer https://packagist.phpcomposer.com</code></li><li>如果上述地址产生阻碍，可以使用国内的：<br><code>composer config -g repo.packagist composer https://mirrors.aliyun.com/composer/</code></li><li>现在，先启用服务器环境，测试本地 Web 环境是否正常； </li><li>如果你是首次安装 ThinkPHP5.1，那么先从 cmd 中切换到你要加载的目录；<br><code>composer create-project topthink/think=5.1.* tp5.1test</code></li><li>通过访问 <a href="http://localhost/tp5.1test/public">http://localhost/tp5.1test/public</a> 测试是否进入首页； </li><li>如果要更新你的项目版本，直接进入项目根目录，然后直接如下代码：<br><code>composer update topthink/framework</code></li></ol><h1 id="三．其它杂项"><a href="#三．其它杂项" class="headerlink" title="三．其它杂项"></a>三．其它杂项</h1><ol><li>开发规范遵循 PSR-2 命名规范、PSR-4 自动加载； </li><li>目录结构，可以参考手册，课程中会慢慢熟知，不摘入了； </li><li>对于框架的配置，在以后课程中，遇到某个讲解某个； </li><li>学习条件：必须具有 PHP 基础，面向对象基础和 MVC 设计模式基础；</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> ThinkPHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>支付宝当面付配置对接代刷网发卡网易支付</title>
      <link href="2020/08/52.html"/>
      <url>2020/08/52.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>支付宝当面付不需要挂机，监控，顾客可以用花呗信用卡，不用输入金额直接支付然后直接到账你支付宝余额，很方便。</p></blockquote><ul><li>首先申请当面付地址：<a href="https://b.alipay.com/signing/productSetV2.htm">https://b.alipay.com/signing/productSetV2.htm</a><br>对接代刷网易支付那些基本上都需要 <code>应用ID</code> <code>支付宝公钥</code> <code>商户私钥</code>  这三个</li></ul><p>打开地址： <a href="https://openhome.alipay.com/platform/keyManage.htm">https://openhome.alipay.com/platform/keyManage.htm</a>  登陆一下 ，可以看到如图所示，里面就有 <code>应用ID</code>  已经标注出来了，<br>        <span class="lazyload-img-span">        <img              data-src="https://wx2.sbimg.cn/2020/08/15/3oZ51.png" >        </sapn>      </p><p>点击接口加签方式旁边那个设置，然后验证一下手机号或者支付密码都可以，这个先放着，然后需要下载一个<a href="https://ideservice.alipay.com/ide/getPluginUrl.htm?clientType=assistant&platform=win&channelType=WEB">支付宝密钥生成器</a> ,下载好了之后安装一下</p><p>打开后直接点生成密钥，然后复制软件里面的应用公钥到刚刚网站打开那个加签管理的公钥里面，然后保存设置等待自动刷新<br>        <span class="lazyload-img-span">        <img              data-src="https://s1.ax1x.com/2020/08/15/dkP639.png" >        </sapn>      <br>        <span class="lazyload-img-span">        <img              data-src="https://s1.ax1x.com/2020/08/15/dkie5F.png" >        </sapn>      <br>        <span class="lazyload-img-span">        <img              data-src="https://s1.ax1x.com/2020/08/15/dkiMvR.png" >        </sapn>      </p><p>商户私钥就是那个软件里面的应用私钥，支付宝公钥等刷新完成后在打开接口加签方式旁边那个设置/查看，上面那个就是支付宝公钥了<br>        <span class="lazyload-img-span">        <img              data-src="https://s1.ax1x.com/2020/08/15/dkioZV.png" >        </sapn>      <br>        <span class="lazyload-img-span">        <img              data-src="https://s1.ax1x.com/2020/08/15/dkiqG4.png" >        </sapn>      </p><p>现在 <code>应用ID</code> <code>支付宝公钥</code> <code>商户私钥</code>  都有了直接填入网站中即可，我这里放一个代刷的图片<br>        <span class="lazyload-img-span">        <img              data-src="https://s1.ax1x.com/2020/08/15/dkiOz9.png" >        </sapn>      </p><p><strong>原文链接<a href="https://www.ntaaa.cn/492.html">https://www.ntaaa.cn/492.html</a></strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ulistenhelper - 基于腾讯云语音识别的U校园听力识别工具</title>
      <link href="2020/07/51.html"/>
      <url>2020/07/51.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>自己闲的无聊，连夜把这个工具重构了，这回个人感觉还是可以的。<br>实现原理很简单，利用腾讯语音识对听力音频进行处理<br>直接输入听力音频的网址，便可以获得听力的文本内容</p></blockquote><p>个人感觉识别度很高，因为自己也要用，所以做出来分享给大家</p><p>注意：32位操作系统可能用不了，请使用64位操作系统</p><p>源码就不放了，没有注释，命名也不规范。<br>工具下载链接：<a href="https://gocos.lanzous.com/iiXQ5eq802f">https://gocos.lanzous.com/iiXQ5eq802f</a></p><p>参数获取以及详细文档 -&gt; <a href="https://www.52pojie.cn/thread-1221679-1-1.html">https://www.52pojie.cn/thread-1221679-1-1.html</a></p><p>听力音频链接获取 -&gt; <a href="https://gocos.cn/2020/04/34.html">https://gocos.cn/2020/04/34.html</a></p><p>程序截图：<br>        <span class="lazyload-img-span">        <img              data-src="https://ftp.bmp.ovh/imgs/2020/07/03b7fc4ddcdcabec.png" >        </sapn>      <br>        <span class="lazyload-img-span">        <img              data-src="https://ftp.bmp.ovh/imgs/2020/07/1c15b807d76c5ba8.png" >        </sapn>      <br>        <span class="lazyload-img-span">        <img              data-src="https://ftp.bmp.ovh/imgs/2020/07/ad1781e16ee9bf01.png" >        </sapn>      </p>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网易云音乐升级API</title>
      <link href="2020/07/50.html"/>
      <url>2020/07/50.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>接口网站<a href="http://netease.gocos.cn/">http://netease.gocos.cn</a><br>在线使用<a href="http://netease.gocos.cn/music">http://netease.gocos.cn/music</a></p></blockquote><h1 id="接口文档"><a href="#接口文档" class="headerlink" title="接口文档"></a>接口文档</h1><ul><li>调用前须知<br>本项目不提供线上 demo，请不要轻易信任使用他人提供的公开服务，如果使用，填写密码时一定要自己加密MD5，以免发生安全问题，泄露自己的账号和密码。<br>为使用方便,降低门槛, 文档示例接口直接使用了 GET 请求,本项目同时支持 GET/POST 请按实际需求使用<br>本项目仅供学习使用,请尊重版权，请勿利用此项目从事商业行为<br>API登陆接口只接收MD5加密后的密码，并且不会储存你的个人信息，原密码除了你自己谁也不知道<br>使用本项目不会影响你的听歌风格，刷的歌都来自你的每日推荐歌单。</li></ul><h1 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h1><p>说明 : 登录有两个接口,建议使用encodeURIComponent对密码编码或者使用POST请求,避免某些特殊字符无法解析,如#(#在url中会被识别为hash,而不是query)<br>无论是手机登录还是邮箱登陆，密码都必须使用MD5，不可以直接传入明文<br>明文例如：123456abcd<br>MD5例如：efa224f8de55cb668cd01edbccdfc8a9</p><ol><li>手机登录<br>必选参数 :<br>uin: 手机号码<br>pwd: 密码<br>接口地址 : /?do=login<br>可选参数 : r: 0至1的随机数，例如0.20246864764818318<br>调用例子 : /?do=login&amp;uin=xxx&amp;pwd=yyy</li><li>邮箱登录<br>必选参数 :<br>uin: 163 网易邮箱<br>pwd: 密码<br>接口地址 : /?do=email<br>调用例子 : /?do=email&amp;uin=xxx&amp;pwd=yyy<br>完成登录后 , 会在浏览器保存一个 Cookies 用作登录凭证 , 大部分 API 都需要用到这个 Cookies,请求会自动带上 Cookies</li></ol><h1 id="签到"><a href="#签到" class="headerlink" title="签到"></a>签到</h1><p>说明：调用接口这个接口可以签到<br>接口地址 : /?do=sign</p><h1 id="打卡听歌"><a href="#打卡听歌" class="headerlink" title="打卡听歌"></a>打卡听歌</h1><p>说明：由于网易云官方问题，如果打卡听歌只刷了一部分，可以多请求几次，建议每次间隔30秒请求3次左右<br>接口地址 : /?do=daka</p><h1 id="获取用户详情"><a href="#获取用户详情" class="headerlink" title="获取用户详情"></a>获取用户详情</h1><p>说明 : 登陆后调用此接口 , 传入用户 id, 可以获取用户详情<br>必选参数 :<br>uid : 用户 id<br>接口地址 : /?do=detail<br>调用例子 : /?do=detail&amp;uid=32953014<br>注意获取用户信息接口传入的时uid，而登陆接口传入的是uin，不要搞混淆</p><h1 id="检查接口"><a href="#检查接口" class="headerlink" title="检查接口"></a>检查接口</h1><p>说明：调用此接口可检查当前项目API是否可用，建议在调用接口前先调用此接口做个判断<br>接口地址 : /?do=check</p><h1 id="刷单曲播放次数"><a href="#刷单曲播放次数" class="headerlink" title="刷单曲播放次数"></a>刷单曲播放次数</h1><p>说明 : 登陆后调用此接口 , 传入指定歌单id和次数, 可以使该歌单内每首单曲各增加一定的播放次数<br>必选参数 :<br>id : 歌单 id<br>time : 歌单播放次数<br>接口地址 : /?do=listen<br>调用例子 : /?do=listen&amp;id=5101628912&amp;time=300</p><p>说明：应用场景常用于定向性训练账号的听歌趋向，可自主纠正系统的个性化推送，让它推送你真正喜欢的内容。这里的次数是指歌单播放次数，比如歌单内有两首歌，次数定为300，则两首歌各增加300次播放次数，如果只想提高某一首歌的次数，那就让这个歌单只留下这一首即可。</p>]]></content>
      
      
      
        <tags>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>超星学习通上锁视频进入原理与实现</title>
      <link href="2020/07/49.html"/>
      <url>2020/07/49.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>相信大家都应该知道，这个学期的线上学习成绩占的比重很大吧，我们差不多占到了50%左右，这是什么概念？这就意味着返校考试划划水就可以过了。那这个线上学习的成绩大部分来自于学习通中视频的观看，鉴于学习通（du）经常性的抽风，导致我们进不去，再加上老师过了一段时间就将视频上锁，我们想学习都学不了（我要分数！我要分数！我要分数！）<br>为了省去找老师费嘴皮子求开视频的麻烦，我果断自己动手了，这篇文章就来告诉大家如何解决这个问题，成功看完视频拿到视频平时分。</p></blockquote><a id="more"></a><p>这个教程分两个部分，第一部分-进后台（看自己那个视频没看），第二部分-进入视频（进入上锁视频完成观看）<br><strong>转载请注明原文链接</strong></p><h1 id="如何进入后台"><a href="#如何进入后台" class="headerlink" title="如何进入后台"></a>如何进入后台</h1><p>        <span class="lazyload-img-span">        <img              data-src="https://ae01.alicdn.com/kf/Hfad9a10c57a04f498e505be61ef4a814O.jpg" >        </sapn>      </p><p>进入后台的链接地址：<br><code>https://mooc1-1.chaoxing.com/moocAnalysis/chapterStatisticByUser?classId=你的classId&amp;courseId=你的courseId&amp;userId=你的userId&amp;ut=s</code><br>注意：大部分后台地址都是这个，如果进不去可以联系我</p><p>ok，现在我们只需要解决这三个参数就可以进入后台了</p><ul><li>获取参数</li></ul><p>1.进入课程，鼠标右键，选择<code>查看网页源代码</code><br>        <span class="lazyload-img-span">        <img              data-src="https://ae01.alicdn.com/kf/H519183b14185402683726706f7eef4b3B.jpg" >        </sapn>      <br>2.在新弹出来的页面进行查找(快捷键ctrl+F)，查找字段<code>moocId</code>（搜索不到请搜索<code>gv</code>或者直接搜索<code>classId</code>、<code>courseId</code>、<code>userId</code>)<br>        <span class="lazyload-img-span">        <img              data-src="https://ae01.alicdn.com/kf/H752205810f2a4063a9cac1d395d57a07r.jpg" >        </sapn>      <br><strong>注意看图中的对应信息</strong><br>3.将获取的三个参数填入上述网址，回车进入后台</p><h1 id="如何进入上锁视频"><a href="#如何进入上锁视频" class="headerlink" title="如何进入上锁视频"></a>如何进入上锁视频</h1><p>我们现在已经进入后台了，那么我们就可以看到那些视频是我们看完的，哪些是没有看的。<br>        <span class="lazyload-img-span">        <img              data-src="https://ae01.alicdn.com/kf/H47e46556dd714b079765c34011c62847W.jpg" >        </sapn>      </p><p>ok,我们已经找到那些视频没看了，返回我们的课程，找一个可以进去的任务点<br>        <span class="lazyload-img-span">        <img              data-src="https://ae01.alicdn.com/kf/H5c72327bb36d409faaec17bbde0ea4e7E.jpg" >        </sapn>      </p><p>1.在这个页面按F12<br>        <span class="lazyload-img-span">        <img              data-src="https://ae01.alicdn.com/kf/Hdc28590ef6a646fa811a9aade4dae841A.jpg" >        </sapn>      <br>2.认真看下图<br>        <span class="lazyload-img-span">        <img              data-src="https://ae01.alicdn.com/kf/H3f7c614ccd584933aa33a2ce8230e3a95.jpg" >        </sapn>      <br>3.认真看下图<br>        <span class="lazyload-img-span">        <img              data-src="https://ae01.alicdn.com/kf/Hd2383ad42e12400d8489890292999accH.jpg" >        </sapn>      <br>4.在在图中所示位置输入<code>javascript:getTeacherAjax(&#39;你的courseId&#39;,&#39;你的classId&#39;,&#39;上图获得的cur后面的数字&#39;);</code>然后按回车，奇妙的事情发生了<br>        <span class="lazyload-img-span">        <img              data-src="https://ae01.alicdn.com/kf/Hf9c186bd32d94c54b1e6f0122b0bdb8aX.jpg" >        </sapn>      </p><p>我们已经进入上锁视频了，教程结束</p><h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><p>经过测试，上锁视频看完后台进度是加的，视频的分数是加的，对于未完成的上锁作业应该是不能提交，具体自己摸索吧</p>]]></content>
      
      
      
        <tags>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>超星学习通考试系统功能扫盲</title>
      <link href="2020/06/48.html"/>
      <url>2020/06/48.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>超星这个新的考试系统出了好像也有一段时间了，看网上那个的消息听起来很厉害的样子，此生有幸，我们已经用这个考试系统考过了，接下来呢，就和大家说说这个考试系统吧</p></blockquote><p><strong>因为没有教师端账号，以下内容仅供参考</strong></p><h1 id="part1-试卷发布界面"><a href="#part1-试卷发布界面" class="headerlink" title="part1-试卷发布界面"></a>part1-试卷发布界面</h1><p>        <span class="lazyload-img-span">        <img              data-src="https://ae01.alicdn.com/kf/H37c193043a934056938194bbb82c188al.jpg" >        </sapn>      </p><p>我们可以看到这里有一个防作弊设置，我来逐一解释下</p><ul><li>题目乱序-顾名思义，每个人的题目顺序不一样</li><li>选项乱序-每道题目的选项顺序不同</li><li>考试过程中抓拍监控-这个主要是两个步骤</li><li>考试进入的时候会要求采集你的人脸信息（老版本可能采集不到，后台监考显示未采集到人脸）</li><li>考试过程中会抓拍，前、后摄像头翻转一次为一次抓拍（在监考后台老师可以随时点击抓拍按钮，系统是否会自动抓拍我没有测试）</li><li>考试过程中切屏控制-切屏会有提醒，解决办法见<a href="https://gocos.cn/2020/05/40.html">https://gocos.cn/2020/05/40.html</a></li><li>        <span class="lazyload-img-span">        <img              data-src="https://ae01.alicdn.com/kf/H9e1304f595a342088d79c6976943a44ft.jpg" >        </sapn>      </li><li>可以限制考试客户端（手机和电脑（注意，电脑是客户端不是网页））</li><li>系统默认考试须知如下：<br>        <span class="lazyload-img-span">        <img              data-src="https://ae01.alicdn.com/kf/Hc3dc559f71214bde82224d0d86257c9ez.jpg" >        </sapn>      </li></ul><h1 id="part2-监考界面"><a href="#part2-监考界面" class="headerlink" title="part2-监考界面"></a>part2-监考界面</h1><ul><li>在线监考<br>        <span class="lazyload-img-span">        <img              data-src="https://ae01.alicdn.com/kf/H918e83f7cb194680996d38c72c65cf4aF.jpg" >        </sapn>      <br>        <span class="lazyload-img-span">        <img              data-src="https://ae01.alicdn.com/kf/Hdde452ae80954e13a5c939983f6d2e30p.jpg" >        </sapn>      </li><li>监考界面<br>        <span class="lazyload-img-span">        <img              data-src="https://ae01.alicdn.com/kf/H834700a1f1144e13b5f32a207985474dG.jpg" >        </sapn>      </li><li>教师可在此监考（主要功能：发送警告、强制收卷），亦可以点击查看考生详细信息（包括：考试客户端类型、人脸采集信息、抓拍图像、切屏次数和每次切屏持续的时间、每道题目提交的时间点）</li></ul><p>大概就这些，祝大家考试顺利。</p>]]></content>
      
      
      
        <tags>
            
            <tag> knowledge </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用python实现超星学习通自动签到</title>
      <link href="2020/06/47.html"/>
      <url>2020/06/47.html</url>
      
        <content type="html"><![CDATA[<h1 id="依赖库"><a href="#依赖库" class="headerlink" title="依赖库"></a>依赖库</h1><ul><li>requests</li><li>pillow</li><li>lxml</li></ul><h1 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h1><p>1.测试环境为python3.7+,自行安装python3<br>2.安装所需第三方模块，依次执行<code>pip install requests</code>、<code>pip install pillow</code>、<code>pip install lxml</code><br>3.Python 和需要模块都装好了直接在目录 cmd 运行所需脚本。</p><h1 id="脚本代码"><a href="#脚本代码" class="headerlink" title="脚本代码"></a>脚本代码</h1><pre><code>import requests,time,json,re,base64from io import BytesIOrequests.packages.urllib3.disable_warnings()from PIL import Image,ImageDraw,ImageChopsfrom lxml import etreefrom urllib.parse import urlparse, parse_qsusername = &quot;&quot;   #登录账号password = &quot;&quot;   #登录密码sckey = &quot;&quot;      #Server酱推送提醒keys = requests.Session()s.headers.update(&#123;&#39;User-Agent&#39;:&#39;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.122 Safari/537.36&#39;&#125;)activates = []def sign(aid, uid):    global activates    url = &quot;https://mobilelearn.chaoxing.com/pptSign/stuSignajax?activeId=&quot; + aid + &quot;&amp;uid=&quot; + uid + &quot;&amp;clientip=&amp;latitude=-1&amp;longitude=-1&amp;appType=15&amp;fid=0&quot;    res = s.get(url,verify=False)    if (res.text == &quot;success&quot;):        print(&quot; 签到成功！&quot;)        if sckey != &quot;&quot;:            data = &#123;                &quot;text&quot; : &quot;签到成功&quot;,                &quot;desp&quot; : &quot;aid&quot; + str(aid)                &#125;            sckeyurl = &quot;http://sc.ftqq.com/&quot;+str(sckey)+&quot;.send&quot;            web = s.post(sckeyurl, data=data, verify=False)        activates.append(aid)    elif(res.text == &quot;您已签到过了&quot;):        print(res.text)        activates.append(aid)    else:        if sckey != &quot;&quot;:            data = &#123;                &quot;text&quot; : &quot;签到失败&quot;,                &quot;desp&quot; : &quot;aid&quot; + str(aid)                &#125;            sckeyurl = &quot;http://sc.ftqq.com/&quot;+str(sckey)+&quot;.send&quot;            web = s.post(sckeyurl, data=data, verify=False)        print(&quot;签到失败&quot;)def login():    global uid,username,password    if(username == &quot;&quot; or password == &quot;&quot;):        username = input(&quot;登录账号：&quot;)        password = input(&quot;登录密码：&quot;)    #旧接口，已失效    #url=&quot;http://i.chaoxing.com/vlogin?passWord=&quot;+str(password)+&quot;&amp;userName=&quot;+str(username)    url = f&#39;https://passport2-api.chaoxing.com/v11/loginregister?uname=&#39;+str(username)+&#39;&amp;code=&#39;+str(password)    res= s.get(url)    if(&quot;验证通过&quot; in str(res.text)):        print(&#39;Login success!&#39;)        for key, value in res.cookies.items():            if key==&quot;_uid&quot;:                uid=value        return s    else:        print(username,password)        print(&#39;账号密码有误，请重试。&#39;)        username = &quot;&quot;        password = &quot;&quot;        login()def getuserdata():    web = s.get(&#39;http://mooc1-1.chaoxing.com/visit/courses&#39;)    h1 = etree.HTML(web.text)    name = h1.xpath(&#39;//h3[@class = &quot;clearfix&quot;]/a/text()&#39;)    print(&quot;-----------课程名称-----------&quot;)    print(name)    print(&quot;------------------------------&quot;)    global count    try:        count    except NameError:        count_exist = False    else:        count_exist = True    if(count_exist):        pass    else:        if(len(name) == 1):            count = 0        else:            #count = 0            count = int(input(&quot;请用数字选择要签到的课程(从0开始)：&quot;))    geturl = h1.xpath(&#39;//div[@class = &quot;Mcon1img httpsClass&quot;]/a/@href&#39;)    i = 0    courseurl = []    for temp in range(0,len(geturl)):        if(&quot;/mycourse/studentcourse&quot; in geturl[i]):            courseurl.append(geturl[i])        i += 1    url = &#39;https://mooc1-1.chaoxing.com&#39; + courseurl[count]    url_query = urlparse(url).query    userdata = dict([(k, v[0]) for k, v in parse_qs(url_query).items()])    global courseId, classId    courseId = userdata[&quot;courseId&quot;]    classId = userdata[&quot;clazzid&quot;]def main():    getuserdata()    while 1:        url = f&#39;https://mobilelearn.chaoxing.com/ppt/activeAPI/taskactivelist?courseId=&#39;+courseId+&#39;&amp;classId=&#39;+classId+&#39;&amp;uid=&#39;+str(uid)        web = s.get(url,verify=False)        activeList = json.loads(web.text)[&quot;activeList&quot;]        for item in activeList:            if (&quot;nameTwo&quot; not in item):                continue            if (item[&#39;activeType&#39;] == 2 and item[&#39;status&#39;] == 1):                signurl = item[&#39;url&#39;]                var = signurl.split(&quot;&amp;&quot;)                for var1 in var:                    var2 = var1.split(&quot;=&quot;)                    if(var2[0] == &quot;activePrimaryId&quot;):                        aid = var2[1]                if (aid not in activates):                    print(&quot;查询到签到 名称:%s 活动时间:%s aid:%s&quot; % (                        item[&#39;nameOne&#39;], item[&#39;nameFour&#39;], aid))                    sign(aid, uid)            else:                time.sleep(3)                print(&quot;签到暂未开通&quot;)    if __name__ == &quot;__main__&quot;:    print(&quot;登录成功后等待签到开始&quot;)    try:        #captchalogin(username,password)        login()        main()    except Exception as e:        print(&#39;repr(e):&#39;, repr(e))   </code></pre><h1 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h1><p>1.需要手机号登录，无fid信息无法使用院校学号登录<br>2.如果需要使用学号登录，自己或许院校fid信息，并修改代码中的fid信息<br>3.如果首次登录提示错误，关闭程序再打开试试<br>4.如果抓不到课程信息什么的，可能需要自己查询html自己修改xpath</p><h1 id="帮助"><a href="#帮助" class="headerlink" title="帮助"></a>帮助</h1><p><a href="https://github.com/mengshouer/mooc_tools">https://github.com/mengshouer/mooc_tools</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>通过JS跳过青年大学习的实现原理</title>
      <link href="2020/06/46.html"/>
      <url>2020/06/46.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>富强、民主、文明、和谐，自由、平等、公正、法治， 爱国、敬业、诚信、友善。<br>富强、民主、文明、和谐，自由、平等、公正、法治， 爱国、敬业、诚信、友善。<br>富强、民主、文明、和谐，自由、平等、公正、法治， 爱国、敬业、诚信、友善。<br>爱我中华！！！！！！！！！！！！！！！！！</p></blockquote><a id="more"></a><hr><p><strong>青年大学习还是很有意义的，一定要自觉哦，这方法是为了那些真的有bug看了好几遍都失败的同学准备的，不要用来直接跳过完成任务</strong><br><strong>本教程只是技术交流，禁止谋取不正当利益</strong></p><hr><h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><p>1.当点击“开始学习”，客户端和服务器之间的请求是这样子的：</p><p>        <span class="lazyload-img-span">        <img              data-src="https://ae01.alicdn.com/kf/H6cd151b4bc184600a58c7029e7fc4a59d.jpg" >        </sapn>      </p><p>从这里可以看出，当开始看视频的时候，服务器发送了一个 xxx.mp4 的视频过来，这个就是我们要看的视频啦。然后神奇的事情发生了：<br><strong>直到看完，客户端都没有再返回数据到服务器</strong></p><p>这说明了：<br>当提交表单（填写个人信息）的那一刻，页面进行跳转的时候，服务器就已经接受到你在看视频的请求了，所以<strong>后台是不知道你看没看完的，当点击提交那一刻，你就已经被标记为看完了。</strong></p><p>2.后台记录是有了，可是截图呢？这里说说基于JavaScript来进行跳过视频的例子：</p><ul><li>主角1：getElementById() 方法</li><li><code>document.getElementById(id)</code></li></ul><blockquote><p>定义和用法：getElementById() 方法可返回对拥有指定 ID 的第一个对象的引用</p></blockquote><ul><li>主角2：currentTime 属性<pre><code>//将时间位置设置为 5 秒：myVid=document.getElementById(&quot;video1&quot;);myVid.currentTime=5;</code></pre></li></ul><blockquote><p>定义和用法:currentTime 属性设置或返回音频/视频播放的当前位置（以秒计）。当设置该属性时，播放会跳跃到指定的位置。</p></blockquote><p><strong>那么原理就很简单了，利用getElementById()获取到对应的视频对象，然后再设置currentTime实现定位视频位置（也就是拉进度条），就可以光速播放完了。</strong></p><p>3.确认后台记录了，也知道跳过视频的原理了，可是微信内置浏览器可不能调试啊？别急这里说最后一个原理——<em>给你的微信开启X5内核</em><br>什么是x5内核，官方的解释是这样子的：</p><blockquote><p>X5内核是腾讯基于优秀开源Webkit深度优化的浏览器渲染引擎，搭载在最新一代的手机QQ浏览器上，更快，更便捷。</p></blockquote><p>但是我们不管他，只要知道在这里，x5内核就是让你的微信浏览页面的时候，可以进行调试如在电脑上按f12一样的效果。<br>为什么要调试嘞？当然是为了运行命令啊！！</p><h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><ul><li><p>Step1 给你的微信装上X5内核</p></li><li><p>首先复制以下链接（放心，是腾讯提供的），发送到任意一个微信聊天界面，推荐文件传输服务就行，你要发好友也不是不可以。</p><pre><code>依次访问（看图）：第一 debugmm.qq.com/?forcex5=true 第二 http://debugtbs.qq.com 第三 http://debugx5.qq.com</code></pre><p>        <span class="lazyload-img-span">        <img              data-src="https://ae01.alicdn.com/kf/Hc182888057e647d0b2e3f14920a829dcS.jpg" >        </sapn>      </p></li><li><p>点击第一个链接，会提示<code>force use x5 switch is on</code> ，然后关掉</p></li><li><p>点击第二个链接，会开始下载x5内核，下载完成后会进入调试页面，长这样子：</p><p>        <span class="lazyload-img-span">        <img              data-src="https://ae01.alicdn.com/kf/H002a25b73c9347c1b1f0e1ec6c5232d74.jpg" >        </sapn>      </p></li><li><p>关掉调试页面，点击第三个链接进入X5调试页面，在信息页里点击开启vConsole调试功能，这个功能的作用就是可以让你的页面中进行调试代码，如下图：</p><p>        <span class="lazyload-img-span">        <img              data-src="https://ae01.alicdn.com/kf/Hb3ad3598d3894f1eaf35acb91e2c5ad1x.jpg" >        </sapn>      </p></li><li><p>Step2 执行代码</p></li><li><p>复制以下代码</p></li><li><p><code>document.getElementById(&#39;Bvideo&#39;).currentTime=300;</code></p></li><li><p>打开青年大学习的网页，填写好信息后点击开始学习，在视频播放的时候，点击左下角绿色的vConsole</p><p>        <span class="lazyload-img-span">        <img              data-src="https://ae01.alicdn.com/kf/H081646f8dbd84a7098b555e709180430y.jpg" >        </sapn>      </p></li><li><p>在打开的控制台中输入刚刚的代码，点击OK。</p><p>        <span class="lazyload-img-span">        <img              data-src="https://ae01.alicdn.com/kf/H050214992f374e6a9499fc06139c8281N.jpg" >        </sapn>      </p></li><li><p>完成，你学废了嘛？</p></li></ul><h1 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h1><p>1.如果不想答题把<code>document.getElementById(&#39;Bvideo&#39;).currentTime=300;</code>中的<code>300</code>这个数字往上调，不用担心系统检测部检测啥的，服务器只在提交信息表时有上传，也就是你的答案的正确与否，只有你自己知道。</p><p>2.点完三个连接后以后跳时不需要再填，只需要直接开始学习然后在控制台跳过就行啦。</p><p><strong>声明：</strong>上述方法没有任何不良危害，这都是在遵循这些网页框架下的操作，系统是和你正常完成一样的。本人也在用这个方法。<br><strong>当然：</strong>如果上面的方法用了还是觉得不够方便或者说没能实现，可以直接在手机的任务栏界面开启自动旋转，直接拉进度条，这个不管是安卓还是苹果都是可以的只不过方式不同。</p>]]></content>
      
      
      
        <tags>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>批改网解决“禁止粘贴”的几种方法</title>
      <link href="2020/05/45.html"/>
      <url>2020/05/45.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>今天上午考完试就沉浸在了过！的喜悦中，但是下午打开手机的备忘录却发现还有一篇作文还没写，在批改网上，慌啊，要到截止时间了！！！！<br>问题不大，还好有她。嗯…就当我拿到写完的作文后去打开批改网提交的时候，出现了下面这个令人不开心的弹窗。<br>        <span class="lazyload-img-span">        <img              data-src="https://ae01.alicdn.com/kf/H62965929a3314526a506ec7d35a4a21f4.jpg" >        </sapn>      </p></blockquote><p>啊！！！！！！！！！！！！难道让我手敲吗？不可能，这辈子都不可能！怎么办呢？安排他。</p><h1 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h1><p>移除监听事件即可开启<br>在浏览器中打开，鼠标右键选择检查，或者按快捷键F12打开调试窗口<br>点击Console<br>        <span class="lazyload-img-span">        <img              data-src="https://ae01.alicdn.com/kf/H890408c25c104ddeacf94b8688f092b7p.jpg" >        </sapn>      <br>输入以下代码：<br><code>$(&#39;#contents&#39;).unbind();</code><br>然后回车就可以复制粘贴啦！<br>        <span class="lazyload-img-span">        <img              data-src="https://ae01.alicdn.com/kf/H10e4c55695774063b8590a83395a42f4W.jpg" >        </sapn>      </p><h1 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h1><p>这种方法长期有效，除非作文批改网修改了标签的名字（这时候只需要修改相应的名字就好啦），增加一个可以粘贴的对话框，还是重复上面的步骤，在控制台（Console）输入一下代码：<br><code>$(&quot;#titleW&quot;).append(&#39;&lt;textarea id=&quot;rslyycm&quot; rows=&quot;100&quot; cols=&quot;50&quot;&gt;&lt;/textarea&gt;&#39;);</code><br>回车执行完之后会出现一个输入框，可以调整大小的输入框，将文章粘贴进去就好，然后执行下面的代码：<br><code>$(&quot;#contents&quot;).val($(&quot;#rslyycm&quot;).val());</code><br>按回车执行这样就ok啦！</p>]]></content>
      
      
      
        <tags>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>超简单个人网盘搭建教程，宝塔面板安装Cloudreve新版V3(Go版本)</title>
      <link href="2020/05/44.html"/>
      <url>2020/05/44.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>最近百度网盘方面政策开始收缩，很多朋友怨声载道，当是时，Cloudreve 的作者肝了六个月更新发布了v3版本，用 Go 语言重构了一遍，除了修复 V2 版本被诟病很多的 Bug 外，还增加了很多令人兴奋的新特性，关键是免费用呀，朋友们。</p></blockquote><h1 id="Cloudreve-新版V3特性"><a href="#Cloudreve-新版V3特性" class="headerlink" title="Cloudreve 新版V3特性"></a>Cloudreve 新版V3特性</h1><ul><li>☁️ 支持本机、从机、七牛、阿里云 OSS、腾讯云 COS、又拍云、OneDrive (包括世纪互联版) 作为存储端</li><li>📤 上传/下载 支持客户端直传，支持下载限速</li><li>💾 可对接 Aria2 离线下载</li><li>📚 在线 压缩/解压缩、多文件打包下载</li><li>💻 覆盖全部存储策略的 WebDAV 协议支持</li><li>⚡ 拖拽上传、目录上传、流式上传处理</li><li>🗃️ 文件拖拽管理</li><li>👩‍👧‍👦 多用户、用户组</li><li>🔗 创建文件、目录的分享链接，可设定自动过期</li><li>👁️‍🗨️ 视频、图像、音频、文本、Office 文档在线预览</li><li>🎨 自定义配色、黑暗模式、PWA 应用、全站单页应用</li><li>🚀 All-In-One 打包，开箱即用</li><li>🌈 … …</li></ul><h1 id="官方支持的网站和文档"><a href="#官方支持的网站和文档" class="headerlink" title="官方支持的网站和文档"></a>官方支持的网站和文档</h1><ul><li>官网：<a href="https://cloudreve.org/">https://cloudreve.org/</a></li><li>github：<a href="https://github.com/cloudreve/Cloudreve">https://github.com/cloudreve/Cloudreve</a></li><li>下载：<a href="https://github.com/cloudreve/Cloudreve/releases">https://github.com/cloudreve/Cloudreve/releases</a></li><li>安装文档：<a href="https://docs.cloudreve.org/getting-started/install">https://docs.cloudreve.org/getting-started/install</a></li><li>演示：<a href="https://demo.cloudreve.org/">https://demo.cloudreve.org</a></li></ul><h1 id="宝塔命令行输入代码查询内核参数"><a href="#宝塔命令行输入代码查询内核参数" class="headerlink" title="宝塔命令行输入代码查询内核参数"></a>宝塔命令行输入代码查询内核参数</h1><ul><li><code>arch</code><br>        <span class="lazyload-img-span">        <img              data-src="https://ae01.alicdn.com/kf/Haf1c3433d781486c8da75d21b5ea9fa6T.jpg" >        </sapn>      <br>输出结果x86_64代表amd64；aarch64代表arm64</li></ul><h1 id="下载链接处找到对应的版本-复制链接地址"><a href="#下载链接处找到对应的版本-复制链接地址" class="headerlink" title="下载链接处找到对应的版本,复制链接地址"></a>下载链接处找到对应的版本,复制链接地址</h1><p>        <span class="lazyload-img-span">        <img              data-src="https://ae01.alicdn.com/kf/H42c61ebfaed846fd95dc9c0fe2b419caF.jpg" >        </sapn>      </p><h1 id="宝塔安全添加5212端口"><a href="#宝塔安全添加5212端口" class="headerlink" title="宝塔安全添加5212端口"></a>宝塔安全添加5212端口</h1><p>        <span class="lazyload-img-span">        <img              data-src="https://ae01.alicdn.com/kf/H2346f47d81424c788ca82982125e3708N.jpg" >        </sapn>      </p><h1 id="宝塔命令行逐行执行以下命令，对应链接处改为自己复制的："><a href="#宝塔命令行逐行执行以下命令，对应链接处改为自己复制的：" class="headerlink" title="宝塔命令行逐行执行以下命令，对应链接处改为自己复制的："></a>宝塔命令行逐行执行以下命令，对应链接处改为自己复制的：</h1><p><em>（当然你也可以把下边的改成自己的然后全部复制黏贴就完事了）</em></p><pre><code>mkdir /www/wwwroot/cloudreve # 新建一个文件夹存放程序cd /www/wwwroot/cloudreve # 进入该文件夹wget https://github.com/cloudreve/Cloudreve/releases/download/3.0.0/cloudreve_3.0.0_linux_amd64.tar.gz # 下载你复制的链接tar -zxvf cloudreve_3.0.0_linux_amd64.tar.gz # 解压获取到的主程序chmod +x ./cloudreve # 赋予执行权限./cloudreve # 启动 Cloudreve</code></pre><h1 id="安装完成，保存账户和登录密码，务必保存该密码，测试登录"><a href="#安装完成，保存账户和登录密码，务必保存该密码，测试登录" class="headerlink" title="安装完成，保存账户和登录密码，务必保存该密码，测试登录"></a>安装完成，保存账户和登录密码，务必保存该密码，测试登录</h1><p>登录地址为服务器ip:5212，比如<a href="http://123.57.35.68:5212/">http://123.57.35.68:5212/</a><br>        <span class="lazyload-img-span">        <img              data-src="https://ae01.alicdn.com/kf/Hcdea7884bb1e48fa9809e367f91cea253.jpg" >        </sapn>      </p><h1 id="原文链接（拓展设置）"><a href="#原文链接（拓展设置）" class="headerlink" title="原文链接（拓展设置）"></a>原文链接（拓展设置）</h1><p><a href="https://www.dhzy.fun/archives/1811.html">https://www.dhzy.fun/archives/1811.html</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于OBS虚拟摄像头欺骗超星考试系统的原理与实现</title>
      <link href="2020/05/43.html"/>
      <url>2020/05/43.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>因为疫情的原因吧，这个学期开学是不存在的了，我们直接迎接考试吧！！！<br>这几天浏览网页的时候发现了这个消息–超星要出考试系统了，看着很厉害的样子。</p></blockquote><p>我们先到知乎这个帖子看看怎么回事然后加入讨论，讨论讨论这个几个大神提出的问题：<br><em>帖子链接<a href="https://www.zhihu.com/question/394116356">https://www.zhihu.com/question/394116356</a></em></p><ul><li>全国那么多人同时考试，超星的服务器崩溃怎么办？</li><li>那么多学生考试，有学生家里断电、断网、网络不稳定而自动交卷怎么办？</li><li>监控开麦克风吗？如果不开，有人监控电脑屏幕，在学生旁边念答案作弊怎么办？</li><li>家里熊孩子拔掉WIFI网线后系统自动交卷怎么办怎么办？学生是不是很冤，因此导致学生挂科，会不会导致学生暴打家里熊孩子，甚至引发家暴和刑事案件？</li></ul><p>个人感觉，这最后一个问题很是值得思考啊!!!!</p><p><strong>在此声明下，以下内容来源于网络，博主只是农夫山泉的搬运工（毕竟自己也是需要的嘛）</strong></p><h1 id="前言（废话）"><a href="#前言（废话）" class="headerlink" title="前言（废话）"></a>前言（废话）</h1><p>听闻超星更新智慧考试系统，一时间学生群体舆论哗然，超星那几张来源不明真假难辨的截图属实吓到了不少的后浪们，社交平台纷纷转发和中国青年报、共青团中央等团学媒体报道引发了一场现象级的大讨论。这一切的背后是人性的险恶还是道德的沦丧我们不得而知，然而等不及超星智慧考试系统正式官宣上线，各路网友已经开始了探索解决方案——只要思想不滑坡，方法总比困难多！</p><h1 id="原理与实现（1-0版本）"><a href="#原理与实现（1-0版本）" class="headerlink" title="原理与实现（1.0版本）"></a>原理与实现（1.0版本）</h1><p>首先我们基于网络上流传的几张超星智慧考试系统的图片来研究他是如何监控我们监考的。面对的几张不到2MB的图片，我翻来翻去一看这图片没有详细内容，歪歪斜斜的每个控件都写着人脸识别，动态监考的这八个字，我横竖睡不着，仔细看了半夜才从字缝里看出字来，满图片都写着八个字是”端正考风，严肃考纪！”作为新世纪的新新人类，没有长辈比我们更了解电子产品。我们都玩过与别人视频通话的把戏，录视频，拍照将自己的盛世美颜转达另一头使用电子产品的知己，而这一切的背后，我们都离不开一个东西，叫做色相头。色像头——罪恶根源的源头。</p><p>超星不是喜欢看脸吗？好，我们就如愿以偿给他一个“自己的脸”。所有的实时视频监控都仰赖于摄像头硬件设备的输入，改变一个视频输入源，利用obs studio软件建立一个虚拟的摄像头作为超星考试平台的视频输入源，对软件进行简单地调试和设置。提前录制好一个几十秒的考试姿势的视频，表情和动作完全模拟考试时的状态且符合超星智慧考试系统动态监控要求，然后循环播放！！！在考试过程中，超星将一直看到这样端正考试的我们。由于目前超星智慧考试系统还没推出，对声音是否有要求还不知道，声音输入源要么禁用，要么给它一个超星想要的声音，超星要什么，我们给什么，满足超星的一切“合理”的诉求。最后，考试加油！！！</p><h1 id="相关信息"><a href="#相关信息" class="headerlink" title="相关信息"></a>相关信息</h1><p>原文地址<a href="https://shimo.im/docs/8tdRgR38dqhjD6yr/read">https://shimo.im/docs/8tdRgR38dqhjD6yr/read</a><br>OBS下载地址<a href="https://obsproject.com/">https://obsproject.com/</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> daily </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>超星学习通自动答题脚本</title>
      <link href="2020/05/42.html"/>
      <url>2020/05/42.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>超星学习通助手自作者宣布停止维护后，我就慌了，还有好多课没看呢。心情沉闷，内心焦急，不知道该怎么办，不过恰巧我的手中还有几台母鸡没用，那就不妨自己整个题库吧。经过了一个星期的搭建与维护，目前来说，可以满足自己的日常所需了。今天就分享出来，拯救下大家。</p></blockquote><h1 id="脚本主要功能"><a href="#脚本主要功能" class="headerlink" title="脚本主要功能"></a>脚本主要功能</h1><p>自动挂机看尔雅MOOC，支持视频、音频、文档、图书自动完成，章节测验自动答题提交，支持自动切换任务点、挂机阅读时长、自动登录等，解除各类功能限制，开放自定义参数</p><h1 id="脚本代码（原作者wyn-我只是修改了题库接口）"><a href="#脚本代码（原作者wyn-我只是修改了题库接口）" class="headerlink" title="脚本代码（原作者wyn,我只是修改了题库接口）"></a>脚本代码（原作者wyn,我只是修改了题库接口）</h1><ul><li>油猴链接<a href="https://greasyfork.org/zh-CN/scripts/402536">https://greasyfork.org/zh-CN/scripts/402536</a></li><li>源代码<pre><code>// ==UserScript==// @name         超星网课助手(修改接口，查题可用)--致敬原作者wyn// @namespace    nawlgzs@163.com// @version      1.0.7// @description  自动挂机看尔雅MOOC，支持视频、音频、文档、图书自动完成，章节测验自动答题提交，支持自动切换任务点、挂机阅读时长、自动登录等，解除各类功能限制，开放自定义参数// @author       Vices// @match        *://*.chaoxing.com/*// @match        *://*.edu.cn/*// @connect      ydfq.52msr.cn// @run-at       document-end// @grant        unsafeWindow// @grant        GM_xmlhttpRequest// @grant        GM_setClipboard// @supportURL   https://greasyfork.org/zh-CN/scripts/402536// @license      MIT// ==/UserScript==</code></pre></li></ul><p>// 设置修改后，需要刷新或重新打开网课页面才会生效<br>var setting = {<br>    // 8E3 == 8000，科学记数法，表示毫秒数<br>    time: 8E3 // 默认响应速度为8秒，不建议小于5秒<br>    ,review: 0 // 复习模式，完整挂机视频(音频)时长，支持挂机任务点已完成的视频和音频，默认关闭<br>    ,queue: 1 // 队列模式，开启后任务点逐一完成，关闭则单页面所有任务点同时进行，默认开启</p><pre><code>// 1代表开启，0代表关闭,video: 1 // 视频支持后台、切换窗口不暂停，支持多视频，默认开启,work: 1 // 自动答题功能(章节测验)，作业需要手动开启查询，高准确率，默认开启,audio: 1 // 音频自动播放，与视频功能共享vol和rate参数，默认开启,book: 1 // 图书阅读任务点，非课程阅读任务点，默认开启,docs: 1 // 文档阅读任务点，PPT类任务点自动完成阅读任务，默认开启// 本区域参数，上方为任务点功能，下方为独立功能,jump: 1 // 自动切换任务点、章节、课程(需要配置course参数)，默认开启,read: &#39;65&#39; // 挂机课程阅读时间，单位是分钟，&#39;65&#39;代表挂机65分钟，请手动打开阅读页面，默认&#39;65&#39;分钟,face: 0 // 解除面部识别(不支持二维码类面部采集)，此功能仅为临时解除，默认关闭,total: 0 // 显示课程进度的统计数据，在学习进度页面的上方展示，默认关闭// 仅开启video(audio)时，修改此处才会生效,line: &#39;公网1&#39; // 视频播放的默认资源线路，此功能适用于系统默认线路无资源，默认&#39;公网1&#39;,http: &#39;标清&#39; // 视频播放的默认清晰度，无效参数则使用系统默认清晰度，默认&#39;标清&#39;// 本区域参数，上方为video功能独享，下方为audio功能共享,vol: &#39;0&#39; // 默认音量的百分数，设定范围：[0,100]，&#39;0&#39;为静音，默认&#39;0&#39;,rate: &#39;1&#39; // 视频播放默认倍率，参数范围0∪[0.0625,16]，&#39;0&#39;为秒过，默认&#39;1&#39;倍// 仅开启work时，修改此处才会生效,auto: 1 // 答题完成后自动提交，默认关闭,none: 1 // 无匹配答案时执行默认操作，关闭后若题目无匹配答案则会暂时保存已作答的题目，默认开启,scale: 0 // 富文本编辑器高度自动拉伸，用于文本类题目，答题框根据内容自动调整大小，默认关闭// 仅开启jump时，修改此处才会生效,course: 0 // 当前课程完成后自动切换课程，仅支持按照根目录课程顺序切换，默认开启,lock: 1 // 跳过未开放(图标是锁)的章节，即闯关模式或定时发放的任务点，默认开启// 自动登录功能配置区,school: &#39;账号为手机号可以不修改此参数&#39; // 学校/单位/机构码，要求完整有效可查询，例如&#39;清华大学&#39;,username: &#39;&#39; // 学号/工号/借书证号(邮箱/手机号/账号)，例如&#39;2018010101&#39;，默认&#39;&#39;,password: &#39;&#39; // 密码，例如&#39;123456&#39;，默认&#39;&#39;</code></pre><p>},<br>_self = unsafeWindow,<br>url = location.pathname,<br>top = _self;</p><p>if (url != ‘/studyApp/studying’ &amp;&amp; top != _self.top) document.domain = location.host.replace(/.+?./, ‘’);</p><p>try {<br>    while (top != _self.top) {<br>        top = top.parent.document ? top.parent : _self.top;<br>        if (top.location.pathname == ‘/mycourse/studentstudy’) break;<br>    }<br>} catch (err) {<br>    // console.log(err);<br>    top = _self;<br>}</p><p>var $ = _self.jQuery || top.jQuery,<br>parent = _self == top ? self : _self.parent,<br>Ext = _self.Ext || parent.Ext || {},<br>UE = _self.UE,<br>vjs = _self.videojs;</p><p>String.prototype.toCDB = function() {<br>    return this.replace(/\s/g, ‘’).replace(/[\uff01-\uff5e]/g, function(str) {<br>        return String.fromCharCode(str.charCodeAt(0) - 65248);<br>    }).replace(/[“”]/g, ‘“‘).replace(/[‘’]/g, “‘“).replace(/。/g, ‘.’);<br>};</p><p>setting.normal = ‘’; // ‘:visible’<br>// setting.time += Math.ceil(setting.time * Math.random()) - setting.time / 2;<br>setting.job = [‘:not(*)’];</p><p>setting.video &amp;&amp; setting.job.push(‘iframe[src*=”/video/index.html”]’);<br>setting.work &amp;&amp; setting.job.push(‘iframe[src*=”/work/index.html”]’);<br>setting.audio &amp;&amp; setting.job.push(‘iframe[src*=”/audio/index.html”]’);<br>setting.book &amp;&amp; setting.job.push(‘iframe[src*=”/innerbook/index.html”]’);<br>setting.docs &amp;&amp; setting.job.push(‘iframe[src*=”/ppt/index.html”]’, ‘iframe[src*=”/pdf/index.html”]’);</p><p>setting.tip = !setting.queue || top != _self &amp;&amp; jobSort($ || Ext.query);</p><p>if (url == ‘/mycourse/studentstudy’) {<br>    _self.checkMobileBrowerLearn = $.noop;<br>    var classId = location.search.match(/cla[zs]{2}id=(\d+)/i)[1] || 0,<br>    courseId = _self.courseId || location.search.match(/courseId=(\d+)/i)[1] || 0;<br>    setting.lock || $(‘#coursetree’).on(‘click’, ‘[onclick*=void], [href*=void]’, function() {<br>        _self.getTeacherAjax(courseId, classId, $(this).parent().attr(‘id’).slice(3));<br>    });<br>} else if (url == ‘/ananas/modules/video/index.html’ &amp;&amp; setting.video) {<br>    if (setting.review) _self.greenligth = Ext.emptyFn;<br>    checkPlayer(_self.supportH5Video());<br>} else if (url == ‘/work/doHomeWorkNew’ || url == ‘/api/work’ || url == ‘/work/addStudentWorkNewWeb’) {<br>    if (!UE) {<br>        var len = ($ || Ext.query || Array)(‘font:contains(未登录)’, document).length;<br>        setTimeout(len == 1 ? top.location.reload : parent.greenligth, setting.time);<br>    } else if (setting.work) {<br>        setTimeout(relieveLimit, 0);<br>        beforeFind();<br>    }<br>} else if (url == ‘/ananas/modules/audio/index.html’ &amp;&amp; setting.audio) {<br>    if (setting.review) _self.greenligth = Ext.emptyFn;<br>    _self.videojs = hookAudio;<br>    hookAudio.xhr = vjs.xhr;<br>} else if (url == ‘/ananas/modules/innerbook/index.html’ &amp;&amp; setting.book &amp;&amp; setting.tip) {<br>    setTimeout(function() {<br>        _self.setting ? _self.top.onchangepage(_self.getFrameAttr(‘end’)) : _self.greenligth();<br>    }, setting.time);<br>} else if (url.match(/^/ananas/modules/(ppt|pdf)/index.html$/) &amp;&amp; setting.docs &amp;&amp; setting.tip) {<br>    setTimeout(function() {<br>        _self.setting ? _self.finishJob() : _self.greenligth();<br>    }, setting.time);<br>    frameElement.setAttribute(‘download’, 1);<br>} else if (url == ‘/knowledge/cards’) {<br>    $ &amp;&amp; checkToNext();<br>} else if (url.match(/^/(course|zt)/\d+.html$/)) {<br>    setTimeout(function() {<br>        +setting.read &amp;&amp; _self.sendLogs &amp;&amp; $(‘.course_section:eq(0) .chapterText’).click();<br>    }, setting.time);<br>} else if (url == ‘/ztnodedetailcontroller/visitnodedetail’) {<br>    setting.read *= 60 / $(‘.course_section’).length;<br>    setting.read &amp;&amp; _self.sendLogs &amp;&amp; autoRead();<br>} else if (url == ‘/mycourse/studentcourse’) {<br>    var gv = location.search.match(/d=\d+&amp;/g);<br>    setting.total &amp;&amp; $(‘<a>‘, {<br>        href: ‘/moocAnalysis/chapterStatisticByUser?classI’ + gv[1] + ‘courseI’ + gv[0] + ‘userId=’ + _self.getCookie(‘_uid’) + ‘&amp;ut=s’,<br>        target: ‘_blank’,<br>        title: ‘点击查看章节统计’,<br>        style: ‘margin: 0 25px;’,<br>        html: ‘本课程共’ + $(‘.icon’).length + ‘节，剩余’ + $(‘em:not(.openlock)’).length + ‘节未完成’<br>    }).appendTo(‘.zt_logo’).parent().width(‘auto’);<br>} else if (url.match(/^/visit/(courses|interaction)$/)) {<br>    setting.face &amp;&amp; $(‘.zmodel’).on(‘click’, ‘[onclick^=openFaceTip]’, DisplayURL);<br>} else if (location.host.match(/^passport2/)) {<br>    setting.username &amp;&amp; getSchoolId();<br>} else if (location.hostname == ‘i.mooc.chaoxing.com’) {<br>    _self.layui.use(‘layer’, function() {<br>        this.layer.open({content: ‘拖动进度条、倍速播放、秒过会导致不良记录！题库在慢慢补充，搜不到的题目系统会在次日进行自动补充’, title: ‘超星网课助手提示’, btn: ‘我已知悉’, offset: ‘t’, closeBtn: 0});<br>    });<br>} else if (url == ‘/widget/pcvote/goStudentVotePage’) {<br>    $(‘:checked’).click();<br>    $(‘.StudentTimu’).each(function(index) {<br>        var ans = _self.questionlist[index].answer;<br>        $(‘:radio, :checkbox’, this).each(function(num) {<br>            ans[num].isanswer &amp;&amp; this.click();<br>        });<br>        $(‘:text’, this).val(function(num) {<br>            return $(ans[num].content).text().trim();<br>        });<br>    });<br>} else if (url == ‘/work/selectWorkQuestionYiPiYue’) {<br>    submitAnswer(getIframe().parent(), $.extend(true, [], parent._data));<br>}</p><p>function getIframe(tip, win, job) {<br>    if (!$) return Ext.get(frameElement || []).parent().child(‘.ans-job-icon’) || Ext.get([]);<br>    do {<br>        win = win ? win.parent : _self;<br>        job = $(win.frameElement).prevAll(‘.ans-job-icon’);<br>    } while (!job.length &amp;&amp; win.parent.frameElement);<br>    return tip ? win : job;<br>}</p><p>function jobSort($) {<br>    var fn = $.fn ? [getIframe(1), ‘length’] : [self, ‘dom’],<br>    sel = setting.job.join(‘, :not(.ans-job-finished) &gt; .ans-job-icon’ + setting.normal + ‘ ~ ‘);<br>    if ($(sel, fn[0].parent.document)[0] == fn[0].frameElement) return true;<br>    if (!getIframe()[fn[1]] || getIframe().parent().is(‘.ans-job-finished’)) return null;<br>    setInterval(function() {<br>        $(sel, fn[0].parent.document)[0] == fn[0].frameElement &amp;&amp; fn[0].location.reload();<br>    }, setting.time);<br>}</p><p>function checkPlayer(tip) {<br>    _self.videojs = hookVideo;<br>    hookVideo.xhr = vjs.xhr;<br>    Ext.isSogou = Ext.isIos = Ext.isAndroid = false;<br>    var data = Ext.decode(_self.config(‘data’)) || {};<br>    delete data.danmaku;<br>    data.doublespeed = 1;<br>    frameElement.setAttribute(‘data’, Ext.encode(data));<br>    if (tip) return;<br>    _self.supportH5Video = function() {return true;};<br>    alert(‘此浏览器不支持html5播放器，请更换浏览器’);<br>}</p><p>function hookVideo() {<br>    <em>self.alert = console.log;<br>    var config = arguments[1],<br>    line = Ext.Array.filter(Ext.Array.map(config.playlines, function(value, index) {<br>        return value.label == setting.line &amp;&amp; index;<br>    }), function(value) {<br>        return Ext.isNumber(value);<br>    })[0] || 0,<br>    http = Ext.Array.filter(config.sources, function(value) {<br>        return value.label == setting.http;<br>    })[0];<br>    config.playlines.unshift(config.playlines[line]);<br>    config.playlines.splice(line + 1, 1);<br>    config.plugins.videoJsResolutionSwitcher.default = http ? http.res : 360;<br>    config.plugins.studyControl.enableSwitchWindow = 1;<br>    config.plugins.timelineObjects.url = ‘/richvideo/initdatawithviewer?’;<br>    config.plugins.seekBarControl.enableFastForward = 1;<br>    if (!setting.queue) delete config.plugins.studyControl;<br>    // config.preload = setting.tip ? ‘auto’ : ‘none’;<br>    var player = vjs.apply(this, arguments),<br>    a = ‘<a href="https://d0.ananas.chaoxing.com/download/' + _self.config('objectid') + '" target="_blank">‘,<br>    img = ‘        <span class="lazyload-img-span">        <img              data-src="https://d0.ananas.chaoxing.com/download/e363b256c0e9bc5bd8266bf99dd6d6bb" >        </sapn>      ‘;<br>    player.volume(Math.round(setting.vol) / 100 || 0);<br>    Ext.get(player.controlBar.addChild(‘Button’).el</em>).setHTML(a + img + ‘</a>‘).dom.title = ‘下载视频’;<br>    player.on(‘loadstart’, function() {<br>        setting.tip &amp;&amp; this.play().catch(Ext.emptyFn);<br>        this.playbackRate(setting.rate &gt; 16 || setting.rate &lt; 0.0625 ? 1 : setting.rate);<br>    });<br>    player.one([‘loadedmetadata’, ‘firstplay’], function() {<br>        setting.two = setting.rate === ‘0’ &amp;&amp; setting.two &lt; 1;<br>        setting.two &amp;&amp; config.plugins.seekBarControl.sendLog(this.children_[0], ‘ended’, Math.floor(this.cache_.duration));<br>    });<br>    player.on(‘ended’, function() {<br>        Ext.fly(frameElement).parent().addCls(‘ans-job-finished’);<br>    });<br>    return player;<br>}</p><p>function hookAudio() {<br>    <em>self.alert = console.log;<br>    var config = arguments[1];<br>    config.plugins.studyControl.enableSwitchWindow = 1;<br>    config.plugins.seekBarControl.enableFastForward = 1;<br>    if (!setting.queue) delete config.plugins.studyControl;<br>    var player = vjs.apply(this, arguments),<br>    a = ‘<a href="https://d0.ananas.chaoxing.com/download/' + _self.config('objectid') + '" target="_blank">‘,<br>    img = ‘        <span class="lazyload-img-span">        <img              data-src="https://d0.ananas.chaoxing.com/download/e363b256c0e9bc5bd8266bf99dd6d6bb" >        </sapn>      ‘;<br>    player.volume(Math.round(setting.vol) / 100 || 0);<br>    player.playbackRate(setting.rate &gt; 16 || setting.rate &lt; 0.0625 ? 1 : setting.rate);<br>    Ext.get(player.controlBar.addChild(‘Button’).el_).setHTML(a + img + ‘</a>‘).dom.title = ‘下载音频’;<br>    player.on(‘loadeddata’, function() {<br>        setting.tip &amp;&amp; this.play().catch(Ext.emptyFn);<br>    });<br>    player.one(‘firstplay’, function() {<br>        setting.rate === ‘0’ &amp;&amp; config.plugins.seekBarControl.sendLog(this.children</em>[0], ‘ended’, Math.floor(this.cache_.duration));<br>    });<br>    player.on(‘ended’, function() {<br>        Ext.fly(frameElement).parent().addCls(‘ans-job-finished’);<br>    });<br>    return player;<br>}</p><p>function relieveLimit() {<br>    if (setting.scale) _self.UEDITOR_CONFIG.scaleEnabled = false;<br>    $.each(UE.instants, function() {<br>        var key = this.key;<br>        this.ready(function() {<br>            this.destroy();<br>            UE.getEditor(key);<br>        });<br>    });<br>}</p><p>function beforeFind() {<br>    setting.regl = parent.greenligth || $.noop;<br>    if ($.type(parent._data) == ‘array’) return setting.regl();<br>    setting.div = $(<br>        ‘<div style="border: 2px dashed rgb(0, 85, 68); width: 330px; position: fixed; top: 0; right: 0; z-index: 99999; background-color: rgba(70, 196, 38, 0.6); overflow-x: auto;">‘ +<br>            ‘<span style="font-size: medium;"></span>‘ +<br>            ‘<div style="font-size: medium;">正在搜索答案…</div>‘ +<br>            ‘<button style="margin-right: 10px;">暂停答题</button>‘ +<br>            ‘<button style="margin-right: 10px;">‘ + (setting.auto ? ‘取消本次自动提交’ : ‘开启本次自动提交’) + ‘</button>‘ +<br>            ‘<button style="margin-right: 10px;">重新查询</button>‘ +<br>            ‘<button>折叠面板</button>‘ +<br>            ‘<div style="max-height: 300px; overflow-y: auto;">‘ +<br>                ‘<table border="1" style="font-size: 12px;">‘ +<br>                    ‘<thead>‘ +<br>                        ‘<tr>‘ +<br>                            ‘<th style="width: 25px; min-width: 25px;">题号</th>‘ +<br>                            ‘<th style="width: 60%; min-width: 130px;">题目（点击可复制）</th>‘ +<br>                            ‘<th style="min-width: 130px;">答案（点击可复制）</th>‘ +<br>                        ‘</tr>‘ +<br>                    ‘</thead>‘ +<br>                    ‘<tfoot style="display: none;">‘ +<br>                        ‘<tr>‘ +<br>                            ‘<th colspan="3">答案提示框 已折叠</th>‘ +<br>                        ‘</tr>‘ +<br>                    ‘</tfoot>‘ +<br>                    ‘<tbody>‘ +<br>                        ‘<tr>‘ +<br>                            ‘<td colspan="3" style="display: none;"></td>‘ +<br>                        ‘</tr>‘ +<br>                    ‘</tbody>‘ +<br>                ‘</table>‘ +<br>            ‘</div>‘ +<br>        ‘</div>‘<br>    ).appendTo(‘body’).on(‘click’, ‘button, td’, function() {<br>        var len = $(this).prevAll(‘button’).length;<br>        if (this.nodeName == ‘TD’) {<br>            $(this).prev().length &amp;&amp; GM_setClipboard($(this).text());<br>        } else if (!$(this).siblings().length) {<br>            $(this).parent().text(‘正在搜索答案…’);<br>            setting.num++;<br>        } else if (len === 0) {<br>            if (setting.loop) {<br>                clearInterval(setting.loop);<br>                delete setting.loop;<br>                len = [‘已暂停搜索’, ‘继续答题’];<br>            } else {<br>                setting.loop = setInterval(findAnswer, setting.time);<br>                len = [‘正在搜索答案…’, ‘暂停答题’];<br>            }<br>            setting.div.children(‘div:eq(0)’).html(function() {<br>                return $(this).data(‘html’) || len[0];<br>            }).removeData(‘html’);<br>            $(this).html(len[1]);<br>        } else if (len == 1) {<br>            setting.auto = !setting.auto;<br>            $(this).html(setting.auto ? ‘取消本次自动提交’ : ‘开启本次自动提交’);<br>        } else if (len == 2) {<br>            parent.location.reload();<br>        } else if (len == 3) {<br>            setting.div.find(‘tbody, tfoot’).toggle();<br>        }<br>    }).find(‘table, td, th’).css(‘border’, ‘1px solid’).end();<br>    setting.lose = setting.num = 0;<br>    setting.data = parent._data = [];<br>    setting.over = ‘<button style="margin-right: 10px;">跳过此题</button>‘;<br>    setting.curs = $(‘script:contains(courseName)’, top.document).text().match(/courseName:&#39;(.+?)&#39;|$/)[1] || $(‘h1’).text().trim() || ‘无’;<br>    setting.loop = setInterval(findAnswer, setting.time);<br>    var tip = ({undefined: ‘任务点排队中’, null: ‘等待切换中’})[setting.tip];<br>    tip &amp;&amp; setting.div.children(‘div:eq(0)’).data(‘html’, tip).siblings(‘button:eq(0)’).click();<br>}</p><p>function findAnswer() {<br>    if (setting.num &gt;= $(‘.TiMu’).length) {<br>        var arr = setting.lose ? [‘共有 <font color="red">‘ + setting.lose + ‘</font> 道题目待完善（已深色标注）’, saveThis] : [‘答题已完成’, submitThis];<br>        setting.div.children(‘div:eq(0)’).data(‘html’, arr[0]).siblings(‘button:eq(0)’).hide().click();<br>        return setTimeout(arr[1], setting.time);<br>    }<br>    var $TiMu = $(‘.TiMu’).eq(setting.num),<br>    question = filterImg($TiMu.find(‘.Zy_TItle:eq(0) .clearfix’)).replace(/^【.<em>?】\s</em>/, ‘’).replace(/\s<em>（\d+.\d+分）$/, ‘’).replace(/[(]\s</em>[)]。$/,’’).replace(/（\s<em>）。$/,’’).replace(/[(]\s</em>[)]$/,’’).replace(/（\s*）$/,’’).replace(/。$/,’’),<br>    type = $TiMu.find(‘input[name^=answertype]:eq(0)’).val() || ‘-1’;</p><pre><code>//setting.div.children(&#39;div:eq(0)&#39;).text(encodeURIComponent(question)+&#39;正在搜索答案...&#39;);GM_xmlhttpRequest(&#123;    method: &#39;POST&#39;,    url: &#39;http://ydfq.52msr.cn/chati.php&#39;,    headers: &#123;        &#39;Content-type&#39;: &#39;application/x-www-form-urlencoded&#39;,    &#125;,    data: &#39;question=&#39; + encodeURIComponent(question),    timeout: setting.time,    onload: function(xhr) &#123;        if (!setting.loop) &#123;        &#125; else if (xhr.status == 200) &#123;            var obj = $.parseJSON(xhr.responseText.replace(/^操作数据失败！/,&#39;&#39;)) || &#123;&#125;;            obj.answer = obj.data;            if (obj.code) &#123;                setting.div.children(&#39;div:eq(0)&#39;).text(&#39;正在搜索答案...&#39;);                var td = &#39;&lt;td style=&quot;border: 1px solid;&#39;,                answer = String(obj.answer).replace(/&amp;/g, &#39;&amp;amp;&#39;).replace(/&lt;(?!img)/g, &#39;&amp;lt;&#39;);                obj.answer = /^http/.test(answer) ? &#39;&lt;img src=&quot;&#39; + obj.answer + &#39;&quot;&gt;&#39; : obj.answer;                $(                    &#39;&lt;tr&gt;&#39; +                        td + &#39; text-align: center;&quot;&gt;&#39; + $TiMu.find(&#39;.Zy_TItle:eq(0) i&#39;).text().trim() + &#39;&lt;/td&gt;&#39; +                        td + &#39;&quot; title=&quot;点击可复制&quot;&gt;&#39; + (question.match(&#39;&lt;img&#39;) ? question : question.replace(/&amp;/g, &#39;&amp;amp;&#39;).replace(/&lt;/g, &#39;&amp;lt&#39;)) + &#39;&lt;/td&gt;&#39; +                        td + &#39;&quot; title=&quot;点击可复制&quot;&gt;&#39; + (/^http/.test(answer) ? obj.answer : &#39;&#39;) + answer + &#39;&lt;/td&gt;&#39; +                    &#39;&lt;/tr&gt;&#39;                ).appendTo(setting.div.find(&#39;tbody&#39;)).css(&#39;background-color&#39;, fillAnswer($TiMu.find(&#39;ul:eq(0)&#39;).find(&#39;li&#39;), obj, type) ? &#39;&#39; : &#39;rgba(0, 150, 136, 0.6)&#39;);                setting.data[setting.num++] = &#123;                    code: obj.code &gt; 0 ? 1 : 0,                    question: question,                    option: obj.answer,                    type: Number(type)                &#125;;            &#125; else &#123;                setting.div.children(&#39;div:eq(0)&#39;).html(obj.answer || setting.over + &#39;服务器繁忙，正在重试...&#39;);            &#125;            setting.div.children(&#39;span&#39;).html(obj.msg || &#39;&#39;);        &#125; else if (xhr.status == 403) &#123;            var html = xhr.responseText.indexOf(&#39;&#123;&#39;) ? &#39;请求过于频繁，建议稍后再试&#39; : $.parseJSON(xhr.responseText).data;            setting.div.children(&#39;div:eq(0)&#39;).data(&#39;html&#39;, html).siblings(&#39;button:eq(0)&#39;).click();        &#125; else &#123;            setting.div.children(&#39;div:eq(0)&#39;).html(&#39;题库异常，明天再来试试吧...&#39;);        &#125;    &#125;,    ontimeout: function() &#123;        setting.loop &amp;&amp; setting.div.children(&#39;div:eq(0)&#39;).html(setting.over + &#39;服务器超时，正在重试...&#39;);    &#125;&#125;);</code></pre><p>}</p><p>function fillAnswer($li, obj, type) {<br>    var $input = $li.find(‘:radio, :checkbox’),<br>    str = String(obj.answer).toCDB() || new Date().toString(),<br>    data = str.split(/#|\x01||/),<br>    opt = obj.opt || str,<br>    state = setting.lose;<br>    // $li.find(‘:radio:checked’).prop(‘checked’, false);<br>    obj.code &gt; 0 &amp;&amp; $input.each(function(index) {<br>        if (this.value == ‘true’) {<br>            data.join().match(/(^|,)(正确|是|对|√|T|ri)(,|$)/) &amp;&amp; this.click();<br>        } else if (this.value == ‘false’) {<br>            data.join().match(/(^|,)(错误|否|错|×|F|wr)(,|$)/) &amp;&amp; this.click();<br>        } else {<br>            var tip = filterImg($li.eq(index).find(‘.after’)).toCDB() || new Date().toString();<br>            Boolean($.inArray(tip, data) + 1 || (type == ‘1’ &amp;&amp; str.indexOf(tip) + 1)) == this.checked || this.click();<br>        }<br>    }).each(function() {<br>        if (!/^A?B?C?D?E?F?G?$/.test(opt)) return false;<br>        Boolean(opt.match(this.value)) == this.checked || this.click();<br>    });<br>    if (type.match(/^[013]$/)) {<br>        $input.is(‘:checked’) || (setting.none ? ($input[Math.floor(Math.random() * $input.length)] || $()).click() : setting.lose++);<br>    } else if (type.match(/^(2|[4-9]|1[08])$/)) {<br>        data = String(obj.answer).split(/#|\x01||/);<br>        str = $li.end().find(‘textarea’).each(function(index) {<br>            index = (obj.code &gt; 0 &amp;&amp; data[index]) || ‘’;<br>            UE.getEditor(this.name).setContent(index.trim());<br>        }).length;<br>        (obj.code &gt; 0 &amp;&amp; data.length == str) || setting.none || setting.lose++;<br>    } else {<br>        setting.none || setting.lose++;<br>    }<br>    return state == setting.lose;<br>}</p><p>function saveThis() {<br>    if (!setting.auto) return setTimeout(saveThis, setting.time);<br>    setting.div.children(‘button:lt(3)’).hide().eq(1).click();<br>    _self.alert = console.log;<br>    $(‘#tempsave’).click();<br>    setting.regl();<br>}</p><p>function submitThis() {<br>    if (!setting.auto) {<br>    } else if (!$(‘.Btn_blue_1:visible’).length) {<br>        setting.div.children(‘button:lt(3)’).hide().eq(1).click();<br>        return setting.regl();<br>    } else if ($(‘#confirmSubWin:visible’).length) {<br>        var btn = $(‘#tipContent + * &gt; a’).offset() || {top: 0, left: 0},<br>        mouse = document.createEvent(‘MouseEvents’);<br>        btn = [btn.left + Math.ceil(Math.random() * 46), btn.top + Math.ceil(Math.random() * 26)];<br>        mouse.initMouseEvent(‘click’, true, true, document.defaultView, 0, 0, 0, btn[0], btn[1], false, false, false, false, 0, null);<br>        _self.event = $.extend(true, {}, mouse);<br>        delete _self.event.isTrusted;<br>        _self.form1submit();<br>    } else {<br>        $(‘.Btn_blue_1’)[0].click();<br>    }<br>    setTimeout(submitThis, Math.ceil(setting.time * Math.random()) * 2);<br>}</p><p>function checkToNext() {<br>    var $tip = $(setting.job.join(‘, ‘), document).prevAll(‘.ans-job-icon’ + setting.normal);<br>    setInterval(function() {<br>        $tip.parent(‘:not(.ans-job-finished)’).length || setting.jump &amp;&amp; toNext();<br>    }, setting.time);<br>}</p><p>function toNext() {<br>    var $cur = $(‘#cur’ + $(‘#chapterIdid’).val()),<br>    $tip = $(‘span.currents ~ span’),<br>    sel = setting.review ? ‘html’ : ‘.blue’;<br>    if (!$cur.has(sel).length &amp;&amp; $tip.length) return $tip.eq(0).click();<br>    $tip = $(‘.roundpointStudent, .roundpoint’).parent();<br>    $tip = $tip.slice($tip.index($cur) + 1).not(‘:has(‘ + sel + ‘)’);<br>    $tip.not(setting.lock ? ‘:has(.lock)’ : ‘html’).find(‘span’).eq(0).click();<br>    $tip.length || setting.course &amp;&amp; switchCourse();<br>}</p><p>function switchCourse() {<br>    GM_xmlhttpRequest({<br>        method: ‘GET’,<br>        url: ‘/visit/courses/study?isAjax=true&amp;fileId=0&amp;debug=’,<br>        headers: {<br>            ‘Referer’: location.origin + ‘/visit/courses’,<br>            ‘X-Requested-With’: ‘XMLHttpRequest’<br>        },<br>        onload: function(xhr) {<br>            var list = $(‘h3 a[target]’, xhr.responseText).map(function() {<br>                return $(this).attr(‘href’);<br>            }),<br>            index = list.map(function(index) {<br>                return this.match(top.courseId) &amp;&amp; index;<br>            }).filter(function() {<br>                return $.isNumeric(this);<br>            })[0] + 1 || 0;<br>            setting.course = list[index] ? goCourse(list[index]) : 0;<br>        }<br>    });<br>}</p><p>function goCourse(url) {<br>    GM_xmlhttpRequest({<br>        method: ‘GET’,<br>        url: url,<br>        onload: function(xhr) {<br>            $.globalEval(‘location.href = “‘ + $(‘.articlename a[href]’, xhr.responseText).attr(‘href’) + ‘“;’);<br>        }<br>    });<br>}</p><p>function autoRead() {<br>    $(‘html, body’).animate({<br>        scrollTop: $(document).height() - $(window).height()<br>    }, Math.round(setting.read) * 1E3, function() {<br>        $(‘.nodeItem.r i’).click();<br>    }).one(‘click’, ‘#top’, function(event) {<br>        $(event.delegateTarget).stop();<br>    });<br>}</p><p>function DisplayURL() {<br>    _self.WAY.box.hide();<br>    var $li = $(this).closest(‘li’);<br>    $.get(‘/visit/goToCourseByFace’, {<br>        courseId: $li.find(‘input[name=courseId]’).val(),<br>        clazzId: $li.find(‘input[name=classId]’).val()<br>    }, function(data) {<br>        $li.find(‘[onclick^=openFaceTip]’).removeAttr(‘onclick’).attr({<br>            target: ‘_blank’,<br>            href: $(data).filter(‘script:last’).text().match(/n(“(.+?)”/)[1]<br>        });<br>        alert(‘本课程已临时解除面部识别’);<br>    }, ‘html’);<br>}</p><p>function getSchoolId() {<br>    var school = /^1\d{10}$/.test(setting.username) ? ‘’ : setting.school;<br>    if (!isNaN(school)) return setTimeout(toLogin, setting.time, school);<br>    if (school == ‘账号为手机号可以不修改此参数’) return alert(‘请修改school参数’);<br>    $.getJSON(‘/org/searchUnis?filter=’ + encodeURI(school) + ‘&amp;product=44’, function(data) {<br>        if (!data.result) return alert(‘学校查询错误’);<br>        var msg = $.grep(data.froms, function(value) {<br>            return value.name == school;<br>        })[0];<br>        msg ? setTimeout(toLogin, setting.time, msg.schoolid) : alert(‘学校名称不完整’);<br>    });<br>}</p><p>function toLogin(fid) {<br>    GM_xmlhttpRequest({<br>        method: ‘GET’,<br>        url: ‘/api/login?name=’ + setting.username + ‘&amp;pwd=’ + setting.password + ‘&amp;schoolid=’ + fid + ‘&amp;verify=0’,<br>        onload: function(xhr) {<br>            var obj = $.parseJSON(xhr.responseText) || {};<br>            obj.result ? location.href = decodeURIComponent($(‘#ref, #refer_0x001’).val()) : alert(obj.errorMsg || ‘Error’);<br>        }<br>    });<br>}</p><p>function submitAnswer($job, data) {<br>    $job.removeClass(‘ans-job-finished’);<br>    data = data.length ? $(data) : $(‘.TiMu’).map(function() {<br>        var title = filterImg($(‘.Zy_TItle .clearfix’, this));<br>        return {<br>            question: title.replace(/^【.<em>?】\s</em>/, ‘’),<br>            type: ({单选题: 0, 多选题: 1, 填空题: 2, 判断题: 3})[title.match(/^【(.*?)】|$/)[1]]<br>        };<br>    });<br>    data = $.grep(data.map(function(index) {<br>        var $TiMu = $(‘.TiMu’).eq(index);<br>        if (!($.isPlainObject(this) &amp;&amp; this.type &lt; 4 &amp;&amp; $TiMu.find(‘.fr’).length)) {<br>            return false;<br>        } else if (this.type == 2) {<br>            var $ans = $TiMu.find(‘.Py_tk, .Py_answer’).eq(0);<br>            if (!$TiMu.find(‘.cuo’).length &amp;&amp; this.code) {<br>                return false;<br>            } else if (!$ans.find(‘.cuo’).length) {<br>                this.option = $ans.find(‘.clearfix’).map(function() {<br>                    return $(this).text().trim();<br>                }).get().join(‘#’) || ‘无’;<br>            } else if (this.code) {<br>                this.code = -1;<br>            } else {<br>                return false;<br>            }<br>        } else if (this.type == 3) {<br>            var ans = $TiMu.find(‘.font20:last’).text();<br>            if ($TiMu.find(‘.cuo’).length) {<br>                this.option = ({‘√’: ‘错误’, ‘×’: ‘正确’})[ans] || ‘无’;<br>            } else if (!this.code) {<br>                this.option = ({‘√’: ‘正确’, ‘×’: ‘错误’})[ans] || ‘无’;<br>            } else {<br>                return false;<br>            }<br>        } else {<br>            var text = $TiMu.find(‘.Py_answer &gt; span:eq(0)’).text();<br>            if ($TiMu.find(‘.dui’).length &amp;&amp; this.code &amp;&amp; !/^A?B?C?D?E?F?G?$/.test(this.option)) {<br>                return false;<br>            } else if ($TiMu.find(‘.dui’).length || text.match(‘正确答案’)) {<br>                text = text.match(/[A-G]/gi) || [];<br>                this.option = $.map(text, function(value) {<br>                    return filterImg($TiMu.find(‘.fl:contains(‘ + value + ‘) + a’));<br>                }).join(‘#’) || ‘无’;<br>                this.key = text.join(‘’);<br>            } else if (this.code) {<br>                this.code = -1;<br>            } else {<br>                return false;<br>            }<br>        }<br>        return this;<br>    }), function(value) {<br>        return value &amp;&amp; value.option != ‘无’;<br>    });<br>    setting.curs = $(‘script:contains(courseName)’, top.document).text().match(/courseName:&#39;(.+?)&#39;|$/)[1] || $(‘h1’).text().trim() || ‘无’;<br>    data.length &amp;&amp; GM_xmlhttpRequest({<br>        method: ‘POST’,<br>        url: ‘<a href="http://ydfq.52msr.cn/chati.php&#39;">http://ydfq.52msr.cn/chati.php&#39;</a>,<br>        headers: {<br>            ‘Content-type’: ‘application/x-www-form-urlencoded’,<br>        },<br>        data: ‘question=’ + encodeURIComponent(setting.curs) + ‘&amp;data=’ + encodeURIComponent((Ext.encode || JSON.stringify)(data)) + ‘&amp;id=’ + $(‘#jobid’).val().slice(5)<br>    });<br>    $job.addClass(‘ans-job-finished’);<br>}</p><p>function filterImg(dom) {<br>    return $(dom).clone().find(‘img[src]’).replaceWith(function() {<br>        return $(‘<p></p>‘).text(‘        <span class="lazyload-img-span">        <img              data-src="' + $(this).attr('src') + '" >        </sapn>      ‘);<br>    }).end().find(‘iframe[src]’).replaceWith(function() {<br>        return $(‘<p></p>‘).text(‘<iframe src="' + $(this).attr('src') + '"></irame>‘);<br>    }).end().text().trim();<br>}</p><pre><code># 后记如果没有你所需要的答案，你可以把课程名发送到邮箱nawlgzs@163.com我们会尽快收录服务器费用有我个人承担，题库具体使用时长暂不确定。服务器设置了安全策略，一分钟内访问12次以上就会触发。五分钟自动解封，惩罚规则是累计的**此题库仅用于分享给大家免费使用，请勿用于商业用途！**</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>有哪些是因为年轻才会犯的错误？</title>
      <link href="2020/05/41.html"/>
      <url>2020/05/41.html</url>
      
        <content type="html"><![CDATA[<p>1、对人性有过高的期望。</p><p>年轻人总是容易对人性有不切实际的期望,比如谈一次恋爱，自己付出了，对对方真心了，对方就会有多珍惜自己。</p><p>比如以前帮个别人，等自己出事了就觉得对方一定会帮自己。比如对方答应了自己- -件事，就以为对方绝对不会变卦。因为期望不切实际，自然容易受伤。</p><p>一个人的受伤程度等于他的期望和现实的距离。</p><p>2、对爱情有过高的期望。</p><p>年轻人总觉得爱情有多么多么的神圣，总觉得爱情可以解决他们人生中的种种问题。</p><p>然而，真的把爱情解剖一下，你会发现爱情可以很俗。女人足够漂亮，走到哪里都是真爱。</p><p>男人足够牛逼，走到哪里都会得到女人的崇拜。爱情是锦上添花而不是雪中送炭，那些把爱情放在第一-位,放在自己前面的人，总是吃亏的一方，总是被人嘲笑,被另一半看不起的人，这是这个世界上最大的讽刺。</p><p>3、太急于求成。</p><p>每个年轻.人都做过逆袭上清华，翻身上北大的梦，然而真正脚踏实地，把每一堂课听懂，每个知识点掌握，不浪费每一分钟的人少之又少。</p><p>大家看:重的都是结果，忽略的都是过程。然而没有正确的过程，好的结果只能是黄粱一梦。</p><p>4、喜欢怼人，和别人杠，纠缠。</p><p>年轻的时候，针尖对麦芒，别人说-句不开心的话就摆在脸.上。</p><p>别人说你一-句不是，你就要辩解回来。然而却不知道，老是做无畏的纠缠，只是暴露了自己缺少底气的沉稳。</p><p>5、不珍惜时间。</p><p>年轻的时候，真的不知道时间的宝贵，可以一觉睡到大中午，可以把大把的时间浪费在电子游戏上而不觉得心疼。</p><p>等到工作了，才发现，时间是如此的稀缺,如果把以前浪费的时间用来提升自己，自己可以变得多么优秀!</p><p>6、没有规划。</p><p>不仅仅不知道自己想做什么，很多人根本没有去思考这个问题，就是随波逐流，看别人考研就考研，看别人去考公务员就也凑个热闹。</p><p>于是他们不了解自己也不了解这个社会，等着出了社会，他们面临的是一-个又- -个坑,一条又- 条的弯路。很大一部分人的青春就浪费在弯路上了，等回过神来，青春已经过去了。</p><p>7、太重视利益,太轻视情义。</p><p>不少年轻人为了成功，为了资源，混迹于各个圈子，和各种成功人士在一起。然而他们忽视了和他们一-起吃，-起住的同窗，同龄的好友。</p><p>人生匆匆，如白驹过隙，你会发现，钱并不稀罕，可贵的是超越物质的情义。个只认利益的人是难以成大器的，因为关键的时候，他没有靠得住的人可以仰仗，没有可以不计较利益同舟共济的人。</p><p>8、对选择太过轻率。</p><p>在选择学校的时候，选择专业的时候，选择第一份工作的时候，选择另-半的时候，这些关乎你一辈子道路的选择上，年轻人实在是太过轻率，大部分人都是拍着自己的脑子就选择了，靠感觉就选了，没有做过任何细致的调研，也没有去咨询一下过来人，如此，选错才是大概率事件。很多事情- - 旦选错，就回不了头了。</p><p>9、藏不住事情。</p><p>遇到别人一点点温暖，及没有防备的倾诉，什么话都说，以为别人的关系和你有多好。</p><p>殊不知，你今天刚把秘密告诉别人，第二天就所有人都知道了。做人需要城府，需要能胸中藏得住秘密，这样才称得上沉稳，称得上成熟。</p>]]></content>
      
      
      
        <tags>
            
            <tag> daily </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>拦截数据包实现超星学习通APP考试安全切屏（新）</title>
      <link href="2020/05/40.html"/>
      <url>2020/05/40.html</url>
      
        <content type="html"><![CDATA[<h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><ul><li>适用平台：Android、iOS（未测试）</li><li>安装软件：AdGuard（Android）/ Fiddler（Win）</li><li>实现功能：超星学习通考试切屏（离开考试）记录不上报，老师端无记录。</li><li>底层原理：拦截数据包。</li></ul><p><strong>网页考试不存在任何检测，本文只针对客户端研究。</strong></p><blockquote><p>本文没什么技术含量，都是软件的基本操作。<br><code>请注意：可能超星更新了更多反人类的检测，所以在正式考试之前务必自行建课测试。</code></p></blockquote><p>由于学习通App考试页面为内嵌WebView，协议均为HTTP/HTTPS，于是我们可以很方便的使用代理/VPN方式拦截考试切屏上报请求，从而达到不可描述的目的。</p><a id="more"></a><p>[6月28日更新]<br>今天测试新版考试系统发现新增了上报接口<br>        <span class="lazyload-img-span">        <img              data-src="https://ae01.alicdn.com/kf/Ha5502212438a4b1999002996aad5e955b.jpg" >        </sapn>      <br>所以过滤规则需加上 <code>receiveExamLogs?eventType=3 receiveExamLogs?eventType=4</code></p><p>此处<code>eventType=1/2</code>未知，目测是上报作答记录和拍照采集之类，只需要拦截<code>eventType=3/4</code>的切屏上报即可</p><p>推荐使用iOS系统+Fiddler拦截，因为安卓7.0以上系统用户证书不被信任，HTTPS无法拦截，root可能比较繁琐或无法成功。</p><p><a href="https://blog.csdn.net/lylfv/article/details/87605997">iOS安装证书+配置教程点此</a></p><p>Fiddler设置：<code>receiveExamLogs?eventType=3 receiveExamLogs?eventType=4 exit-count</code><br>        <span class="lazyload-img-span">        <img              data-src="https://ae01.alicdn.com/kf/H9597154c6bbc4b07a23a72ec36e3fb0f0.jpg" >        </sapn>      <br>        <span class="lazyload-img-span">        <img              data-src="https://ae01.alicdn.com/kf/H2aec5d285a2e456991cd6847099a7609h.jpg" >        </sapn>      </p><h1 id="使用AdGuard拦截"><a href="#使用AdGuard拦截" class="headerlink" title="使用AdGuard拦截"></a>使用AdGuard拦截</h1><ul><li>安装AdGuard、安装HTTPS证书<br>        <span class="lazyload-img-span">        <img              data-src="https://ae01.alicdn.com/kf/Hfe2558a7c81f43d38271f596af451f6fK.jpg" >        </sapn>      <br>        <span class="lazyload-img-span">        <img              data-src="https://ae01.alicdn.com/kf/H8ac79b51ea5e4738bee3013f5e2602f8k.jpg" >        </sapn>      </li><li>配置过滤规则<br>左上角菜单 → 设置 → 内容拦截 → User Rules → 右下角+<br>        <span class="lazyload-img-span">        <img              data-src="https://ae01.alicdn.com/kf/H5be56d09e48c4e7587da90da29dd5e86l.jpg" >        </sapn>      <br>        <span class="lazyload-img-span">        <img              data-src="https://ae01.alicdn.com/kf/H9ae5fdbe0a9d475380ea96d730fbd322M.jpg" >        </sapn>      <br>        <span class="lazyload-img-span">        <img              data-src="https://ae01.alicdn.com/kf/Hae8f82a543cc4963a90b1558cda59c8dF.jpg" >        </sapn>      <br>        <span class="lazyload-img-span">        <img              data-src="https://ae01.alicdn.com/kf/H2336a692b5834404ac7dd4a51234926aO.jpg" >        </sapn>      <br>        <span class="lazyload-img-span">        <img              data-src="https://ae01.alicdn.com/kf/Hee330d1b0b3d4b77af76a67ab5b616fcc.jpg" >        </sapn>      <br>        <span class="lazyload-img-span">        <img              data-src="https://ae01.alicdn.com/kf/H952148e43adc43aeb0cf76dab3a154f5m.jpg" >        </sapn>      <br>输入过滤规则：<code>||mooc1-api.chaoxing.com/exam/phone/exit-count^</code></li><li>开启保护<br>右上角出现钥匙图标即可<br>        <span class="lazyload-img-span">        <img              data-src="https://ae01.alicdn.com/kf/H9130770cce2841ca94ef660dfdd4c7798.jpg" >        </sapn>      </li><li>实测效果<br>        <span class="lazyload-img-span">        <img              data-src="https://ae01.alicdn.com/kf/Ha2c5647887594ced927ee71475a0e123F.jpg" >        </sapn>      <br>        <span class="lazyload-img-span">        <img              data-src="https://ae01.alicdn.com/kf/He13f0697f032427d9e140b677f224d113.jpg" >        </sapn>      </li></ul><h1 id="使用Fiddler拦截"><a href="#使用Fiddler拦截" class="headerlink" title="使用Fiddler拦截"></a>使用Fiddler拦截</h1><ul><li>安装Fiddler，生成HTTPS证书，手机安装Fidder生成的HTTPS证书，手机WIFI设置HTTP代理服务器为电脑IP<blockquote><p>基本操作此处不赘述,自行百度</p></blockquote></li><li>设置滤器规则，设置断点模式<br><code>exit-count</code><br>        <span class="lazyload-img-span">        <img              data-src="https://ae01.alicdn.com/kf/H6923f6a779ba463a918011e0eabdeeb6P.jpg" >        </sapn>      <br>图中可看到切屏上报请求已被拦截。</li></ul><h1 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h1><p>拦截切屏上报后依旧会出现提醒，无需担心。<br>        <span class="lazyload-img-span">        <img              data-src="https://ae01.alicdn.com/kf/H42a0d7e18cfb44788888f30fa5b6ac50J.jpg" >        </sapn>      </p><h1 id="原文出处"><a href="#原文出处" class="headerlink" title="原文出处"></a>原文出处</h1><p><a href="http://www.zhmd5.com/a/51/">拦截数据包实现超星学习通APP考试安全切屏</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> knowledge </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>超星慕课小助手(cxmooc-tools)跑路 - 互联网怎么了？</title>
      <link href="2020/04/39.html"/>
      <url>2020/04/39.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>就在上周六，大学生一代的神器作者宣布停止脚本维护并且关停题库服务器。<br>不排除校领导钓鱼提问！！然后禁止抬杠！不要道德绑架！超星的网课什么水平，大家看不看自己心里肯定有数。看到这个声名的时候，我第一反应是 woc我捐钱！我给钱！求你了！类比pd吧，超星网课助手从大一陪伴到我即将考研，每当我教给别人怎么用这两个软件的时候，“牛逼啊！X哥！”之类的话也随之而来。说实话我接触脚本也是从这两个软件开始的，到现在装了很多便利的脚本。“清爽助手”“xx会员”“Bxlx下载”“护眼”等等。借用开发者的结尾吧，“送君千里，终须一别。今日的分别是为了明日更好的相聚。江湖再见“</p></blockquote><a id="more"></a><p>原文链接：<a href="https://www.cnblogs.com/licsber/p/cxmooc-tools.html">https://www.cnblogs.com/licsber/p/cxmooc-tools.html</a><br>互联网怎么了<br>起初没有人在意这场灾难，直到这灾难和每个人息息相关。</p><p>自pd作者被抓以来，各路服务纷纷跑路，真的想问一下，互联网到底怎么了？</p><p>我理解的互联网精神是自由，倡导一种“人人为我，我为人人”的信念。</p><p>有幸在我五岁那年第一次接触到了互联网，那时候流行MSN，当时注册之后都没人跟我聊天，然后接触到了qq，第一个qq网名还叫快乐小子，当时各种盗版qq横行，跟别人聊天可以看到对方ip或者透视隐身状态是那个时代的“炫酷操作”。</p><p>之后就是各种网页小游戏盛行，比如校内网“荣光医院”、种菜，QQ空间的农牧场、停车，之后就是经历了当年的3Q大战，打的是真狠。还有2345的流行，2345加速浏览器带来了真正的VOIP免费电话。</p><p>接下来是网盘满天飞的时代，经历了微盘倒闭、115逐渐爆炸，不过难以置信的是，那个年代分享外·挂用的ys168之类的网盘，到现在还可以正常使用，我刚刚在上面下到了我2012年上传的桌面雪花程序、造梦西游修改器和红警2部队修改器，吃惊。</p><p>然后接触到了VBS、再之后是VB、易语言，用着群里的教程写了第一个自己的dnf外·挂，因为全局冰冻打到树精图的时候树精疯狂加血，应该是加的太多了触发了封号机制，记得当时是5年还是20年，干脆弃坑，于是乎接下来除了mc和lol就没接触过其他网游，时间都留给了编程。</p><p>最后在52pojie上遇到更多大佬，接触rfid安全，在淘宝、闲鱼售卖了一段时间的相关硬件，免费提供自己编写的教程等等，接触看雪还有一些其他论坛，经历了乌云的倒闭，世纪佳缘事件。</p><p>下面记录一下跑路事件的经过吧，互联网的记忆是有限的，留在博客里，日后还能怀念一下。</p><p>        <span class="lazyload-img-span">        <img              data-src="https://cdn.nlark.com/yuque/0/2020/jpeg/737845/1587287411822-050aee36-a18a-4cc9-bd12-2814bc83a29d.jpeg" >        </sapn>      </p>]]></content>
      
      
      
        <tags>
            
            <tag> daily </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>百度云盘不限速下载神器 PanDownload 作者被抓获</title>
      <link href="2020/04/38.html"/>
      <url>2020/04/38.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>唉，这么好的技术为啥非要走上违法犯罪的道路上呢？金钱的诱惑就那么大吗？可惜了PanDownload这个神器了，以后又得享用百度云盘龟速下载了！唉！何必呢？</p></blockquote><p>据蓝点网消息：百度云盘不限速下载神器 PanDownload 作者被警察抓获，经查: 2017 年，犯罪嫌疑人在家中编写可以通过百度网盘官方服务器的客户端身份认证，实现以非会员权限突破百度网盘官方设定，高速下载“Pandownload”软件，并在互联网.上发布。期间犯罪嫌疑人租用网络服务器进行更新维护并发布接受捐赠的收款码，同时建立 QQ 群”，向进群人员收取 1 至 10 元不等的进群费，群内提供更稳定的“Pandownload”内测版本。截至案发,犯罪嫌疑人非法获利 30 万余元。</p><p>        <span class="lazyload-img-span">        <img              data-src="https://ae01.alicdn.com/kf/He9182f4892c04321b30d05045f7ea9e6Z.jpg" >        </sapn>      </p><p>目前实测 PanDownload 客户端已经无法打开和运行了</p><p>唉，这么好的技术为啥非要走上违法犯罪的道路上呢？金钱的诱惑就那么大吗？可惜了 PanDownload 这个神器了，以后又得享用百度云盘龟速下载了！唉！何必呢？</p>]]></content>
      
      
      
        <tags>
            
            <tag> daily </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>U校园听力识别（Ulistenhelper)使用文档及相关问题</title>
      <link href="2020/04/37.html"/>
      <url>2020/04/37.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>本程序完全使用Python开发，仅供学习和交流使用，切勿用于其他非法用途。否则后果自负。本人不负任何责任。</p></blockquote><p><strong>请查看新的文档 -&gt; <a href="https://gocos.cn/2020/07/51.html">Ulistenhelper - 基于腾讯云语音识别的U校园听力识别工具</a></strong></p><h1 id="开发由来"><a href="#开发由来" class="headerlink" title="开发由来"></a>开发由来</h1><p>本人刚开始学习python，是一名听力十级障碍患者，所以为了平时不挂科，检验自己自学的成果，写了这个小工具，第二点就是，我看U这个平台很不爽，非常喜欢套娃啊，之前写脚本就觉得很恶心。不过也感觉很。。。，嗯~总之就是写了这个程序了。用来拯救我，还有服务爱学(tou)习(lan)的大学生。</p><h1 id="程序用到的python库"><a href="#程序用到的python库" class="headerlink" title="程序用到的python库"></a>程序用到的python库</h1><p>1.腾讯云python SDK<br>2.resquests<br>3.json<br>4.time<br>5.pyinstaller</p><h1 id="程序界面"><a href="#程序界面" class="headerlink" title="程序界面"></a>程序界面</h1><p>由于刚学吗，UI啥的还没接触。界面丑陋。<br>        <span class="lazyload-img-span">        <img              data-src="https://ae01.alicdn.com/kf/Hd7fd71395e46465ab2388338228042b5x.png" >        </sapn>      </p><h1 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h1><p>1.获取QQ群机器人的webhook地址——<a href="https://gocos.cn/2020/04/36.html">获取教程</a> 已经没用了<br>2.抓取听力音频——<a href="https://gocos.cn/2020/04/34.html">获取教程</a><br>3.QQ群查看识别内容</p><h1 id="感谢"><a href="#感谢" class="headerlink" title="感谢"></a>感谢</h1><p>腾讯云提供的API服务<br>腾讯Hoo!k机器人服务</p><h1 id="问题解答"><a href="#问题解答" class="headerlink" title="问题解答"></a>问题解答</h1><p>测试中，暂无问题，后期会更新</p>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hoo!k机器人进群与获取webhook教程</title>
      <link href="2020/04/36.html"/>
      <url>2020/04/36.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>   webhooks是一个api概念，是微服务api的使用范式之一，也被成为反向api，即：前端不主动发送请求，完全由后端推送。 举个常用例子，比如你的好友发了一条朋友圈，后端将这条消息推送给所有其他好友的客户端，就是 Webhooks 的典型场景。<br>　　简单来说，WebHook就是一个接收HTTP POST（或GET，PUT，DELETE）的URL。一个实现了WebHook的API提供商就是在当事件发生的时候会向这个配置好的URL发送一条信息。与请求-响应式不同，使用WebHooks，你可以实时接受到变化。</p></blockquote><p>那么，我么如何将Hoo!k机器人添加到群里，并获取webhook呢？</p><p>1.请将下面QQ号<code>2854196399</code>先发到你管理或者你创建的群<br>2.点击qq号，将机器人添加到你的群，然后打开消息推送，并且选择推送消息那里的已设置。<br>        <span class="lazyload-img-span">        <img              data-src="https://ae01.alicdn.com/kf/H93ef214d90da43df97cbcaa32621d015t.jpg" >        </sapn>      <br>        <span class="lazyload-img-span">        <img              data-src="https://ae01.alicdn.com/kf/Hdc67330127b94deb9633a61b07a08d42x.jpg" >        </sapn>      <br>        <span class="lazyload-img-span">        <img              data-src="https://ae01.alicdn.com/kf/H96927892e6a84ac290ec36dd934797efj.jpg" >        </sapn>      <br>3.接下来选择生成接口复制 key= 后面的参数记录保存，千万不可泄露接下来选择生成接口复制 key= 后面的参数记录保存，千万不可泄露<br>4.获取完成</p>]]></content>
      
      
      
        <tags>
            
            <tag> knowledge </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用Cloudflare CDN 如何自定义节点（CF自选IP）</title>
      <link href="2020/04/35.html"/>
      <url>2020/04/35.html</url>
      
        <content type="html"><![CDATA[<p>具体步骤就不说了,大概就是用Cloudflare的CDN以CNAME别名方式解析,然后到各种智能dns里面a到节点就ok了(利用A记录进行负载均衡)</p><p>接入CF之后，CF会给域名分配一个入口IP，一般是美西洛杉矶那边的。这个IP其实是采用的AnyCast技术，当用户访问到时候，会就近分配一个真实的节点IP，以加快访问速度。</p><p>访问：http://{节点IP/域名}/cdn-cgi/trace。比如要查看访客的真实IP ，则访问 HTTPS://<a href="http://www.ily.plus/cdn-cgi/trace">www.ily.plus/cdn-cgi/trace</a></p><p> </p><p>需要用到的东西：<br>CF:<code>www.cloudflare.com</code></p><p>cfp（Cloudflare合作伙伴）<br>推荐笨牛:<code>http://cdn.bnxb.com</code> </p><p>稳定很长时间的: <code>https://cf.tlo.xyz/</code></p><p>萌精灵 <code>https://cdn.moeelf.com/</code></p><p>智能解析 国内随便选 建议dnspod/dnsdun/dnsla</p><p>都比较不错 因为这三家支持智能三网/四网解析 外加搜索引擎百度等单独解析</p><h2 id="下面说一下IP段-这里面有一个思想就是需要自己添加后不断去优化-也就是用各种ping命令检查一下-把延迟比较高的换掉"><a href="#下面说一下IP段-这里面有一个思想就是需要自己添加后不断去优化-也就是用各种ping命令检查一下-把延迟比较高的换掉" class="headerlink" title="下面说一下IP段,这里面有一个思想就是需要自己添加后不断去优化! 也就是用各种ping命令检查一下,把延迟比较高的换掉"></a>下面说一下IP段,这里面有一个思想就是需要自己添加后不断去优化! 也就是用各种ping命令检查一下,把延迟比较高的换掉</h2><p>CloudFlare的节点：国内速较快的IP段：</p><p>（联通移动推荐节点）</p><p><code>104.23.240.0-104.23.243.254</code></p><p>（电信推荐CloudFlare 百度云合作 ip）</p><pre><code>162.159.208.4-162.159.208.103162.159.209.4-162.159.209.103162.159.210.4-162.159.210.103162.159.211.4-162.159.211.103</code></pre><p>各线路推荐列表：<br>电信：推荐走圣何塞，例：<code>104.16.160.*</code> 或者上面的百度云合作 ip。<br>移动：推荐走移动香港，例：<code>172.64.32.*、141.101.115.*</code> 或者 <code>104.23.240.0-104.23.243.254</code>。<br>联通：没发布什么好线路，可走圣何塞。例：<code>104.16.160.*</code> 或者 <code>104.23.240.0-104.23.243.254</code>。也可以试一下走亚特兰大 <code>108.162.236.*</code>（日前不可用。） 。</p><p>延迟和速度不错，IP地址：<code>162.159.211.3-162.159.211.103</code></p><p>移动很不错：<code>198.41.214.162</code></p><pre><code>162.158.26.1172.68.144.1172.69.152.1104.19.195.151104.18.177.69104.25.176.1</code></pre><p>可以设置用于 移动网络</p><pre><code>108.162.227.1162.158.4.1172.69.152.1</code></pre><p>可以设置用于 联通网络</p><pre><code>162.158.116.1108.162.226.1</code></pre><p>可以设置用于 默认网络</p><pre><code>172.68.32.1108.162.243.1108.162.245.1108.162.246.1172.68.172.1</code></pre><p>可以设置用于 电信网络</p><p>官方列表：CloudFlare公开的节点</p><p>某博主找到了一批CF亚洲节点，再通过实测最终得出了3个ping值很低（100ms以内）的节点IP：</p><p><code>202.86.161.100</code>（澳门）、<code>27.102.67.84</code>（韩国）、<code>23.61.246.100</code>（台湾，速度略慢，但相对其他节点亚洲又好那么一丢丢）。未测试</p>]]></content>
      
      
      
        <tags>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>U校园获取听力音频教程</title>
      <link href="2020/04/34.html"/>
      <url>2020/04/34.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>今天下午成功的把识别程序写完了，不过这次并没有使用百度提供的服务，对，但现在为止，我还没有解决pcm的问题，在这里还是想请大佬指点一下，毕竟是新手，我还是有自知之明的。那么问题又来了，我这次用的是什么呢，嘿嘿，这次我选择了腾讯云的语音识别，它可以直接识别MP3格式的音频，当然，更加吸引人的是，它可以跨域识别。这就大大提高了效率。万事俱备，只欠东风。接下来我就来说一说如何获取听力音频。</p></blockquote><a id="more"></a><h1 id="利用浏览器工具获取"><a href="#利用浏览器工具获取" class="headerlink" title="利用浏览器工具获取"></a>利用浏览器工具获取</h1><p>1.登陆U校园<br>2.进入听力<br>3.鼠标点击<code>右键</code>,选择检查，会出现面情况<br>        <span class="lazyload-img-span">        <img              data-src="https://ae01.alicdn.com/kf/Hf33b7717b86046a2b05f081505070009I.png" >        </sapn>      <br>4.我们按照下图中的操作来做<br>        <span class="lazyload-img-span">        <img              data-src="https://ae01.alicdn.com/kf/H99a081b23139472f8c1a9316223f00e5h.png" >        </sapn>      <br>        <span class="lazyload-img-span">        <img              data-src="https://ae01.alicdn.com/kf/H54f6cd9618ca4471818e1fa52d787c4fW.png" >        </sapn>      <br>5.我们把链接复制下来就可以了，例如这题的听力音频就为：<br><code>https://ucampus.cdn.unipus.cn/uexercise/quesres/hearmp3/b_320/t_102/201511/wrbchf_17094343468.mp3</code><br>6.获取结束</p><h1 id="利用抓包工具获取"><a href="#利用抓包工具获取" class="headerlink" title="利用抓包工具获取"></a>利用抓包工具获取</h1><p>什么是抓包工具我就不说了，不懂得自行百度，这里我们用Fiddler进行演示</p><p>1.登陆U校园<br>2.进入听力<br>3.打开抓包工具<br>        <span class="lazyload-img-span">        <img              data-src="https://ae01.alicdn.com/kf/H2da6ce63939349cab1ff0a6721c4a9d7S.png" >        </sapn>      <br>4.点击播放听力的按钮<br>5.看抓包工具找音频连接<br>        <span class="lazyload-img-span">        <img              data-src="https://ae01.alicdn.com/kf/Head32162446a4d3780bd4b7da1d2941eQ.png" >        </sapn>      <br>6.复制链接，结束</p><p>好，今天就说这两种方法。</p>]]></content>
      
      
      
        <tags>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python语音识别折腾记</title>
      <link href="2020/04/33.html"/>
      <url>2020/04/33.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>今天好不容易休息半天，但是又被英语作业给折服了，就上一次<a href="https://gocos.cn/2020/03/29.html">U校园半自动化</a>造福大学生之后，就有这么一个想法，是什么呢？<br>就是能不能把听力的内容识别出来，变成文本。这样就可以看听力文本了，那答题岂不是很简单？<br>ok，废话不多说，下面就来介绍下自己的折腾日记和遇到的问题</p></blockquote><h1 id="抓包"><a href="#抓包" class="headerlink" title="抓包"></a>抓包</h1><p>我们第一步要做的就是拿到听力文件，怎么拿呢？——抓包<br>由于过于简单，我只说大概步骤，具体百度<br><code>登陆——进入听力测验——按F12打开开发者工具——点击音频播放按钮——看工具里的最后一个资源——双击该资源进入——下载音频</code></p><h1 id="音频格式转换"><a href="#音频格式转换" class="headerlink" title="音频格式转换"></a>音频格式转换</h1><p>我们拿到的音频格式是MP3格式的，按照<a href="https://ai.baidu.com/ai-doc/SPEECH/Vk38lxily">百度语音识别的文档</a>来说支持音频格式：pcm、wav、amr、m4a的音频，<br>当然我在这里卡住了，用格式工厂转码后进行识别会报错，由于格式工厂没有pcm格式，所以我在这里纠结怎么转换，当然百度也给出了<a href="https://ai.baidu.com/ai-doc/SPEECH/7k38lxpwf">转换方法</a><br>我这里还没研究明白，恳请大佬指点，下面我们只能用百度提供的示例音频做演示了QAQ</p><h1 id="在百度智能云开通服务"><a href="#在百度智能云开通服务" class="headerlink" title="在百度智能云开通服务"></a>在百度智能云开通服务</h1><p>1.登陆<a href="https://login.bce.baidu.com/?account=&redirect=http://console.bce.baidu.com/">百度智能云</a><br>2.        <span class="lazyload-img-span">        <img              data-src="https://s1.ax1x.com/2020/04/09/G5RH6H.png" >        </sapn>      <br>3.        <span class="lazyload-img-span">        <img              data-src="https://ae01.alicdn.com/kf/H2c23f18f5055486ab6756f3fb584498ei.png" >        </sapn>      <br>4.        <span class="lazyload-img-span">        <img              data-src="https://ae01.alicdn.com/kf/Hba63e7bd6da14287a237bf5504f519eb2.png" >        </sapn>      <br>5.        <span class="lazyload-img-span">        <img              data-src="https://ae01.alicdn.com/kf/H9b980f96caea4f60913b8cef7d2c4742i.png" >        </sapn>      <br>6.        <span class="lazyload-img-span">        <img              data-src="https://ae01.alicdn.com/kf/H43e62f8f01f94c3e97bf74740a61cd08o.png" >        </sapn>      <br>7.创建成功后，我们就会获得api-key,secret-key（后面会用到）<br>        <span class="lazyload-img-span">        <img              data-src="https://ae01.alicdn.com/kf/H7bd399a826824546bbddf77b6ac324d6a.png" >        </sapn>      </p><h1 id="开始在python构造请求"><a href="#开始在python构造请求" class="headerlink" title="开始在python构造请求"></a>开始在python构造请求</h1><p>这里我们直接使用百度提供的<a href="https://github.com/Baidu-AIP/speech-demo/tree/master/rest-api-asr/python">DEMO</a>,然后自己做一些修改</p><ul><li><p>安装依赖库(利用pip,不懂请自行百度)</p></li><li><p><code>pip install baidu-aip</code> # 百度语音识别Python SDK</p></li><li><p><code>pip install urllib</code> # 网页请求库</p></li><li><p>开始构造代码（注意看注释）</p><pre><code># coding=utf-8</code></pre></li></ul><h1 id="引入所需库"><a href="#引入所需库" class="headerlink" title="引入所需库"></a>引入所需库</h1><p>import sys<br>import json<br>import base64<br>import time</p><p>IS_PY3 = sys.version_info.major == 3</p><p>if IS_PY3:<br>    from urllib.request import urlopen<br>    from urllib.request import Request<br>    from urllib.error import URLError<br>    from urllib.parse import urlencode<br>    timer = time.perf_counter<br>else:<br>    from urllib2 import urlopen<br>    from urllib2 import Request<br>    from urllib2 import URLError<br>    from urllib import urlencode<br>    if sys.platform == “win32”:<br>        timer = time.clock<br>    else:<br>        # On most other platforms the best timer is time.time()<br>        timer = time.time</p><h1 id="设置api-key-secret-key-此数据在上文有提及"><a href="#设置api-key-secret-key-此数据在上文有提及" class="headerlink" title="设置api-key,secret-key  此数据在上文有提及"></a>设置api-key,secret-key  此数据在上文有提及</h1><p>API_KEY = ‘你的api-key’<br>SECRET_KEY = ‘你的secret-key’</p><h1 id="需要识别的文件-audio-16k-pcm为音频文件路径，例如在D盘，那就是D-audio-16k-pcm"><a href="#需要识别的文件-audio-16k-pcm为音频文件路径，例如在D盘，那就是D-audio-16k-pcm" class="headerlink" title="需要识别的文件  ./audio/16k.pcm为音频文件路径，例如在D盘，那就是D:/audio/16k.pcm"></a>需要识别的文件  ./audio/16k.pcm为音频文件路径，例如在D盘，那就是D:/audio/16k.pcm</h1><p>AUDIO_FILE = ‘./audio/16k.pcm’  # 只支持 pcm/wav/amr 格式，极速版额外支持m4a 格式</p><h1 id="文件格式"><a href="#文件格式" class="headerlink" title="文件格式"></a>文件格式</h1><p>FORMAT = AUDIO_FILE[-3:]  # 文件后缀只支持 pcm/wav/amr 格式，极速版额外支持m4a 格式</p><h1 id="电脑mac地址，个人感觉没用，默认即可"><a href="#电脑mac地址，个人感觉没用，默认即可" class="headerlink" title="电脑mac地址，个人感觉没用，默认即可"></a>电脑mac地址，个人感觉没用，默认即可</h1><p>CUID = ‘123456PYTHON’</p><h1 id="采样率"><a href="#采样率" class="headerlink" title="采样率"></a>采样率</h1><p>RATE = 16000  # 固定值</p><h1 id="普通版"><a href="#普通版" class="headerlink" title="普通版"></a>普通版</h1><p>DEV_PID = 1537  # 1537 表示识别普通话，使用输入法模型。根据文档填写PID，选择语言及识别模型<br>ASR_URL = ‘<a href="http://vop.baidu.com/server_api&#39;">http://vop.baidu.com/server_api&#39;</a><br>SCOPE = ‘audio_voice_assistant_get’  # 有此scope表示有asr能力，没有请在网页里勾选，非常旧的应用可能没有</p><p>#测试自训练平台需要打开以下信息， 自训练平台模型上线后，您会看见 第二步：“”获取专属模型参数pid:8001，modelid:1234”，按照这个信息获取 dev_pid=8001，lm_id=1234</p><h1 id="DEV-PID-8001"><a href="#DEV-PID-8001" class="headerlink" title="DEV_PID = 8001 ;"></a>DEV_PID = 8001 ;</h1><h1 id="LM-ID-1234"><a href="#LM-ID-1234" class="headerlink" title="LM_ID = 1234 ;"></a>LM_ID = 1234 ;</h1><h1 id="极速版-打开注释的话请填写自己申请的appkey-appSecret-，并在网页中开通极速版（开通后可能会收费）"><a href="#极速版-打开注释的话请填写自己申请的appkey-appSecret-，并在网页中开通极速版（开通后可能会收费）" class="headerlink" title="极速版 打开注释的话请填写自己申请的appkey appSecret ，并在网页中开通极速版（开通后可能会收费）"></a>极速版 打开注释的话请填写自己申请的appkey appSecret ，并在网页中开通极速版（开通后可能会收费）</h1><h1 id="DEV-PID-80001"><a href="#DEV-PID-80001" class="headerlink" title="DEV_PID = 80001"></a>DEV_PID = 80001</h1><h1 id="ASR-URL-‘http-vop-baidu-com-pro-api-39"><a href="#ASR-URL-‘http-vop-baidu-com-pro-api-39" class="headerlink" title="ASR_URL = ‘http://vop.baidu.com/pro_api&#39;"></a>ASR_URL = ‘<a href="http://vop.baidu.com/pro_api&#39;">http://vop.baidu.com/pro_api&#39;</a></h1><h1 id="SCOPE-‘brain-enhanced-asr’-有此scope表示有极速版能力，没有请在网页里开通极速版"><a href="#SCOPE-‘brain-enhanced-asr’-有此scope表示有极速版能力，没有请在网页里开通极速版" class="headerlink" title="SCOPE = ‘brain_enhanced_asr’  # 有此scope表示有极速版能力，没有请在网页里开通极速版"></a>SCOPE = ‘brain_enhanced_asr’  # 有此scope表示有极速版能力，没有请在网页里开通极速版</h1><h1 id="忽略scope检查，非常旧的应用可能没有"><a href="#忽略scope检查，非常旧的应用可能没有" class="headerlink" title="忽略scope检查，非常旧的应用可能没有"></a>忽略scope检查，非常旧的应用可能没有</h1><h1 id="SCOPE-False"><a href="#SCOPE-False" class="headerlink" title="SCOPE = False"></a>SCOPE = False</h1><p>class DemoError(Exception):<br>    pass</p><p>“””  TOKEN start “””</p><p>TOKEN_URL = ‘<a href="http://openapi.baidu.com/oauth/2.0/token&#39;">http://openapi.baidu.com/oauth/2.0/token&#39;</a></p><p>def fetch_token():<br>    params = {‘grant_type’: ‘client_credentials’,<br>              ‘client_id’: API_KEY,<br>              ‘client_secret’: SECRET_KEY}<br>    post_data = urlencode(params)<br>    if (IS_PY3):<br>        post_data = post_data.encode( ‘utf-8’)<br>    req = Request(TOKEN_URL, post_data)<br>    try:<br>        f = urlopen(req)<br>        result_str = f.read()<br>    except URLError as err:<br>        print(‘token http response http code : ‘ + str(err.code))<br>        result_str = err.read()<br>    if (IS_PY3):<br>        result_str =  result_str.decode()</p><pre><code>print(result_str)result = json.loads(result_str)print(result)if (&#39;access_token&#39; in result.keys() and &#39;scope&#39; in result.keys()):    print(SCOPE)    if SCOPE and (not SCOPE in result[&#39;scope&#39;].split(&#39; &#39;)):  # SCOPE = False 忽略检查        raise DemoError(&#39;scope is not correct&#39;)    print(&#39;SUCCESS WITH TOKEN: %s  EXPIRES IN SECONDS: %s&#39; % (result[&#39;access_token&#39;], result[&#39;expires_in&#39;]))    return result[&#39;access_token&#39;]else:    raise DemoError(&#39;MAYBE API_KEY or SECRET_KEY not correct: access_token or scope not found in token response&#39;)</code></pre><p>“””  TOKEN end “””</p><p>if <strong>name</strong> == ‘<strong>main</strong>‘:<br>    token = fetch_token()</p><pre><code>speech_data = []with open(AUDIO_FILE, &#39;rb&#39;) as speech_file:    speech_data = speech_file.read()length = len(speech_data)if length == 0:    raise DemoError(&#39;file %s length read 0 bytes&#39; % AUDIO_FILE)speech = base64.b64encode(speech_data)if (IS_PY3):    speech = str(speech, &#39;utf-8&#39;)params = &#123;&#39;dev_pid&#39;: DEV_PID,         #&quot;lm_id&quot; : LM_ID,    #测试自训练平台开启此项          &#39;format&#39;: FORMAT,          &#39;rate&#39;: RATE,          &#39;token&#39;: token,          &#39;cuid&#39;: CUID,          &#39;channel&#39;: 1,          &#39;speech&#39;: speech,          &#39;len&#39;: length          &#125;post_data = json.dumps(params, sort_keys=False)# print post_datareq = Request(ASR_URL, post_data.encode(&#39;utf-8&#39;))req.add_header(&#39;Content-Type&#39;, &#39;application/json&#39;)try:    begin = timer()    f = urlopen(req)    result_str = f.read()    print (&quot;Request time cost %f&quot; % (timer() - begin))except URLError as err:    print(&#39;asr http response http code : &#39; + str(err.code))    result_str = err.read()if (IS_PY3):    result_str = str(result_str, &#39;utf-8&#39;)print(result_str)with open(&quot;result.txt&quot;,&quot;w&quot;) as of:    of.write(result_str)</code></pre><pre><code># 运行程序我们运行程序后或返回一下信息</code></pre><p>{“access_token”:”24.0ed58d5f890b6388b8e1fbb4f595e64e.2592000.1589017415.282335-19345000”,”session_key”:”9mzdC33+ru+xjYD0Bs+vqaaCurlrknFs75w6pvM+ddSFc9hWFqSn0t8aW8gWU7qWGl21RSTcM4A1bevZRf5m2labdgfjvA==”,”scope”:”audio_voice_assistant_get brain_enhanced_asr audio_tts_post public brain_all_scope picchain_test_picchain_api_scope wise_adapt lebo_resource_base lightservice_public hetu_basic lightcms_map_poi kaidian_kaidian ApsMisTest_Test\u6743\u9650 vis-classify_flower lpq_\u5f00\u653e cop_helloScope ApsMis_fangdi_permission smartapp_snsapi_base iop_autocar oauth_tp_app smartapp_smart_game_openapi oauth_sessionkey smartapp_swanid_verify smartapp_opensource_openapi smartapp_opensource_recapi qatest_scope1 fake_face_detect_\u5f00\u653eScope vis-ocr_\u865a\u62df\u4eba\u7269\u52a9\u7406 idl-video_\u865a\u62df\u4eba\u7269\u52a9\u7406”,”refresh_token”:”25.ccc2be055d9e6273d3c0bad9b8bb2368.315360000.1901785415.282335-19345000”,”session_secret”:”a0a53e0d2183b7145217373b71784075”,”expires_in”:2592000}<br>{‘access_token’: ‘24.0ed58d5f890b6388b8e1fbb4f595e64e.2592000.1589017415.282335-19345000’, ‘session_key’: ‘9mzdC33+ru+xjYD0Bs+vqaaCurlrknFs75w6pvM+ddSFc9hWFqSn0t8aW8gWU7qWGl21RSTcM4A1bevZRf5m2labdgfjvA==’, ‘scope’: ‘audio_voice_assistant_get brain_enhanced_asr audio_tts_post public brain_all_scope picchain_test_picchain_api_scope wise_adapt lebo_resource_base lightservice_public hetu_basic lightcms_map_poi kaidian_kaidian ApsMisTest_Test权限 vis-classify_flower lpq_开放 cop_helloScope ApsMis_fangdi_permission smartapp_snsapi_base iop_autocar oauth_tp_app smartapp_smart_game_openapi oauth_sessionkey smartapp_swanid_verify smartapp_opensource_openapi smartapp_opensource_recapi qatest_scope1 fake_face_detect_开放Scope vis-ocr_虚拟人物助理 idl-video_虚拟人物助理’, ‘refresh_token’: ‘25.ccc2be055d9e6273d3c0bad9b8bb2368.315360000.1901785415.282335-19345000’, ‘session_secret’: ‘a0a53e0d2183b7145217373b71784075’, ‘expires_in’: 2592000}<br>audio_voice_assistant_get<br>SUCCESS WITH TOKEN: 24.0ed58d5f890b6388b8e1fbb4f595e64e.2592000.1589017415.282335-19345000  EXPIRES IN SECONDS: 2592000<br>Request time cost 1.736482<br>{“corpus_no”:”6813645276203395866”,”err_msg”:”success.”,”err_no”:0,”result”:[“Beijing Cody girl”],”sn”:”487908489041586425415”}</p><p>```<br>        <span class="lazyload-img-span">        <img              data-src="https://ae01.alicdn.com/kf/H119a0599495846b8aaf1762ffbe78a6aV.png" >        </sapn>      <br>“result”:[“Beijing Cody girl”]中的内容就是识别的内容，在程序根目录也会生成result.txt文件也可以查看。</p><p>ok，大概就是这个样子，我要去研究pcm这个鬼东西了。。。</p>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>表情包太少？利用Python爬取表情包</title>
      <link href="2020/04/32.html"/>
      <url>2020/04/32.html</url>
      
        <content type="html"><![CDATA[<p>前言：代码实现了下载动态 下载静态的识别！<br>当然代码还有很多需要完善的 比如下载完的弹窗 bug也有比如创建空文件夹  只能爬取带ID固定的地址栏的表情包等等<br>简简单单凑合用！</p><a id="more"></a><pre><code>import requestsfrom bs4 import BeautifulSoupimport webbrowser# -*- coding: utf-8 -*-from tkinter import *import os #下载并返回值网页源码的类def download_all_htmls(id):    #下载页面的HTML，用于分析    url = f&quot;https://www.fabiaoqing.com/bqb/detail/id/&quot;+id+&quot;.html&quot;    #读取网页    r = requests.get(url)    #获取它的全部源码并text 并返回    txtc = r.text    return txtc   #先分析标签中的文件名      再将二进制流，名称，格式 并在各自的列表中进行追加def parse_single_html(html):    #解析HTML，得到数据    #[url=home.php?mod=space&amp;uid=155549]@Return[/url] list((img_title, img_url))    soup = BeautifulSoup(html,&quot;html.parser&quot;)    #声明一个文件名的函数 用网页的title标签作为文件名    global wenjian #声明为全局 方便下载时访问路劲    wenjian = soup.find(&#39;title&#39;).get_text()#查找title标签 并提取其中的内容    os.mkdir(wenjian)#调用文件操作 在当前文件下创建文件    #查找所有的图片的标签    img_divs = soup.find_all(&quot;div&quot;, class_=&quot;bqppdiv1&quot;)         global datas  # 二进制流的列表    datas = []    global names    names = []  # 对应名字的列表    global geshi    geshi = []# 对应后缀名的列表     #循环查找    for img_div in img_divs:        img_node = img_div.find(&quot;img&quot;)        if not img_node: continue         #增加到二次流的列表里        liu = img_node[&quot;data-original&quot;]        datas.append(liu)        # 增加到格式的列表里        num=len(liu)        geshi.append(liu[num-4:])        #增加到对应的文件名的列表里        names.append(img_node[&quot;alt&quot;])#调用下载的类 并将它的返回 作为参数 再调用分析和生成列表的类  #获取一下的长度   def gif():    #调用获取网页源码和  再对源码处理成有图片名称 格式 二进制流的列表 两个类      parse_single_html(download_all_htmls(entry1.get()))    #提前知道一下我需要下载多少张照片 也就是循环多次    lens = len(datas)    for i in range(lens):         reponse = requests.get(datas[i])        # 获取网络图片二进制流        img_content = reponse.content         # 将二进制流保存到一个图片文件中就可以了        with open(&quot;./&quot;+wenjian+&quot;/&quot;+names[i]+geshi[i], &quot;wb&quot;) as f:            f.write(img_content) #打开链接def open_url(event):    webbrowser.open(&quot;https://www.fabiaoqing.com&quot;, new=0)    #窗体的声明def window():    # 生成root主窗口    root=Tk(className = &quot;表情包下载器&quot;)    # 指定主框体大小    root.geometry(&#39;620x440&#39;)    # 框体大小可调性，分别表示x,y方向的可变性；    root.resizable(0, 0)    # 生成提示标签    labe1=Label(root,text = &#39;欢迎来到表情包下载器&#39;,fg = &quot;Olive&quot;,font = &quot;宋体 -25 bold&quot;,background = &quot;LightPink&quot;, height=2)    labe1.pack()    labe2=Label(root,text = &#39;表情包来源：https://www.fabiaoqing.com&#39;,fg = &quot;Olive&quot;,font = &quot;宋体 -25 bold&quot;,background = &quot;LightPink&quot;)    labe2.pack()    button2 = Button(root,text = &#39;打开表情包主页&#39;,fg = &quot;red&quot;,font = &#39;宋体 -30 bold&#39;,width=20,command = lambda : open_url(&quot;&lt;Button-1&gt;&quot;))#command = lambda :    button2.pack()    #button2.bind(&quot;&lt;Button-1&gt;&quot;, open_url)     labe3=Label(root,text = &#39;请在先在下方输入需要的表情包的地址&#39;,fg = &quot;Olive&quot;,font = &quot;宋体 -25 bold&quot;,background = &quot;LightPink&quot;)    labe3.place(x=90,y=200)     #单行文本框让用户输入表情包ID    # 声明为全局变量可以访问    global entry1    entry1=Entry(root,fg = &quot;red&quot;,font = &#39;宋体 -30 bold&#39;,width=10)    entry1.place(x=230, y=230)    #单击按钮后调用下载表情包的类并开始下载    button2 = Button(root,text = &#39;下载文件请点击&#39;,fg = &quot;red&quot;,font = &#39;宋体 -30 bold&#39;,command = lambda :gif(),width=20, height=2)#command = lambda :    button2.place(x=140, y=300)     # 进入消息循环（必需组件）    root.mainloop()  window()#整个程序的调用！</code></pre><p>程序封装成.exe方法<br>需要用 pip 安装一个  pyinstaller 模块<br>【详细安装可自查百度】<br>第一步准备一个 .ico格式 的图标 和.py 文件<br>复制你准备好的两个文件放入自己安装的 pyinstaller的目录中；</p><p>第二步<br>复制你的  pyinstaller.exe的路径<br>在win+r 输入 cmd<br>在cmd命令窗口输入 cd 右键粘贴你的路径 回车</p><p>第三步（注图标必须为ico格式）<br>输入你的命令<br>pyinstaller -F py文件 -i 图标<br>第四步<br>pyinstaller的同级目录中会有个dist的文件夹<br>打开里面就有生成的exe文件</p>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何一键灰白，以示哀思</title>
      <link href="2020/04/31.html"/>
      <url>2020/04/31.html</url>
      
        <content type="html"><![CDATA[<p>2020年4月4日</p><p>是农历庚子年的清明节</p><p>同样也是2000年以来的第四个全国追悼日</p><h1 id="小记"><a href="#小记" class="headerlink" title="小记"></a>小记</h1><p>2020年4月3日，国务院公告：2020年4月4日举行全国性哀悼活动。</p><p>4日零点，各大游戏停服维护，各个公司主页应用改为黑白主题。<br>4日10时全国降半旗鸣笛默哀，表达全国各族人民对抗击新冠肺炎疫情斗争牺牲烈士和逝世同胞的深切哀悼。<br>这也许是人生中第一次全网上下，身前身后都是一片灰色沉痛的基调。百度、腾讯新闻、今日头条、人民日报、淘宝等等你所能用到的app/官网，都将页面色调转为黑白，以示哀思。他们是怎么做到一夜之间将如此大体量的网页做了主题切换的呢？难道他们早就接到了通知？</p><p>其实不然，做到这些关键代码只有一行，其次再考虑下各浏览器版本兼容的问题就可以轻松做到：</p><pre><code>filter: grayscale(100%)</code></pre><p>这是一行css3的样式代码，意为将图像转换为灰度图像。值定义转换的比例。值为100%则完全转为灰度图像，值为0%图像无变化。值在0%到100%之间，则是效果的线性乘子。若未设置，值默认是0；<br>有了核心代码，再稍加修饰，让其兼容多版本浏览器</p><pre><code>html &#123;   filter: url(&quot;data:image/svg+xml;utf8,&lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot;&gt;&lt;filter id=&quot;grayscale&quot;&gt;&lt;feColorMatrix type=&quot;matrix&quot; values=&quot;0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0.3333 0.3333 0.3333 0 0 0 0 0 1 0&quot;/&gt;&lt;/filter&gt;&lt;/svg&gt;#grayscale&quot;); /* Firefox 3.5+ */  -webkit-filter: grayscale(100%); /* chrome+ */  -moz-filter: grayscale(100%);  -ms-filter: grayscale(100%);  -o-filter: grayscale(100%);  filter: grayscale(100%);  filter: gray; /* ie6-8 */  filter: progid:DXImageTransform.Microsoft.BasicImage(grayscale=1);/*ie6-9 */&#125;</code></pre><p>此段样式代码只需声明为全局样式，其样式文件在页面头部引入，即可生效。如有需要请自行食用。</p>]]></content>
      
      
      
        <tags>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo利用CDN实现静态文件加速</title>
      <link href="2020/04/30.html"/>
      <url>2020/04/30.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>最近搞来搞去，还是把博客的主题换成了NexT，现在感觉还是这款主题用着舒服，简洁，功能还很丰富，不过由于本博客托管于github，毕竟是国外网站，在国内的速度<br>还是很感人的，更何况还需要加载好多的静态文件，所以我们为了提高页面的打开速度，我决定将第三方的静态文件全部改为从公用的CDN来获取，几天下来，博客的打开速度<br>确实提高了不少。下面把CDN的配置给大家，赶快去体验吧！！！！！！！！<br>这里只是针对第三方静态文件的加速，修改<code>Next</code>主题配置文件<code>_config.yml</code>如下：</p></blockquote><pre><code>vendors:  # Internal path prefix. Please do not edit it.  _internal: lib  # Internal version: 2.1.3  jquery: https://cdn.bootcss.com/jquery/2.1.3/jquery.min.js  # Internal version: 2.1.5  # See: http://fancyapps.com/fancybox/  fancybox: https://cdn.bootcss.com/fancybox/2.1.5/jquery.fancybox.min.js # https://cdn.bootcss.com/fancybox/2.1.5/jquery.fancybox.pack.js  fancybox_css: https://cdn.bootcss.com/fancybox/2.1.5/jquery.fancybox.min.css  # Internal version: 1.0.6  # See: https://github.com/ftlabs/fastclick  fastclick: https://cdn.bootcss.com/fastclick/1.0.6/fastclick.min.js  # Internal version: 1.9.7  # See: https://github.com/tuupola/jquery_lazyload  lazyload: https://cdn.bootcss.com/jquery_lazyload/1.9.7/jquery.lazyload.min.js  # Internal version: 1.2.1  # See: http://VelocityJS.org  velocity: https://cdn.bootcss.com/velocity/1.2.1/velocity.min.js  # Internal version: 1.2.1  # See: http://VelocityJS.org  velocity_ui: https://cdn.bootcss.com/velocity/1.2.1/velocity.ui.min.js  # Internal version: 0.7.9  # See: https://faisalman.github.io/ua-parser-js/  ua_parser:  # Internal version: 4.6.2  # See: http://fontawesome.io/  fontawesome: https://cdn.bootcss.com/font-awesome/4.6.2/css/font-awesome.min.css  # Internal version: 1  # https://www.algolia.com  algolia_instant_js:  algolia_instant_css:  # Internal version: 1.0.2  # See: https://github.com/HubSpot/pace  # Or use direct links below:  # pace: //cdn.bootcss.com/pace/1.0.2/pace.min.js  # pace_css: //cdn.bootcss.com/pace/1.0.2/themes/blue/pace-theme-flash.min.css  pace: https://cdn.bootcss.com/pace/1.0.2/pace.min.js  pace_css: https://cdn.bootcss.com/pace/1.0.2/themes/blue/pace-theme-flash.min.css</code></pre><p>针对自定义的静态文件(main.min.js和main.min.css)需要自行使用融合CDN，国内都需要备案域名.</p>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>U校园刷课半自动化解决方案</title>
      <link href="2020/03/29.html"/>
      <url>2020/03/29.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>学习使人快乐，技术使人懒惰。秉持着雷锋精神，为了服务爱学(tou)习(lan)的大学生，今天就来分享下U校园的刷课半自动化解决方案。怎么说呢，也不算方案吧，也就是个工具。</p></blockquote><h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><p>利用脚本+题库实现自动搜答案，自动填空</p><h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><p>1.可以上网的电脑（注意下，这里要固定ip地址的，不要开加速器哦，不然U校园的垃圾判断机制会限制你登陆哦，一般家用宽带都是固定ip的）<br>2.下载本文提供的集成浏览器，下载地址：<a href="https://www.lanzous.com/iaqd8pc">https://www.lanzous.com/iaqd8pc</a><br>3.没有解压软件推荐用7-zip,下载地址：<a href="https://sparanoid.com/lab/7z/">https://sparanoid.com/lab/7z/</a></p><h1 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h1><p>1.下载浏览器<br>2.解压缩<br>3.打开解压后的文件夹有<code>运行此文件.exe</code>,双击运行<br>4.如图，点击箭头所指链接<br>        <span class="lazyload-img-span">        <img              data-src="https://s1.ax1x.com/2020/03/28/Gkge1J.png" >        </sapn>      <br>5.登陆U校园<br>        <span class="lazyload-img-span">        <img              data-src="https://s1.ax1x.com/2020/03/28/GkgvE6.png" >        </sapn>      <br>6.进入课程，开始学习，遇到需要你回答的题目会出现下面类似的窗口<br>        <span class="lazyload-img-span">        <img              data-src="https://s1.ax1x.com/2020/03/28/Gk2lKs.png" >        </sapn>      <br>等待它自动完成回答，完成后自己用鼠标去点一下回答的空。之后就可以提交了。</p><h1 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h1><p>出现答题失败的可能原因：<br>1.该题型未适配<br>2.网页存在缓存，刷新网页即可<br>3.如有疑问，请反馈。</p><h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><p>使用脚本则同意以下规定<br>代码禁止二次开发<br>本软件按“原样”提供，不提供任何形式的明示或暗示担保，包括但不限于对适销性，特定目的的适用性和非侵权性的担保。无论是由于软件，使用或其他方式产生的，与之有关或与之有关的合同，侵权或其他形式的任何索赔，损害或其他责任，作者或版权所有者概不负责。</p><h1 id="感谢"><a href="#感谢" class="headerlink" title="感谢"></a>感谢</h1><p>MrDgbot提供的脚本支持</p>]]></content>
      
      
      
        <tags>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python学习之路（五）</title>
      <link href="2020/03/28.html"/>
      <url>2020/03/28.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>今天来聊聊程序是如何控制的？</p></blockquote><h1 id="分支结构"><a href="#分支结构" class="headerlink" title="分支结构"></a>分支结构</h1><ul><li><p>选择结构（分支结构）：根据程序中给出的条件语句，判断当前条件 是否满足，如果满足就执行相应的语句块，如果不满足则什么都不执 行或者执行预先定义好的另外一组语句块</p></li><li><p>if语句块的语法格式，根据实际情况elif和else分支可以没有： </p><pre><code>if 条件:   要执行的语句块 elif 条件:   要执行的语句块 else:   要执行的语句块</code></pre></li><li><p><code>==</code>用来判断运算符两边的表达式所得到的值是否相等，如果相 等，则返回true（真）；如果不等，则返回false（假）</p></li><li><p><code>!=</code>用来判断运算符两边的表达式所得到的值是否不等，如果不 等，则返回true（真）；如果相等，则返回false（假）</p></li><li><p>与<code>==</code>和<code>！=</code>相似的运算符还有<code>&gt;</code>,<code>&gt;=</code>,<code>&lt;</code>,<code>&lt;=</code></p></li><li><p>关键字<code>and</code>表示并且的意思，即只有同时满足使用and连接的若 干条件，算式的最终结果才能为true，否则结果为false</p></li><li><p>关键字<code>or</code>表示或者的意思，即使用or连接的若干条件中，只要 有任意一个是成立的，则算式的最终结果就为true，否则为false</p></li><li><p>关键字<code>not</code>表示逻辑非，即取反操作，对true（真）取反得到 false（假），对false（假）取反得到true（真）</p></li></ul><h1 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h1><ul><li><code>for循环</code>是Python循环的一种，其语法格式为： <pre><code>for 循环变量 in 循环变量取值范围:   循环执行的语句块（循环体）</code></pre></li><li><code>range()函数</code>，它的功能是产生指定的整数序列范围，语法格式为： <pre><code>range(起始数值,结束数值,递增值)</code></pre></li><li><code>while语句</code>的语法格式： <pre><code>while 循环的条件:   循环执行的语句块（循环体）</code></pre></li></ul><blockquote><p>下面我们来谈谈软件的设计方法</p></blockquote><h1 id="原型法"><a href="#原型法" class="headerlink" title="原型法"></a>原型法</h1><p>原型法的核心思想就是快速搭建一个程序的可运行版本，这个最 初的版本可能只是包含一些最简单的功能，然后再不断修改和完 善该版本的程序，直到最终完成程序的所有功能</p><p>使用该方法进行编程的好处就是最大程度保证每一个阶段产生的 程序都是正确的</p><h1 id="几个特别的语句"><a href="#几个特别的语句" class="headerlink" title="几个特别的语句"></a>几个特别的语句</h1><ul><li>程序在执行循环语句时，若碰到了<code>break</code>语句，则终止整个循环， 执行循环下面的语句。</li><li>程序在执行循环语句时，若碰到了<code>continue</code>语句，则终止本次循 环，执行下一次的循环。</li><li>如果想定义一个什么事也不做的空语句块，可以用<code>pass</code>语句</li><li>else关键字的用法 </li><li>else语句在分支结构中表示不满足if和elif判断条件以外的分支； </li><li>在while循环中它表示当循环条件不再成立时，则执行else包 含的语句块； </li><li>在for循环中它表示当循环范围中所有元素都已经被尝试过， 则执行else包含的语句块</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>爬虫是什么？爬虫简介及应用</title>
      <link href="2020/03/27.html"/>
      <url>2020/03/27.html</url>
      
        <content type="html"><![CDATA[<p>1 什么是网络爬虫</p><p>爬虫的简单定义</p><p>网络爬虫（又被称为网页蜘蛛，网络机器人，在FOAF社区中间，更经常的称为网页追逐者），是一种按照一定的规则，自动地抓取万维网信息的程序或者脚本。另外一些不常使用的名字还有蚂蚁、自动索引、模拟程序或者蠕虫。</p><p>简单来说：使用事先写好的程序去抓取网络上所需要的数据，这样的程序就叫网络爬虫。</p><p>爬虫的分类</p><p>网络爬虫可以分为通用网络爬虫(如搜索引擎的爬虫，根据几个URL的种子不断的去抓取数据)和聚焦网络爬虫(有选择性的抓取预先定义好的主题和相关页面的网络爬虫)。</p><p>A.通用网络爬虫：</p><p>搜索引擎</p><p>B.聚焦网络爬虫：</p><p>针对某一特定领域的数据进行抓取的程序。飞猪、携程的行程信息，天眼查的企业信息等。</p><p>2 为什么需要爬虫</p><p>爬虫的用途</p><p>A.解决冷启动问题：</p><p>一些论坛的假用户</p><p>B.搜索引擎的根基：</p><p>做搜索引擎少不了爬虫程序；</p><p>C.建立起知识图谱，帮助建立机器学习的训练集：</p><p>维基百科是一个较好的数据集来源；</p><p>D.可以制作各种商品的比价，趋势分析等；</p><p>E.其他：</p><p>比如分析淘宝上竞争对手的数据；分析微博的数据传递影响力，政府的舆情分析，分析人与人之间的关系等等。</p><p>总之一句话：在当今的大数据时代，做任何价值分析的前提是数据，而爬虫则是获得这个前提的一个低成本高收益手段。</p><p>怎么做爬虫</p><p>Python 、node 、java</p><p>初级爬虫工程师：</p><p>1.Web前端的知识：HTML，CSS，JavaScript，DOM，DHTML，Ajax，jQuery，json等；</p><p>2.正则表达式，能提取正常一般网页中想要的信息，比如某些特殊的文字，链接信息，知道什么是懒惰，什么是贪婪型的正则；</p><p>3.会使用re，cheerio，XPath等获取一些DOM结构中的节点信息；</p><p>4.知道什么是深度优先，广度优先的抓取算法，及实践中的使用规则；</p><p>5.能分析简单网站的结构。</p><p>中级爬虫工程师：</p><p>1.了解什么是Hash，会使用简单的MD5，SHA1等算法对数据进行Hash以便存储；</p><p>2.熟悉HTTP，HTTPS协议的基础知识，了解GET，POST方法，了解HTTP头中的信息，包括返回状态码，编码，user-agent，cookie，session等；</p><p>3.能设置User-Agent进行数据爬取，设置代理等；</p><p>4.知道什么是Request，什么是Response，会使用Fiddler, Wireshark等工具抓取及分析简单的网络数据包；对于动态爬虫，要学会分析Ajax请求，模拟制造Post数据包请求，抓取客户端session等信息，对于一些简单的网站，能够通过模拟数据包进行自动登录；</p><p>5.对于比较难搞定的网站，学会使用浏览器+selenium抓取一些动态网页信息；</p><p>6.并发下载，通过并行下载加速数据抓取；多线程的使用。</p><p>高级爬虫工程师：</p><p>……</p><p>3 爬虫的合法性问题</p><p>目前还处于不明确的蛮荒阶段，“允许哪些行为”这种基本秩序还处于建设中。至少目前来看，如果抓取的数据为个人所用，则不存在问题；如果数据用于转载，那么抓取数据的类型就很重要了：一般来说，当抓取的数据是实现生活中的真实数据（比如，营业地址，电话清单）时，是允许转载的，但是，如果是原创数据（比如，意见或评论），通常就会受到版权限制，而不能转载。(知乎的复制会粘贴上版权信息，都是爬虫可以轻松拿到干净的数据)</p><p>注意：不管怎么样，作为一个访客，应当约束自己的抓取行为，这就是说要求下载请求的速度需要限定在一个合理值之内（对别人服务器和维护人员的同情），并且还需要设定一个专属的用户代理来标识自己。</p><p>4 爬虫的准备工作：网站的背景调研</p><p>网站的背景调研对聚焦的网络爬虫而言至关重要，正所谓：知己知彼，百战不殆。</p><p>robots协议</p><p>识别网站用了何种技术</p><p>找网站的所有者</p><p>5爬虫的实现</p><p>插入企查查案例</p><p>总结：一个通用爬虫的流程如下：</p><p>设置种子站点</p><p>获取网站信息</p><p>错误处理及日志记录</p><p>6 数据的类型</p><p>网页中数据的类型简单来说可以分成以下三类：结构化数据、半结构化数据和非结构化数据。</p><p>7 怎么提取网页中的信息</p><p>XPath</p><p>选取节点</p><p>正则表达式re</p><p>被用来检索\替换那些符合某个模式(规则)的文本,对于文本过滤或规则匹配,最强大的就是正则表达式,是python爬虫里必不可少的神兵利器。</p><p>8 动态网页的使用场景</p><p>先看下面一个例子：</p><p>这是京东上看一本书的场景。我们发现打开一本书之后，书的价格，排名等信息及书的评论信息不是在我们第一次打开网站时就立即加载进来的。而是通过二次请求或多次的异步请求获取的。这样的页面就是动态页面。</p><p>关于动态页面使用的场景：</p><p>希望异步刷新的场景。有些网页内容很多，一次加载完对服务器压力很大，而且有的用户不会去查看所有内容；</p><p>GET方法</p><p>POST方法</p><p>更加难以对付的动态网站</p><p>1． 应对需要多次数据的交互模拟的网站</p><p>我们有时会遇到像淘宝这样的大型网站，对数据版权看得特别重的，它们的网站有大量的工程师和技术人员去维护，它们也可能在技术手段上采用多次交互数据包的方式来完成网站服务器与用户浏览器之间的交互。如果此时还采用传统的分析数据包的方式会比较的复杂，难度较高。那么，有没有一劳永逸的方法，来解决此类问题呢？</p><p>我们的解决方案是：Selenium + PhantomJS。</p><p>我们的爬虫其实就是在做模拟浏览器的行为。</p><p>2．Electron</p><p>Electron是由Github开发，用HTML，CSS和JavaScript来构建跨平台桌面应用程序的一个开源库。</p><p>3． PhantomJS</p><p>一个基于webkit无界面(headless)的浏览器,它可以把网站加载到内存中并执行页面上的JS，但它没有图形用户界面，所以耗费的资源比较少；</p><p>关于动态网站信息抓取的总结</p><p>总的来说，我们的爬虫要尽量模拟的看起来就像是真正的用户在浏览器上访问服务器网站的行为。如果我们使用GET或POST的方式来模拟浏览器与服务器间通信的行为，成本比较低，但是应对复杂的网站或者服务器精心防御的网站来说是很难骗过服务器的。Electron+PhantomJS的方案则会让我们的程序看起来更像是普通的用户，但是它的效率相对而言会降低很多，速度也会慢很多。在大规模爬去数据时可能遇到许多新的挑战。（比如网站尺寸的设置，等待时间的设定等）</p><p>Cookie 、session、</p><p>终极武器</p><p>Nightmare</p><p>浏览器事件: goto,back,forward,refresh,</p><p>用户事件: click,mousedown,mouseup,mouseover,type,insert,select,check,uncheck,selectscrollTo</p><p>向网页注入脚本: .js .css的文件类型原理是跟油猴差不多，可以编写自己的js代码注入十分方便</p><p>wait 函数可以按照延迟时间或者一个 dom 元素的出现</p><p>evaluate 以浏览器的环境运行的脚本函数，然后返回一个 promise 函数</p><p>需要加载全网站，一般无防护网站没必要。</p><p>9高效率的爬取数据</p><p>人多力量大，多人干事更快。多个爬虫一起干活效率也更高。</p><p>随着爬虫抓取数据的提速，及数据量抓取的庞大，问题也会凸显。对方也会尝试用各种手段来禁止爬虫的行为。</p><p>10反爬及应对反爬的策略</p><p>随着抓取的数据量到一定程度，数据重复及爬取过程中的死链问题会凸显。怎么来解决反爬问题呢？</p><p>网站如何发现爬虫</p><p>一般来说，网站会有以下一些简单的策略发现爬虫程序：</p><p>1）单一IP非常规的访问频次；</p><p>2）单一IP非常规的数据流量；</p><p>3）大量重复简单的网站浏览行为，只下载网页，没有后续的JS,CSS请求；</p><p>5）通过一些陷阱来发现爬虫，例如一些通过CSS对用户隐藏的链接，只有爬虫才会访问；</p><p>网站如何进行反爬</p><p>一般来说网站会采用下面两个简单的策略来防止爬虫：</p><p>1.大量使用动态网页，是的爬虫的爬取难度增加，重要数据都拿不到，即使爬虫采用了Web环境来渲染（内置浏览器），也会大大增加爬虫的负担和爬虫时间；（当然，采用动态加载的技术，对服务器的负担也会大大减轻）</p><p>2.基于流量的拒绝：开启带宽限制模块，限制每个IP最多连接数，最大带宽等；</p><p>爬虫如何发现自己可能被网站识别了</p><p>如果爬取过程中出现以下情况，那么小心了，你的爬虫可能被网站发现了：</p><p>1.验证码出现；</p><p>2.Unusual content delivery delay 非常规的延时;</p><p>3.Frequent response with HTTP 403, 404, 301 or 50x error;</p><p>4.直接接口返回骂人的话……</p><p>爬虫应对反爬的策略</p><p>我们可以从以下几个方面来考虑应对反爬：</p><p>1）User-Agent池；</p><p>2）IP代理服务器池；</p><p>3）CookieJar等的管理；</p><p>4）协议的细节考虑，如：需要大量的实践经验总结的</p><p>抓取数据时不处理CSS，JS等；</p><p>nofollow属性；css的display属性；探测陷阱；</p><p>验证refer locator等；</p><p>5）使用分布式的多机策略；爬慢点，把爬虫放到访问频繁的主站IP子网下，如教育网；</p><p>6）使用了规则来批量爬取，需对规则进行组合；</p><p>7）验证码的搞定：机器学习，图像识别；</p><p>8）尽可能遵守Robots协议；</p><p>9）与所有方协调接口与时间段；</p>]]></content>
      
      
      
        <tags>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CDN是什么？谈谈有关CDN的小知识</title>
      <link href="2020/03/26.html"/>
      <url>2020/03/26.html</url>
      
        <content type="html"><![CDATA[<ol><li>什么是CDN：</li></ol><p>CDN的全称是Content Delivery Network，即内容分发网络。CDN是构建在网络之上的内容分发网络，依靠部署在各地的边缘服务器，通过中心平台的负载均衡、内容分发、调度等功能模块，使用户就近获取所需内容，降低网络拥塞，提高用户访问响应速度和命中率。CDN的关键技术主要有内容存储和分发技术。 基本原理 CDN的基本原理是广泛采用各种缓存服务器，将这些缓存服务器分布到用户访问相对集中的地区或网络中，在用户访问网站时，利用全局负载技术将用户的访问指向距离最近的工作正常的缓存服务器上，由缓存服务器直接响应用户请求。</p><ol start="2"><li>CDN的特点</li></ol><p>（1）提升网站的性能</p><p>使用CDN最大的益处是为你的服务器提供“分流”，节省了你的带宽，减少了服务器的压力，很多CDN厂商提供的资源访问服务加载速度还是比较快的（墙内除外）。</p><p>（2）文件缓存</p><p>对于那些被普遍使用的资源文件（比如j q u e r y），如果用户在访问你网站之前已经访问过其他使用该CDN的网站，那么在用户浏览器中已经对该资源文件做了缓存，对于你的网站来说，这是个不错的性能提升！</p><p>（3）高可用</p><p>相信微软、谷歌、雅虎的服务器相对于你自身的服务器来说更加可靠些，他们提供了高可用、低网络延迟，降低了数据包的丢失几率。你无需担心服务器宕机或者网络延迟的问题。</p><ol start="3"><li>CDN支持4种调度类型</li></ol><p>（1）智能DNS</p><p>智能计算，就近最佳节点为网民提供服务。</p><p>（2）HTTP DNS：</p><p>客户端直接调用HttpDNS接口获取缓存服务器IP组，再择优向IP组中的缓存服务器发送请求，替代常规DNS调度策略，适用于客户端，且客户端需稍作修改进行HttpDNS接口调用。</p><p>（3）边缘302：</p><p>针对因用户LocalDNS配置错误引起的解析错误，缓存服务器可根据终端IP进行判断，并通过302方式响应终端最优缓存服务器IP供终端访问。适用于大文件下载</p><p>（4）中心302：</p><p>调度服务器接受终端Http请求，可根据终端IP及url请求热度，将用户请求通过302方式调度至最优的缓存服务器上进行响应。</p><ol start="4"><li>CDN纠错小常识</li></ol><p>用户使用KS3中java的sdk时出现403报错，并返回“SignatureDoesNotMatch”的错误码，该怎么办？</p><p>处理：如果返回“SignatureDoesNotMatch”的错误码，说明签名出现错误</p><p>（1）确认AccessKey是否多写了空格;</p><p>（2）当请求的header中包含Content-MD5时，StringToSign中需要包含请求内容数据的MD5值, 使用Base64编码;</p><p>（3）Content-Type 表示请求内容的类型，取HTTP header中的Content-Type;</p><p>（4）Date 取HTTP Header中的Date，且必须为 HTTP1.1 中支持的 GMT 格式，请注意，您发送请求的时间（客户端系统时间）与服务端收到请求的时间，间隔前后不得超出15分钟，否则该请求将被认为无效并返回错误，请检查发送请求设备的系统时间与标准时间是否一致;</p><p>（5）CanonicalizedKssHeaders 取HTTP请求中的以x-kss开头的Header组合;</p><p>（6）CanonicalizedResource 取用户访问的资源;</p><p>（7）签名构造规则见API接口文档中的签名。</p>]]></content>
      
      
      
        <tags>
            
            <tag> knowledge </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何自己实现 JavaScript 的 new 操作符？</title>
      <link href="2020/03/25.html"/>
      <url>2020/03/25.html</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><code>new</code> 大家肯定都不陌生，单身没有对象的时候就 <code>new</code> 一个，很方便。那么它在创建实例的时候，具体做了哪些操作呢？今天我们就来一起分析一下</p><h1 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h1><p>在介绍 <code>new</code>之前，必须要知道什么是构造函数。</p><p>构造函数和普通函数在写法上没有任何区别，当一个函数通过 <code>new Fun()</code> 调用时，就叫做构造函数，构造函数首字母通常大写。</p><pre><code>function User(name) &#123;    this.name = name;&#125;let u = new User(&#39;leo&#39;);</code></pre><p>这里，<code>User</code> 就是构造函数，当然你也可以直接调用 <code>User()</code>，但是这样就起不到创建实例的作用，在非严格模式下，会把 <code>name</code> 属性挂在 <code>window</code> 上。</p><h1 id="new-操作符"><a href="#new-操作符" class="headerlink" title="new 操作符"></a>new 操作符</h1><p>那么 <code>new</code> 操作符到底做了什么事情呢，可以创建出一个实例？</p><blockquote><p><code>new</code> 运算符创建一个用户定义的对象类型的实例或具有构造函数的内置对象的实例。new关键字会进行如下的操作：</p></blockquote><ul><li>1.创建一个空的简单JavaScript对象（即<code>**&#123;&#125;**</code>）；</li><li>2.链接该对象（即设置该对象的构造函数）到另一个对象 ；</li><li>3.将步骤1新创建的对象作为<code>**this**</code>的上下文 ；</li><li>4.如果该函数没有返回对象，则返回<code>**this**</code>。</li></ul><p>以上引用自<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/new">new 操作符 - MDN</a></p><p>可能第 2、4 步大家看的不是很明白，这里我重新总结一下这 4 个步骤：</p><p>1.创建一个空对象 <code>u = &#123;&#125;</code><br>2.绑定原型，<code>u.__proto__ = User.prototype</code><br>3.调用 <code>User()</code> 函数，并把空对象 <code>u</code> 当做 <code>this</code> 传入，即 <code>User.call(u)</code><br>4.如果 <code>User()</code> 函数执行完自己 <code>return</code> 一个 <code>object</code> 类型，那么返回此变量，否则返回 <code>this</code>，注意：如果构造函数返回基本类型值，则不影响，还是返回 <code>this</code></p><h1 id="自己实现一个-new"><a href="#自己实现一个-new" class="headerlink" title="自己实现一个 new"></a>自己实现一个 new</h1><p>知道了 <code>new</code> 操作符的原理，下面我们自己来实现一个 <code>FakeNew</code> 函数。</p><pre><code>function FakeNew() &#123;    let obj = &#123;&#125;;      // 将类数组 arguments 转为数组，同时将第一个参数也就是构造函数 shift 出来    let Constructor = [].shift.apply(arguments);      // 绑定原型    obj.__proto__ = Constructor.prototype;          // 调用构造函数，将 obj 当做 this 传入    let res = Constructor.apply(obj, arguments);        // 返回    return typeof res === &#39;object&#39; ? res : obj;   &#125;function User(name) &#123;    this.name = name;&#125;User.prototype.getName = function() &#123;    return this.name;&#125;let u = FakeNew(User, &#39;leo&#39;);console.log(u);console.log(u.getName());</code></pre><p>相应关键步骤的注释已经附在代码里面了，这样我们就实现了一个 <code>new</code> 操作，相信大家以后再看到 <code>new</code>，会有一种通透的感觉了。</p>]]></content>
      
      
      
        <tags>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客图片加载？多种解决方案供您选择</title>
      <link href="2020/03/24.html"/>
      <url>2020/03/24.html</url>
      
        <content type="html"><![CDATA[<h1 id="ImgURL"><a href="#ImgURL" class="headerlink" title="ImgURL"></a>ImgURL</h1><p>ImgURL 是由国内独立开发者制作的图床工具，已在 GitHub 开源。ImgURL 支持拖拽、粘贴等多种上传方式。在上传测试中，GIF 耗时 5 秒，PNG 实现秒传，处于可接受的范围内。</p><p>ImgURL 的图片编辑功能着实让人眼前一亮。在你上传了一张图片后，你可以对其进行裁切、压缩，甚至是添加水印的操作。除了可以将图片导出为 URL 外，ImgURL 还支持选择 HTML、Markdown 等格式。</p><p>官网地址：<a href="https://imgurl.org/">https://imgurl.org/</a></p><a id="more"></a><p>项目GitHub 地址：<a href="https://github.com/helloxz/imgurl">https://github.com/helloxz/imgurl</a></p><h1 id="upload-cc"><a href="#upload-cc" class="headerlink" title="upload.cc"></a>upload.cc</h1><p>upload.cc 采用了类似 Material Design 的设计，界面清晰明了。它支持 JPEG、PNG 等五种常见格式，同样支持拖拽上传及多张照片同时上传。上传后的图片会显示在左侧，对于不需要的图片，你可以随时删除。</p><p>upload.cc 提供了浏览器插件。如果你使用的是 Chrome 或 Firefox 浏览器，可以通过插件直接上传图片。插件的下载链接在这里：Chrome、Firefox。在测试中，GIF 上传耗时近 8 秒，PNG 可以秒传。</p><p>upload.cc 对片大小有限制。单张照片最大 5M，且仅支持常见格式，适合需要频繁分享小图的用户</p><p>官网地址：<a href="https://upload.cc/">https://upload.cc/</a></p><h1 id="SM-MS"><a href="#SM-MS" class="headerlink" title="SM.MS"></a>SM.MS</h1><p>SM.MS 支持上传单张最大 5M 的图片，每次上传最多支持 10 张图片，适合作为主力图床使用。SM.MS 还提供了官方 iOS 和 Android 客户端，你可以在 App Store 或 Google Play 免费下载</p><p>官网地址：<a href="https://sm.ms/">https://sm.ms/</a></p><h1 id="路过图床"><a href="#路过图床" class="headerlink" title="路过图床"></a>路过图床</h1><p>它以「无限空间」和「无限流量」作为最大的亮点，同时具有全球 CDN 加速以确保高速、稳定。在上传测试中，GIF 上传耗时约 5 秒。路过图床较为繁琐的一点是，它会先显示预览和编辑，需要进行二次确认。</p><p>路过图床仅对单次上传的大小做出了限制，游客只能上传小于 5M 的图片，注册后可上传 10M 内的图片，适合作为主力图床使用。路过图床还为电商用户提供了专门的上传空间，但是路过会偶尔来大姨妈，图片速度不稳定，不是很建议用</p><p>官网地址：<a href="https://imgchr.com/">https://imgchr.com/</a></p><h1 id="Postimage"><a href="#Postimage" class="headerlink" title="Postimage"></a>Postimage</h1><p>Postimage 是一款来自国外的图床工具，支持按照一定大小缩放图片及设置图片自动删除。在上传完成后，Postimage 会为你生成多种链接格式以满足不同需求。令人眼前一亮的是，Postimage 还会生成一个用于删除当前图片的链接，你只要访问那个链接即可将图片删除</p><p>官网地址：<a href="https://postimages.org/">https://postimages.org/</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习通下载老师后台的作业统计</title>
      <link href="2020/03/23.html"/>
      <url>2020/03/23.html</url>
      
        <content type="html"><![CDATA[<p><strong>学习通下载老师后台的作业统计</strong></p><p>1.首先打开学习通个人中心：<a href="http://i.chaoxing.com/">http://i.chaoxing.com/</a>，点击选择的课程<br>        <span class="lazyload-img-span">        <img              data-src="https://s1.ax1x.com/2020/03/23/87AP2Q.png" >        </sapn>      </p><a id="more"></a><p>        <span class="lazyload-img-span">        <img              data-src="https://s1.ax1x.com/2020/03/23/87A2i8.png" >        </sapn>      </p><p>2.复制了上面那一段之后，我们将复制的内容放进下面的地址里<br><code>https://mooc1-1.chaoxing.com/work/exportAnswerRecord?将上面复制的地址粘贴到这里&amp;mooc=1</code></p><ul><li>例如我的地址是这个：courseId=云雾&amp;classId=云雾&amp;workId=云雾<br><code>那么下载地址就是：https://mooc1-1.chaoxing.com/work/exportAnswerRecord?courseId=云雾&amp;classId=云雾&amp;workId=云雾&amp;mooc=1</code></li></ul><p>3.地址弄好之后，复制到浏览器打开，就会自动下载作业的统计文档~..<br>        <span class="lazyload-img-span">        <img              data-src="https://s1.ax1x.com/2020/03/23/87AXz4.png" >        </sapn>      </p><p><em>声明：此方法不可用作违反行为，否则产生的一切后果自负</em></p><p>原文链接：<a href="https://lioeo.cn/76.html">https://lioeo.cn/76.html</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nodejs - 在阿里云轻量服务器上部署Node环境</title>
      <link href="2020/03/22.html"/>
      <url>2020/03/22.html</url>
      
        <content type="html"><![CDATA[<p>前往根目录 :<br><code>cd /</code><br>下载Node :<br><code>wget -c https://nodejs.org/dist/v12.1...</code><br>解压 :<br><code>tar -xvf node-v12.16.1-linux-x64.tar.xz</code><br>重命名 :<br><code>mv node-v12.16.1-linux-x64 nodejs</code><br>建立软连接, 这样方便在全局使用相关命令 :</p><a id="more"></a><p><code>ln -s /nodejs/bin/npm /usr/bin/npm</code><br><code>ln -s /nodejs/bin/node /usr/bin/node</code></p><p>参考资料 :<br>Node官网 : <a href="https://nodejs.org/en/">https://nodejs.org/en/</a><br>查看服务器版本信息 : <a href="https://blog.csdn.net/pansanday/article/details/79697562">https://blog.csdn.net/pansanday/article/details/79697562</a><br>linux服务器安装node环境及项目部署 : <a href="https://zhuanlan.zhihu.com/p/49741341">https://zhuanlan.zhihu.com/p/49741341</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python字符串格式化</title>
      <link href="2020/03/21.html"/>
      <url>2020/03/21.html</url>
      
        <content type="html"><![CDATA[<p>Python2.6 开始，新增了一种格式化字符串的函数 str.format()，它增强了字符串格式化的功能。相对于老版的%格式方法，它有很多优点。</p><p>1.在%方法中%s只能替代字符串类型，而在format中不需要理会数据类型；<br>2.单个参数可以多次输出，参数顺序可以不相同；<br>3.填充方式十分灵活，对齐方式十分强大；<br>4.官方推荐用的方式，%方式将会在后面的版本被淘汰。</p><a id="more"></a><h1 id="字符串格式化"><a href="#字符串格式化" class="headerlink" title="字符串格式化"></a>字符串格式化</h1><p>1、按照默认顺序，不指定位置</p><pre><code>print(&quot;&#123;&#125; &#123;&#125;&quot;.format(&quot;hello&quot;,&quot;world&quot;) )hello world</code></pre><p>2、设置指定位置，可以多次使用</p><pre><code>print(&quot;&#123;0&#125; &#123;1&#125; &#123;0&#125;&quot;.format(&quot;hello&quot;,&quot;or&quot;))hello or hello</code></pre><p>3、使用列表格式化</p><pre><code>person = &#123;&quot;name&quot;:&quot;opcai&quot;,&quot;age&quot;:20&#125;print(&quot;My name is &#123;name&#125; . I am &#123;age&#125; years old .&quot;.format(\*\*person))My name is opcai . I am 20 years old </code></pre><p>4、通过列表格式化</p><pre><code>stu = \[&quot;opcai&quot;,&quot;linux&quot;,&quot;MySQL&quot;,&quot;Python&quot;\]print(&quot;My name is &#123;0\[0\]&#125; , I love &#123;0\[1\]&#125; !&quot;.format(stu))My name is opcai , I love linux !</code></pre><h1 id="数字格式化"><a href="#数字格式化" class="headerlink" title="数字格式化"></a>数字格式化</h1><p>|数字        |格式    |输出        |描述                            |<br>|3.1415926    |{:.2f}    |3.14        |保留小数点后两位                |<br>|3.1415926    |{:+.2f}|+3.14        |带符号保留小数点后两位            |<br>|-1            |{:+.2f}|-1.00        |带符号保留小数点后两位            |<br>|2.71828    |{:.0f}    |3            |不带小数                        |<br>|5            |{:0&gt;2d}|05            |数字补零 (填充左边, 宽度为2)    |<br>|5            |{:x&lt;4d}|5xxx        |数字补x (填充右边, 宽度为4)    |<br>|10            |{:x&lt;4d}|10xx        |数字补x (填充右边, 宽度为4)    |<br>|1000000    |{:,}    |1,000,000    |以逗号分隔的数字格式            |<br>|0.25        |{:.2%}    |25.00%        |百分比格式                        |<br>|1000000000    |{:.2e}    |1.00e+09    |指数记法                        |<br>|13            |{:10d}    |13            |右对齐 (默认, 宽度为10)        |<br>|13            |{:&lt;10d}|13            |左对齐 (宽度为10)                |<br>|13            |{:^10d}|13            |中间对齐 (宽度为10)            |</p><h1 id="进制转换"><a href="#进制转换" class="headerlink" title="进制转换"></a>进制转换</h1><p>|数字    |格式                |输出    |描述        |<br>|11        |’{:b}’.format(11)    |1011    |二进制        |<br>|11        |’{:d}’.format(11)    |11        |十进制        |<br>|11        |’{:o}’.format(11)    |13        |八进制        |<br>|11        |’{:x}’.format(11)    |b        |十六进制    |<br>|11        |’{:#x}’.format(11)    |0xb    |十六进制    |<br>|11        |’{:#X}’.format(11)    |0XB    |十六进制    |</p><p>*^, &lt;, &gt; 分别是居中、左对齐、右对齐，后面带宽度， : 号后面带填充的字符，只能是一个字符，不指定则默认是用空格填充。</p><ul><li>表示在正数前显示 +，负数前显示 -； （空格）表示在正数前加空格</li></ul><p>b、d、o、x 分别是二进制、十进制、八进制、十六进制。*</p><h1 id="输出大括号"><a href="#输出大括号" class="headerlink" title="输出大括号"></a>输出大括号</h1><pre><code>print(&quot;&#123;&#125; &#123;&#123;0&#125;&#125;&quot;.format(&quot;opcai\_linux&quot;))opcai\_linux &#123;0&#125;</code></pre><p>原文链接：<a href="https://segmentfault.com/a/1190000022049917">https://segmentfault.com/a/1190000022049917</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端安全之 xss 攻击</title>
      <link href="2020/03/20.html"/>
      <url>2020/03/20.html</url>
      
        <content type="html"><![CDATA[<h1 id="什么是-xss？"><a href="#什么是-xss？" class="headerlink" title="什么是 xss？"></a>什么是 xss？</h1><p>XSS 攻击指通过巧妙的方法注入恶意指令代码到网页，使<strong>用户加载并执行</strong>攻击者恶意制造的代码。</p><h1 id="危害有什么？"><a href="#危害有什么？" class="headerlink" title="危害有什么？"></a>危害有什么？</h1><p>1.跳转到广告页面，页面注入广告等等。<br>2.导致公司域名被其他平台拉黑，从而使业务受损。<br>3.用户的财产受到威胁，他注入的代码可以在网页中任意请求接口。</p><a id="more"></a><h1 id="注入代码"><a href="#注入代码" class="headerlink" title="注入代码"></a>注入代码</h1><pre><code>http://upcdn&quot;&#39;&gt;&lt;/script&gt;&lt;script src=&quot;//www.lilnong.top/xss.js&quot;&gt;&lt;/script&gt;&lt;script&gt;alert(12306)&lt;/script&gt;&lt;svg&gt;&lt;/svg&gt;\n\t\n</code></pre><p>上面的代码是我们测试的时候使用的，接下来我们来分析一下这个代码主要用途。<br>1.<code>http://upcdn</code> 这个字符串是用来伪装的。</p><ul><li><code>&lt;img src=&quot;$&#123;str&#125;&quot;&gt;</code> 动态拼接图片地址</li><li><code>&lt;a href=&quot;$&#123;str&#125;&quot;&gt;</code> 动态跳转页面地址</li></ul><p>2.<code>&quot;&#39;&gt;</code> 这两个就是为了截断当前字符串，然后闭合标签。</p><ul><li><code>&lt;img src=&quot;$&#123;str&#125;&quot;&gt;</code></li></ul><p>3.<code>&lt;/script&gt;</code> 也是为了闭合标签，这个主要用在后台模板输出的时候。后台模板 velocity、freemarker 之类的。</p><ul><li><code>&lt;script&gt;var imgUrl = $&#123;str&#125;&lt;/script&gt;</code></li></ul><p>4.<code>&lt;script src=&quot;//www.lilnong.top/xss.js&quot;&gt;&lt;/script&gt;</code> 就是引入一个js，这种方式比较常见。注入之后，攻击者只需要修改自己的文件，就可以更新了。<br>5.<code>&lt;script&gt;alert(12306)&lt;/script&gt;</code> 直接执行js代码<br>6.<code>&lt;svg&gt;&lt;/svg&gt;</code> 注入一个元素，用于展示一个异常块打乱布局。比如 <code>vue</code> 中的 <code>v-html</code> 不会执行 <code>script</code> 标签中的内容，但是会显示 <code>svg</code> 图片。<br>7.<code>\n\t\n</code> 是为了测试后台模板输出的场景。</p><h1 id="防护场景及方案"><a href="#防护场景及方案" class="headerlink" title="防护场景及方案"></a>防护场景及方案</h1><h2 id="后台模板"><a href="#后台模板" class="headerlink" title="后台模板"></a>后台模板</h2><p>1.<code>toHtml</code> 主要用于输出在页面（标签中）中，将用户输入的内容进行编码比如 <code>&lt;</code>转换为<code>&amp;lt;</code>。</p><ul><li><span>${nickanme}</span></li></ul><p>2.<code>toJS</code> 主要用于输出在script标签中，这里需要防止打断js，比如处理成<code>&quot;&#39;\</code>n为<code>\&quot;\&#39;\\n</code><br>3.<code>toUrl</code> 这里其实和 <code>toHtml</code> 场景很像，但是需要判断url基础格式。</p><ul><li><code>https://</code></li><li><code>//lilnong.top</code></li><li><code>/static</code></li><li><code>./static</code></li><li><code>../static</code></li></ul><h2 id="jquery-amp-原生js"><a href="#jquery-amp-原生js" class="headerlink" title="jquery&amp;原生js"></a>jquery&amp;原生js</h2><p>1.toHtml 场景。jquery中基本上都是拼接一下，然后 <code>.html</code> 输出一下。这里需要做的也是把用户输入的做一下实体编码转换。<br>2.toUrl 场景。校验一下url，然后 <code>toHtml</code> 或者 <code>encode</code> 都可以。</p><h2 id="vue"><a href="#vue" class="headerlink" title="vue"></a>vue</h2><p>1.toHtml 场景。<code>v-html</code> 这里需要注意一下，尽可能不要使用，因为会导致注入问题。也可以toHtml一下，但是没必要不是吗。<br>2.toUrl 场景。<code>:href </code>主要 <code>javascript:alert(1);</code>这种场景，做url校验就可以。<br>3.toHtml 场景。使用原生的方法，vue 中非要 <code>innerHTML</code>的那些人。</p><h1 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h1><h2 id="富文本场景"><a href="#富文本场景" class="headerlink" title="富文本场景"></a>富文本场景</h2><p>1.做文章那种，大量的标签，属性。这种一般需要后端处理。<code>HTML Purifier</code><br>2.文字加表情，后者搜索高亮的场景。这种我们可以先执行<code>toHtml</code>，然后再匹配替换，最后在输出到页面即可。</p><h2 id="换行符问题"><a href="#换行符问题" class="headerlink" title="换行符问题"></a>换行符问题</h2><p>有时我们在<code>textarea</code>中输入<code>\n</code>，渲染的时候空白符就被浏览器给吃了。针对这种情况，我们可以用下面的方案处理</p><p>1.通过 css 属性 <code>white-space</code>，或者 <code>&lt;pre&gt;</code> 标签<br>2.一般人们是正则替换<code>.replace(/\n/g,&#39;&lt;br&gt;)</code>，这种输出的时候万一里面有代码不就凉了吗。所以我们先 toHtml 然后在使用，这样可以防止注入问题。<br>3.其实 <code>.innerText</code> 可以自动把<code>\n</code>转换为<code>&lt;br&gt;</code>，你可以自己试试</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><pre><code>window.base = &#123;    toHtml: function (val) &#123;        if( typeof val != &#39;string&#39; ) return &#39;&#39;;        var entityMap = &#123;            &quot;&amp;&quot;: &quot;&amp;amp;&quot;,            &quot;&lt;&quot;: &quot;&amp;lt;&quot;,            &quot;&gt;&quot;: &quot;&amp;gt;&quot;,            &#39;&quot;&#39;: &#39;&amp;quot;&#39;,            &quot;&#39;&quot;: &#39;&amp;#39;&#39;,            &quot;/&quot;: &#39;&amp;#x2F;&#39;        &#125;;        return String(val).replace(/[&amp;&lt;&gt;&quot;&#39;\/]/g, function (s) &#123;            return entityMap[s];        &#125;);    &#125;,    toUrl: function (url) &#123;        if( typeof url != &#39;string&#39; ) return &#39;#&#39;;        if(url.match(/^http/i))&#123;            return encodeURI(url)        &#125;        return &#39;#&#39;    &#125;,&#125;;</code></pre><p>原文链接：<a href="https://segmentfault.com/a/1190000022014580">https://segmentfault.com/a/1190000022014580</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>智慧树刷课代码</title>
      <link href="2020/03/19.html"/>
      <url>2020/03/19.html</url>
      
        <content type="html"><![CDATA[<p>功能： 检测章节  自动静音  自动下一节  1.5倍速<br>而且重要的一点就是，跳出来的问题，会随机作答，而不是全部选第一个。<br>代码来源网络。<br>使用方法： 打开正在看的视频 按F12打开控制台，找到Console那一栏，直接粘贴此处代码 按回车就好了。</p><a id="more"></a><pre><code>var chapters_length = document.querySelectorAll(&quot;ul.list&quot;).length;var video_length = document.querySelectorAll(&quot;li.video&quot;).length;console.log(&quot;共检测到&quot; + chapters_length + &quot;章&quot; + video_length + &quot;小节!&quot;);document.getElementsByClassName(&quot;volumeIcon&quot;)[0].click(); //设置静音console.log(&quot;静音设置成功!&quot;);document.getElementsByClassName(&quot;speedTab speedTab15&quot;)[0].click(); //设置1.5倍速console.log(&quot;1.5倍播放&quot;);//每两秒检测进度是否100%setInterval(() =&gt; &#123;    var progress = window.getComputedStyle(document.getElementsByClassName(&quot;passTime&quot;)[0], null).width; //进度数据    if (progress == &quot;100%&quot;) &#123;        //下一节        document.getElementById(&quot;nextBtn&quot;).click();        console.log(&quot;自动播放下一节&quot;);        setTimeout(() =&gt; &#123;            //检测00:00:00状态 处理章节间跳动            if (document.querySelector(&quot;span.duration&quot;).innerHTML == &quot;00:00:00&quot;) &#123;                var finished_length = document.querySelectorAll(&quot;b.time_icofinish&quot;).length;                document.querySelectorAll(&quot;li.video&quot;)[finished_length].click();                console.log(&quot;进入下一章节!&quot;);            &#125;        &#125;, 2000);    &#125;&#125;, 2000);//每秒检测弹窗setInterval(() =&gt; &#123;    //防静音意外失效    if(!document.getElementsByClassName(&quot;volumeBox  volumeNone&quot;)[0])    &#123;        document.getElementsByClassName(&quot;volumeIcon&quot;)[0].click();        document.getElementsByClassName(&quot;speedTab speedTab15&quot;)[0].click(); //设置1.5倍速    &#125;    if (document.getElementsByClassName(&quot;dialog-test&quot;)[0]) &#123;        console.log(&quot;检测到弹窗!&quot;);        var random_number = randomNum(0, document.querySelectorAll(&quot;li.topic-item&quot;).length - 1);        document.getElementsByClassName(&quot;topic-item&quot;)[random_number].click(); //随机选一个防作弊        console.log(&quot;已选择第&quot; + (random_number + 1) + &quot;个选项&quot;);        document.getElementsByClassName(&quot;el-dialog__wrapper dialog-test&quot;)[0].getElementsByClassName(            &quot;el-dialog__footer&quot;)[0].getElementsByClassName(&quot;btn&quot;)[0].click(); //关闭弹窗        console.log(&quot;弹窗关闭!&quot;);        document.getElementById(&quot;playButton&quot;).click(); //播放    &#125;&#125;, 1000); function randomNum(minNum, maxNum) &#123;    switch (arguments.length) &#123;        case 1:            return parseInt(Math.random() * minNum + 1, 10);            break;        case 2:            return parseInt(Math.random() * (maxNum - minNum + 1) + minNum, 10);            break;        default:            return 0;            break;    &#125;&#125;</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python中for和while循环的区别及用法</title>
      <link href="2020/03/18.html"/>
      <url>2020/03/18.html</url>
      
        <content type="html"><![CDATA[<h1 id="两者的区别"><a href="#两者的区别" class="headerlink" title="两者的区别"></a>两者的区别</h1><p>1,使用场景不同：<br><code>知道执行次数</code>的时候一般用<code>for</code>，<code>条件循环</code>时一般用<code>while</code>。</p><p>2,两种循环在构造死循环时的区别：<br>while循环里的条件被看成<code>表达式</code>，因此，当用while构造死循环时，里面的<code>TRUE</code>实际上被看成永远为真的表达式，这种情况容易产生混淆，有些工具软件如PC-Lint就会认为出错了，因此构造死循环时，最好使用for(;;)来进行。</p><a id="more"></a><p>3,两种循环在普通循环时的区别：<br>对一个数组进行循环时，一般来说，如果每轮循环都是在循环处理完后才讲循环变量增加的话，使用<code>for</code>循环比较方便。<br>如果循环处理的过程中就要将循环变量增加时，则使用<code>while</code>循环比较方便。<br>还有在使用<code>for</code>循环语句时，如果里面的循环条件很长，可以考虑用<code>while</code>循环进行替代，使代码的排版格式好看一些。</p><h1 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h1><p><code>for</code>循环可以<code>设置次数</code>，<code>while</code>循环条件满足<code>没有次数限制</code>。<br>        <span class="lazyload-img-span">        <img              data-src="https://s2.ax1x.com/2020/03/07/3XZIH0.png" >        </sapn>      </p>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python学习之路（四）</title>
      <link href="2020/03/17.html"/>
      <url>2020/03/17.html</url>
      
        <content type="html"><![CDATA[<h1 id="神奇的小海龟"><a href="#神奇的小海龟" class="headerlink" title="神奇的小海龟"></a>神奇的小海龟</h1><h2 id="和小海龟做朋友"><a href="#和小海龟做朋友" class="headerlink" title="和小海龟做朋友"></a>和小海龟做朋友</h2><ul><li>Python中的<code>turtle</code>模块是一个简单的画图工具。它在屏幕上提供一 个小海龟，这只小海龟可以在屏幕上爬来爬去，并在爬过的地方 留下五颜六色的痕迹</li><li>使用<code>import turtle</code>命令即可导入小海龟的功能模块<pre><code>#引入画笔工具import turtle</code></pre></li></ul><pre><code>&lt;!--more--&gt;## 小海龟的常见命令:|功能|命令||-|-||设置海龟的外形|`turtle.shape()`||设置痕迹的颜色|`turtle.color()`||海龟向前移动|`turtle.forward()`或者`turtle.fd()`||海龟向后移动|`turtle.backward()`或者`turtle.bk()`||海龟向左转|`turtle.left()`或者`turtle.lt()`||海龟向右转|`turtle.right()`或者`turtle.rt()`||让海龟离开屏幕（此时海龟爬过 的地方不留痕迹）|`turtle.up()`||让海龟回到屏幕|`turtle.down()`||设置海龟爬行的速度|`turtle.speed()`||让海龟画圆|`turtle.circle()`||开始填充|`turtle.begin_fill()`||结束填充|`turtle.end_fill()`|</code></pre><p>import turtle<br>turtle.speed(0)</p><p>turtle.shape(“turtle”)<br>turtle.color(“red”)<br>turtle.left(90)<br>turtle.forward(200)<br>turtle.right(90)<br>turtle.forward(200)<br>turtle.right(90)<br>turtle.forward(200)<br>turtle.right(90)<br>turtle.forward(200)</p><p>turtle.begin_fill()<br>turtle.circle(100)<br>turtle.end_fill()</p><pre><code># 用小海龟画正多边形- 计算机给我们提供了一种将代码中相同部分重复执行的有效方法， 这种方法叫做循环- for循环是Python循环的一种，其语法格式为：  - </code></pre><p>   for 循环变量 in 循环变量取值范围:<br>         需要循环的程序代码</p><pre><code>- 在`for`循环中，紧跟`for`语句的变量`i`被称之为循环变量，该变量的 值在循环的过程中会不断地变化，它的变化受限于关键字`in`之后 的内容- 在`for`语句之后被循环执行的语句块我们称之为循环体，即真正被 循环执行的部分，我们在循环体前方添加一个缩进（4个空格） 来表示它们之间的所属关系</code></pre><p>import turtle</p><p>turtle.shape(“turtle”)<br>turtle.color(“red”)<br>#for循环开始<br>for i in [0,1,2,3,4]:<br>    turtle.right(144)<br>    turtle.forward(200)<br>#for循环结束</p><pre><code># 用函数化简程序- `函数`：使用一个名字定义一段实现特定功能的代码组合的工作机 制，使用该函数的名字，即可让计算机执行函数内预先定义好的 程序- 函数定义的语法格式： - </code></pre><p> def 函数名(参数列表):<br>        函数体</p><pre><code>- 程序的函数必须是`先定义再调用`的</code></pre><p>#请进小海龟，并设置小海龟的外形和颜色<br>import turtle<br>turtle.shape(“turtle”)<br>turtle.color(“red”)<br>#定义函数并设置参数（x,y,color)<br>def drawstar(x,y,color):<br>    turtle.up()<br>    turtle.goto(x,y)<br>    turtle.down()<br>    turtle.color(color)<br>    for i in [0,1,2,3,4]:<br>        turtle.right(144)<br>        turtle.forward(100)<br>#定义结束<br>#设置小海龟的位置和朝向</p><p>#绘制第一个五角星<br>drawstar(-200,200,”blue”)</p><p>#再一次设置小海龟的位置和朝向</p><p>#绘制第二个五角星<br>drawstar(300,200,”green”)</p><p>#继续设置小海龟的位置和朝向，并绘制第三、第四个五角星<br>drawstar(-200,-200,”red”)</p><p>drawstar(300,-200,”yellow”)</p><p>turtle.up()<br>turtle.home()</p><pre><code># 函数的参数- 函数的参数：即函数的输入部分，用来存放函数调用时传递来的 初始内容，函数的参数增加了函数的灵活性，允许函数应对不同 的处理情况- 调用函数时，参数的格式必须与函数定义中完全一致</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于http与https之间的区别</title>
      <link href="2020/03/16.html"/>
      <url>2020/03/16.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>今天我将博客全部启用了https，这就发现了一个问题，https和http到底有什么区别呢？</p></blockquote><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>谷歌在2018年2月9日宣布从今年的7月起，Chrome浏览器将在地址栏把所有的HTTP网址标示为不安全网站。</p><p>谷歌早在2017年1月发布的Chrome56，开始把要求用户输入密码或信用卡信息的HTTP网页标为不安全；2017年10月发布的Chrome62，开始把需要输入数据的HTTP网页和在Incognito模式下浏览的HTTP网站标为不安全。</p><h1 id="http与https的概念"><a href="#http与https的概念" class="headerlink" title="http与https的概念"></a>http与https的概念</h1><p>http超文本传输协议，是一个客户端和服务端请求和应答的标准，用于WWW服务器传输超文本到本地浏览器的传输协议，可以使浏览器更加高效，减少网络传输。</p><p>https超文本传输安全协议，就是http的安全版本，https是由http进行通信，但利用SSL/TLS来加密数据包。</p><p>HTTPS开发的主要目的，是提供对网站服务器的身份认证，保护交换数据隐私与完整性。这个协议由网景公司在1994年首次提出，随后扩展到互联网。</p><a id="more"></a><h1 id="http存在的问题"><a href="#http存在的问题" class="headerlink" title="http存在的问题"></a>http存在的问题</h1><ul><li>易被监听<br>http通信是明文，数据在客户端与服务器通信的过程中，任何一点都可能被劫持。比如，发送了银行卡号和密码，hacker劫取到数据，就可以看到卡号和密码，这是很危险的；</li><li>易被伪装<br>http通信时，无法保证通行双方是合法的，通信方可能是伪装后的。比如你请求birdteam.net，你怎么知道返回的数据就是来自本站，中间人可能返回数据伪装成本站；</li><li>易被篡改<br>hacker中间篡改数据后，接收方并不知道数据已经被更改。</li></ul><h1 id="https解决的问题"><a href="#https解决的问题" class="headerlink" title="https解决的问题"></a>https解决的问题</h1><p>https恰好解决了上述三个问题，https不是一种新协议，它是由http+SSL的结合体，由之前http到tcp，改为了http到SSL到tcp。</p><ul><li>防止监听<br>因为数据是加密的，黑客监听得到的是密文，看不懂的；</li><li>防止伪装<br>https在通信的过程中，客户端和服务器端都是携带证书，证书相当于身份证，有证书就是合法的，没有就是非法，证书由第三方颁布，很难伪造；</li><li>防止篡改<br>https对数据进行摘要处理，即使被篡改也是会被感知的，改了数据也没有用。</li></ul><h1 id="http与https的区别"><a href="#http与https的区别" class="headerlink" title="http与https的区别"></a>http与https的区别</h1><p>http协议传输的数据时未经过加密的，就是明文；</p><p>https在使用http进行通信时，利用SSL进行了加密传输、身份认证的网络协议http+SSL，比http更加安全。</p><ul><li><p>https使用需要CA证书，大部分都是付费使用的<br>CA是Certificate Authority的缩写，也叫证书授权中心，也是需要第三方公司进行授权的。</p></li><li><p>端口不同<br>HTTP的URL是由http://起始且默认使用80端口；</p></li></ul><p>HTTPS的URL是由https://起始且默认使用443端口。</p><h1 id="https的工作原理"><a href="#https的工作原理" class="headerlink" title="https的工作原理"></a>https的工作原理</h1><p>如图所示，https工作原理可以细分为八个步骤：<br>        <span class="lazyload-img-span">        <img              data-src="https://birdteam.net/wp-content/uploads/2018/02/201802280312223.jpg" >        </sapn>      </p><ul><li>客户端发起HTTPS请求<br>用户在浏览器里输入一个https网址，然后连接到server的443端口；</li><li>服务端的配置<br>就是指上述提到的数字证书；</li><li>传送证书<br>Web服务器收到客户端请求后，会将网站的证书信息中包含公钥传送一份给客户端；</li><li>客户解析证书<br>客户会对证书进行判断，验证公钥是否有效，存在问题弹出警告；若没问题，生成一个秘钥，后用证书继续进行加密；</li><li>传送加密信息<br>客户端将上加密后的随机值（私钥）提供给服务端，服务端会对其进行解密；</li><li>服务器端解密信息<br>服务端解密后得到私钥，然后把内容通过该值进行对称性加密。对称加密就是指把要返回的信息和随机值（私钥）混合加密，这样除非知道私钥，不然无法获取数据；</li><li>传输加密后的信息<br>继续将加密后的信息传递给客户；</li><li>客户解密信息<br>客户端用之前生成的秘钥解密服务端传过来的信息，于是获取解密后的内容。</li></ul><h1 id="https的缺点"><a href="#https的缺点" class="headerlink" title="https的缺点"></a>https的缺点</h1><p>https虽然安全性比http高出很多但是也有一些缺点。</p><ul><li>握手阶段费时<br>因为SSL的缘故，HTTPS协议握手阶段会比较费时，会使页面加载时间延长近50%；</li><li>SSL证书要花钱<br>便宜没好货好货不便宜；</li><li>HTTPS连接缓存不如HTTP高效<br>HTTPS连接缓存不如HTTP高效，会增加数据开销和功耗，甚至已有的安全措施也会因此而受到影响；</li><li>SSL证书通常需要绑定IP<br>SSL证书通常需要绑定IP，不可以在同一IP上绑定多个域名，IPv4资源不可能支撑这个消耗；</li><li>有局限性<br>HTTPS协议加密范围也比较有限，黑客攻击、拒绝服务攻击、服务器劫持方面几乎起不到什么作用。最关键的，SSL证书信用链体系并不安全，特别是在某些国家可以控制CA根证书的情况下，中间攻击一样可行。</li></ul><p>本文转自菜鸟博—<a href="https://birdteam.net/30333">原文链接</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> knowledge </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python判断水仙花数的方法</title>
      <link href="2020/02/15.html"/>
      <url>2020/02/15.html</url>
      
        <content type="html"><![CDATA[<h1 id="什么是水仙花数"><a href="#什么是水仙花数" class="headerlink" title="什么是水仙花数"></a>什么是水仙花数</h1><p>水仙花数（Narcissistic number）也被称为超完全数字不变数（pluperfect digital invariant, PPDI）、自恋数、自幂数、阿姆斯壮数或阿姆斯特朗数（Armstrong number），水仙花数是指一个 3 位数，它的每个位上的数字的 3次幂之和等于它本身（例如：1^3 + 5^3+ 3^3 = 153）。</p><h1 id="常见的水仙花数"><a href="#常见的水仙花数" class="headerlink" title="常见的水仙花数"></a>常见的水仙花数</h1><p>水仙花数又称阿姆斯特朗数。<br>三位的水仙花数共有4个：153，370，371，407；<br>四位的四叶玫瑰数共有3个：1634，8208，9474；<br>五位的五角星数共有3个：54748，92727，93084；<br>六位的六合数只有1个：548834；<br>七位的北斗七星数共有4个：1741725，4210818，9800817，9926315；<br>八位的八仙数共有3个：24678050，24678051，88593477<br>……</p><a id="more"></a><h1 id="如何利用python实现的对水仙花数的判断"><a href="#如何利用python实现的对水仙花数的判断" class="headerlink" title="如何利用python实现的对水仙花数的判断"></a>如何利用python实现的对水仙花数的判断</h1><pre><code>#第一种#提示用户输入三位数字abc = int(input(&quot;请输入三位数：&quot;))#计算判断并输出结果print(&quot;水仙花数&quot; if abc==(abc//10**2)**3+(abc%10**2//10)**3+(abc%10)**3 else &quot;不是水仙花数&quot; )#第二种#提示用户输入y = int(input(&quot;请输入三位数:&quot;))#分离数值a = y//10**2 #百位b = y%10**2//10 #十位c = y%10 #个位#计算z = a**3+b**3+c**3#判断与输出print(&quot;水仙花数&quot;) if y==z else print(&quot;不是水仙花数&quot;)#第三种#提示用户输入y = input(&quot;请输入三位数:&quot;)#分离数值a = int(y[:1]) #百位#print(a)b = int(y[1:2]) #十位#print(b)c = int(y[2:]) #个位#print(c)#计算z = a**3+b**3+c**3#print(z)#将y的值转化为数值y = int(y)#判断与输出print(&quot;水仙花数&quot;) if y==z else print(&quot;不是水仙花数&quot;)</code></pre><p>以上只是提供了三种方法。</p>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python实现快速排序的两种方法</title>
      <link href="2020/02/14.html"/>
      <url>2020/02/14.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>代码环境：python3.6</p></blockquote><h1 id="递归实现"><a href="#递归实现" class="headerlink" title="递归实现"></a>递归实现</h1><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><ul><li>从序列中挑出任意一个元素为<code>pivot</code>，此处选择序列最后一个元素，如果更改，需要相应变更以下步骤内容；</li><li>设置两个指针<code>left</code>和<code>right</code>，指向序列的最左和最右两个元素；</li><li>从<code>left</code>开始，找到第一个比<code>pivot</code>大的元素；切换到<code>right</code>，找到第一个比<code>pivot</code>小的元素；</li><li>将<code>left</code>和<code>right</code>此时指向的元素互换；</li><li>重复<code>1-4</code>步骤，直到<code>left==right</code>，将<code>pivot</code>和<code>left</code>对应的元素互换，这样以<code>pivot</code>分割左右两个区，左边元素都比<code>pivot</code>小，右边元素都比<code>pivot</code>大；</li><li>将两个分区分别递归重复<code>1-5</code>步骤，直到不可再分区，递归条件就是<code>start&lt;end</code>。<a id="more"></a></li></ul><h2 id="算法实现"><a href="#算法实现" class="headerlink" title="算法实现"></a>算法实现</h2><pre><code>def partition(mylist, start, end):    # 若选其他元素作为pivot，下面的while内容需要相应更改    pivot = mylist[end]    left = start    right = end    while left &lt; right:        while left &lt; right and mylist[left] &lt;= pivot:            left += 1        while left &lt; right and mylist[right] &gt;= pivot:            right -= 1        if left != right:            mylist[left], mylist[right] = mylist[right], mylist[left]    mylist[end], mylist[left] = mylist[left], pivot    return leftdef quick_sort(mylist, start, end):    &quot;&quot;&quot;    mylist: 待排序的 list    start: mylist第一个元素索引    end: mylist最后一个元素索引    &quot;&quot;&quot;    if start &lt; end:        mid = partition(mylist, start, end)        quick_sort(mylist, start, mid - 1)        quick_sort(mylist, mid + 1, end)if __name__ == &quot;__main__&quot;:    mylist = [12, 33, 199, 0, 54, 77, 11, 54, 9, 7]    quick_sort(mylist, 0, len(mylist) - 1)    print(f&#39;快速排序后：&#123;mylist&#125;&#39;)</code></pre><h1 id="非递归实现"><a href="#非递归实现" class="headerlink" title="非递归实现"></a>非递归实现</h1><p>绝大多数用递归实现的问题，都可以用<code>栈</code>的方式来代替。</p><p>为什么？因为我们代码中一层层的方法调用，本身就是一个函数栈，每次进入一个新方法，就相当于入栈；每次有方法返回，就相当于出栈。</p><p>所以，我们可以利用栈存储每一次调用方法的参数。</p><h2 id="算法实现-1"><a href="#算法实现-1" class="headerlink" title="算法实现"></a>算法实现</h2><pre><code>class Stack():    &quot;&quot;&quot;简单实现一个栈，本质就是个list&quot;&quot;&quot;    def __init__(self):        self.items = []    def is_empty(self):        return self.items == []    def push(self, item):        self.items.append(item)    def pop(self):        return self.items.pop()# 此方法与上面例子一样，保持不变def partition(mylist, start, end):    # 若选其他元素作为pivot，下面的while内容需要相应更改    pivot = mylist[end]    left = start    right = end    while left &lt; right:        while left &lt; right and mylist[left] &lt;= pivot:            left += 1        while left &lt; right and mylist[right] &gt;= pivot:            right -= 1        if left != right:            mylist[left], mylist[right] = mylist[right], mylist[left]    mylist[end], mylist[left] = mylist[left], pivot    return leftdef quick_sort(mylist):    stack = Stack()    start = 0    end = len(mylist) - 1    if start &lt; end:        stack.push((start, end))        while not stack.is_empty():            start, end = stack.pop()            mid = partition(mylist, start, end)            if start &lt; mid - 1:                stack.push((start, mid - 1))            if mid + 1 &lt; end:                stack.push((mid + 1, end))</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>阿里云服务器地域及18个数据中心测试地址</title>
      <link href="2020/02/11.html"/>
      <url>2020/02/11.html</url>
      
        <content type="html"><![CDATA[<h1 id="服务器地域分布"><a href="#服务器地域分布" class="headerlink" title="服务器地域分布"></a>服务器地域分布</h1><h2 id="地域（Region）"><a href="#地域（Region）" class="headerlink" title="地域（Region）"></a>地域（Region）</h2><p>地域是指物理的数据中心。资源创建成功后不能更换地域。当前所有的地域、地域所在城市和 Region ID 的对照关系如下表所示。</p><ul><li><p>中国大陆<br>        <span class="lazyload-img-span">        <img              data-src="https://s2.ax1x.com/2020/02/22/3MXEOH.png" >        </sapn>      </p></li><li><p>其他国家及地区<br>        <span class="lazyload-img-span">        <img              data-src="https://s2.ax1x.com/2020/02/22/3MX36g.png" >        </sapn>      </p></li></ul><p>选择地域时，您需要考虑以下几个因素：</p><h2 id="地理位置"><a href="#地理位置" class="headerlink" title="地理位置"></a>地理位置</h2><p>请根据您以及您目标用户所在的地理位置选择地域。</p><a id="more"></a><p>中国大陆<br>一般情况下建议选择和您目标用户所在地域最为接近的数据中心，可以进一步提升用户访问速度。不过，在基础设施、BGP 网络品质、服务质量、云服务器操作使用与配置等方面，阿里云中国大陆地域没有太大区别。BGP 网络可以保证中国大陆全部地域的快速访问。</p><p>其他国家及地区<br>其他国家及地区提供国际带宽，主要面向非中国大陆地区用户。如果您在中国大陆，使用这些地域会有较长的访问延迟，不建议您使用。<br>对中国香港、东南亚有需求的用户，可以选择中国香港地域、亚太东南 1 地域、亚太东南 3 地域或亚太东南 5 地域。<br>对日、韩有需求的用户，可以选择亚太东北 1 地域。<br>对印度有需求的用户，可以选择亚太南部 1 地域。<br>对澳大利亚地区有需求的用户，可以选择亚太东南 2 地域。<br>对美洲有需求用户，可以选择美国地域。<br>对欧洲大陆有需求的用户，可以选择欧洲中部 1 地域。<br>对中东地区有需求的用户，可以选择中东东部 1 地域。</p><h1 id="18个数据中心测试地址"><a href="#18个数据中心测试地址" class="headerlink" title="18个数据中心测试地址"></a>18个数据中心测试地址</h1><p>用户在选择阿里云服务器的时候是不是感觉阿里云的数据中心太多太多，确实阿里云服务器机房是有很多，国外国外机房大约有18个，甚至更多，因为还在不断的增加机房。对于商家而言增加不同的机房可以满足不同的项目和地区用户需要。其次，我们有些用户项目也是需要多机房的。<br>在众多机房中，对于新选择阿里云服务器的用户来说确实是比较难以选择。因为我们不清楚各个机房的速度如何。所以，在这篇文章中，云部落有找到阿里云官方提供的18个数据中心的测试地址，我们可以进行PING速度测试、路由追踪测试等测试手段。</p><pre><code>华东 1 oss-cn-hangzhou.aliyuncs.com华东 2 oss-cn-shanghai.aliyuncs.com华北 1 oss-cn-qingdao.aliyuncs.com华北 2 oss-cn-beijing.aliyuncs.com华北 3 oss-cn-zhangjiakou.aliyuncs.com华北 5 oss-cn-huhehaote.aliyuncs.com华南 1 oss-cn-shenzhen.aliyuncs.com香港 oss-cn-hongkong.aliyuncs.com美国西部 1 （硅谷） oss-us-west-1.aliyuncs.com美国东部 1 （弗吉尼亚） oss-us-east-1.aliyuncs.com亚太东南 1 （新加坡） oss-ap-southeast-1.aliyuncs.com亚太东南 2 （悉尼） oss-ap-southeast-2.aliyuncs.com亚太东南 3 （吉隆坡） oss-ap-southeast-3.aliyuncs.com亚太东南 5 （雅加达） oss-ap-southeast-5.aliyuncs.com亚太南部 1 （孟买） oss-ap-south-1.aliyuncs.com亚太东北 1 （日本） oss-ap-northeast-1.aliyuncs.com欧洲中部 1 （法兰克福） oss-eu-central-1.aliyuncs.com中东东部 1 （迪拜） oss-me-east-1.aliyuncs.com</code></pre><h1 id="测速方法"><a href="#测速方法" class="headerlink" title="测速方法"></a>测速方法</h1><ul><li>PING测试：<a href="http://ping.chinaz.com/">ping.chinaz.com</a></li><li>路由回程：<a href="https://www.ipip.net/traceroute.php">https://www.ipip.net/traceroute.php</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> daily </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>各国语言说我爱你，超简单！</title>
      <link href="2020/02/8.html"/>
      <url>2020/02/8.html</url>
      
        <content type="html"><![CDATA[<p>1、韩文：사랑해 </p><ul><li>发音：撒浪嘿哟</li></ul><p>2、英文：I love you</p><ul><li>发音：爱老虎油</li></ul><p>3、法文：je t’aime</p><ul><li>发音：热它么（感觉有点像骂人呢……）<a id="more"></a></li></ul><p>4、西班牙文：te quiero </p><ul><li>发音：得（轻声）给（一声）偌（四声）</li></ul><p>5、德文：ich liebe dich</p><ul><li>发音:一史咧北迪史</li></ul><p>6、葡萄牙文:eu te amo</p><ul><li>发音:于特啊摸</li></ul><p>7、意大利文:ti amo</p><ul><li>发音:第阿冒</li></ul><p>这些不同语言说“我爱你”学会了吗?是不是超简单呢?</p>]]></content>
      
      
      
        <tags>
            
            <tag> daily </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
